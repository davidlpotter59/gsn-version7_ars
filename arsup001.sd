%%
Program
        Name = "arsup001" ;
        Type = "File" ;
        Domain = "PRSTRANS" ;
        Padcharacter = Space ;
/*

 GGUNDER

 this updates arsup001_delos.sd to arsup001.sd

 * Licensed Material - Property of SCIPS.com, Inc.

 * Copyright 2009. All Rights Reserved.

 * This source code represents valuable proprietary information and must
 * not be disclosed to any third party without explicit prior written
 * authorization signed by the Management of SCIPS.com, Inc.

*/
/*
        arsup001.sd

        scips.com, inc.

        december 12, 2000

         This program "posts" premium transaction file records to the
        prsmaster file and creates the A/R.  At this point the installment
        (Payment plan) is decided.

        Deposit premiums are applied here

        Changes for Reinstatements
        if prstrans:trans_code one of 16 then
        begin
            go to arscancel, all records with a status of "P"
            make them a "R" and set the trans date to todaysdate
        end


        work in process - if the cx balance due is reinstated without paying then
        the system needs to add the balance of the cx balance due back into the
        reinstated amounts - if not, the total amount due does not balance to the
        original amount
*/
        Global Unsigned Ascii Number G_POLICY_NO[9],
                                     G_POL_YEAR[4],
                                     G_END_SEQUENCE[4];
        Array [20] Of Wdate L_DUE_DATE ;
        Array [20] Of String L_DUE_DATE_STATUS ;
        Array [20] Of Wdate L_HOLD_DUE_DATE ;
        array [20] of wdate l_hold_billed_date ;
        array [20] of signed ascii number l_total_credit[9]/dec=2 ;
        Array [20] Of Wdate L_13_DUE_DATE   ;
        Array [20] Of Signed Ascii Number L_INSTALLMENT[9]/decimals=2;
        array [20] of signed ascii number l_net_amount_due_1[9]/dec=2 ;
        array [20] of signed ascii number l_net_amount_due_2[9]/dec=2 ;
        array [20] of signed ascii number l_net_amount_due_3[9]/dec=2 ;

        Number COUNTER = 0,
               L_ENDORSEMENT_INSTALLMENTS[1]=1/decimals=0;

        Unsigned Ascii Number L_CHECK_REFERENCE[7]=0/decimals=0,
                              l_refund_pol_year[4]=0000,
                              l_credit_remaining[9]=0/dec=2,
                              l_NSF_amount_to_bill[3]=0 ;

/* 10/30/2003 -  hold the last check payor for return premium checks */
        Unsigned Ascii Number L_HOLD_CHKSU_CHECK_REFERENCE[7]=0/decimals=0;
        unsigned ascii number l_hold_prstrans_comm_rate[4]/dec=2 ;
        signed ascii number l_total_prstrans_credit[9]=0.00/dec=2,
                            l_sub[9]=0.00/dec=2,
                            l_add[9]=0.00/dec=2,
                            l_total_credit_returned[9]=0.00/dec=2 ,
                            l_total_credit_returned_switch[9]=0.00/dec=2 ;
        signed ascii number l_total_prstrans_surcharge_credit[9]=0.00/dec=2 ;
        signed ascii number l_total_due[9]=0/dec=2 ;
        signed ascii number l_hold_total_amount_due[9]=0.00/dec=2 ;
        signed ascii number l_hold_total_installment_due[9]=0.00/dec=2;
        signed ascii number l_hold_total_surcharge_due[9]=0.00/dec=2,
                             l_already_paid[9]=0.00/dec=2 ;

        String L_HOLD_CHKSU_COMPANY_ID[10],
               l_aps_trans_code[6],
               l_audit[1]= "N" ;

        String L_COMPANY_ID[10]="",
               l_bill_plan[2],
               l_record_added[1]="N",
               l_hold_aps_trans_code[10]="",
               l_flat_policy_cx[1],
               l_lob_subline_first_time[1],
               l_lob_subline[2],
               l_use_subline[2] ;

        Unsigned Ascii Number L_SUB_CODE[4] = 0,
                              L_CTR[4]=0 ,
                              l_ctr_counter[2]=0,
                              L_SKIPPED_PERIODS[3]=0,
                              l_hold_total_amount_paid[9]=0.00/dec=2,
                              L_TOTAL_REMAINING_PERIODS[3]=0,
                              L_MAX_CTR[2]=20,
                              l_start_billing_ctr_audit[4]=0/decimals=0 ;
        Signed Ascii Number L_DIFFERENT_PREMIUM[9]=0/decimals=2,
                            L_TOTAL_INSTALLMENT[9]=0/decimals=2,
                            l_duplicate13_installment[9]=0/dec=2 ;


        signed ascii number l_balance[9]=0.00/decimals=2;
        signed ascii number l_hold_amount_paid[9]=0.00/decimals=2;

        signed ascii number l_credit_amount_remaining[9]=0.00/decimals=2,
                            l_amount_to_use[9]=0.00/decimals=2;

        Wdate L_TRANS_EFF=00.00.0000,
              L_TRANS_EXP=00.00.0000,
              L_TRANS_DATE=00.00.0000,
              l_arsmaster_trans_eff,
              l_arsmaster_trans_date,
--              l_hold_trans_date_cancel,
              l_hold_old_due_date,
              l_billed_date,
              l_refund_trans_eff ;

--  l_update_file is used to log which file had an error, if any
        String L_UPDATE_FILE[80]="",
               l_reverse[1]="Y";

        Unsigned Ascii Number L_ERR_CTR[6]=0;
        String L_ENTER[1];
        string l_first_credit[1]="N";
        Unsigned Ascii Number L_PRMAST_SUB_CODE[4]=0/decimals=0;
        Unsigned Ascii Number L_CTR_2[2]=0/decimals=0;
        Unsigned Ascii Number L_CTR_3[2]=0/decimals=0;
        String L_FOUND[1]="N";
        string l_first_record[1]="Y" ;
        signed ascii number l_prsmaster_total[9]=0 ;
        Unsigned Ascii Number L_RETURN_CHECK_CTR[4]=0;
        Unsigned Ascii Number L_INSTALLMENT_CHARGE[5]=0;
        Unsigned Ascii Number L_INSTALLMENT_CHARGE1[5]=0;
        Unsigned Ascii Number L_HOLD_POLICY_NO[9]=0;
        Unsigned ascii number l_hold_trans_code[4]=0;
        String L_FIRST_PASS[1]="Y";
        String L_OFFSET_PAYMENT[1] = "N";
        Unsigned Ascii Number L_NUMBER_OF_PAYMENTS[4]=0;
        Unsigned Ascii Number L_TRANS_CODE[2]=0;
        Signed Ascii Number L_TOTAL_PAYMENTS[9]=0/decimals=2;
        Signed Ascii Number L_TOTAL_ANNUAL[9]=0/decimals=2;
        Unsigned Ascii Number L_CX_BALANCE_DUE_PAID_OFFSET[9]=0/decimals=2;
--        Unsigned Ascii Number L_PAST_INSTALLMENTS[2]=0/decimals=0;
        Signed Ascii Number L_CX_INSTALLMENTS[4]=0/decimals=0;
--        Unsigned Ascii Number L_CX_TRANS[2]=28;
        String L_INSTALLMENT_UPDATED[1]="N";
        Signed Ascii Number L_NET_PAYMENTS[9]=0/decimals=2;
        Signed Ascii Number L_NET_PAYMENTS_BALANCE[9]=0/decimals=2;
        String L_HIT[1] = "N";
        Unsigned Ascii Number L_PERIODS[2]=0/decimals=0;
        Signed Ascii Number L_INSTALLMENT_AMOUNT[9]=0/decimals=2;
        String L_HOLD_COMPANY_ID[10]="";
        Unsigned Ascii Number L_CX_BILLED_TRANS[2]=0/decimals=0;
        Signed Ascii Number L_NET_PREMIUMS[9]=0/decimals=2;
        Signed Ascii Number L_PREMIUMS[9]=0/decimals=2;
        Signed Ascii Number L_SUR_CHARGE[9]=0/decimals=2;
        Signed Ascii Number L_CX_PREMIUMS[9]=0/decimals=2;
--        Signed Ascii Number L_CX_INSTALLMENT_AMOUNT[9]=0/decimals=2;
        Signed Ascii Number L_CX_SUR_CHARGE[9]=0/decimals=2;
        Unsigned Ascii Number L_BILLING_CTR[4]=0/decimals=0;
        Unsigned Ascii Number L_TRANS_CODE_HOLD[4]=0/decimals=0;
        Signed Ascii Number L_NET_AMOUNT[9]=0/decimals=2;
        Wdate L_HOLD_TRANS_EFF=00.00.0000;
        Wdate L_HOLD_TRANS_EXP=00.00.0000;
        Wdate L_HOLD_TRANS_DATE=00.00.0000;
        string l_hold_bill_plan[2];
        Unsigned Ascii Number L_HOLD_LINE_OF_BUSINESS[4]=0;
        Unsigned Ascii Number L_HOLD_PAYMENT_PLAN[4]=0;
        String L_HIT_BILLING[1]="N";
        String L_FORCE_INVOICE[1]="N";
        string l_other_activity[1]="N";
        Unsigned Ascii Number L_START_BILLING_CTR[4]=0/decimals=0;
        Unsigned Ascii Number L_BUCKET_CTR[2]=0/decimals=0;
        Unsigned Ascii Number L_TEMP_TRANS_CODE[4]=0/decimals=0;
        Signed Ascii Number L_TEMP_PREMIUM[9]=0/decimals=2;
        Signed Ascii Number L_TEMP_REINSTATEMENT_AMOUNT[9]=0/decimals=2;
        Signed Ascii Number L_PENDING_DISBURSEMENTS[9]=0/decimals=2;
        Signed Ascii Number L_TOTAL_DISBURSEMENTS[9]=0/decimals=2;
        Signed Ascii Number L_CHECKS_ISSUED[9]=0/decimals=2;
        Signed Ascii Number L_CX_BALANCE_DUE_PAID[9]=0/decimals=2;
        String L_DEFAULT_RELEASE[1]="";
        Signed Ascii Number L_NET_AMOUNT_DUE[9]=0/decimals=2;

/* new variables for trans code 13 offset - july 14, 2003 */
        Unsigned Ascii Number L_HOLD_LAST_BILLING_CTR[4]=0/dec=0;
        String L_HOLD_LAST_BILLING_STATUS[1]="";
        Wdate L_HOLD_LAST_DUE_DATE=00.00.0000;

/* new variables for trans code 16 fudge - July 17, 2003 */
--        unsigned ascii number l_16_loop_ctr[3]=0/dec=0;
        Signed Ascii Number L_16_DIFF_PREM[9]=0/dec=2;
        Signed Ascii Number L_16_REMAINING_PREM[9]=0/dec=2;
        Signed Ascii Number L_UNISSUED_CHECK[9]=0/dec=2;
        Signed Ascii Number L_19_DIFF_PREM[9]=0/dec=2,
                            L_19_REMAINING_PREM[9]=0/dec=2;

/* new var for whole dollar rounding of installments
   added July 29, 2003 */

        Array [20] Of Signed Ascii Number L_INSTALLMENT_NO_CENTS[9]/decimals=0;
        Signed Ascii Number L_TOTAL_INSTALLMENT_NO_CENTS[9]/decimals=0,
                            L_DIFF_INSTALLMENT_NO_CENTS[9]/decimals=0;
        String L_HOLD_SUBLINE[4]="";
        Signed Ascii Number L_TOTAL_RETURN[9]=0/decimals=2;
        String L_FLAT_CX[1]="";
        Signed Ascii Number L_TOTAL_AMOUNT_APPLIED[9]=0/decimals=2;
        Signed Ascii Number L_REINSTATE_AR[9]=0/decimals=2;
        Signed Ascii Number L_TOTAL_REAL_CHECKS[9]=0/decimals=2;
        Unsigned Ascii Number L_HOLD_POL_YEAR[4]=0/decimals=0;
        Unsigned Ascii Number L_POL_YEAR[4]=0/decimals=0;
        Signed Ascii Number L_TOTAL_UNEARNED[9]=0/decimals=2;
        Signed Ascii Number L_TOTAL_AMOUNT_PAID[9]=0/decimals=2;
        Signed Ascii Number L_TOTAL_WRITTEN[9]=0/decimals=2;
        Signed Ascii Number L_TOTAL_EARNED[9]=0/decimals=2;
        Wdate L_ENDORSEMENT_TRANS_EXP;
        Unsigned Ascii Number L_PRIOR_YEAR[1]=0/decimals=0;
        Signed Ascii Number L_NSF_CHARGE[6]=0/decimals=2;
        Unsigned Ascii Number L_USE_RECORD[1]=0/decimals=0;
        Unsigned Ascii Number L_ORIGINAL_TRANS_CODE[2]=0/decimals=0;
        Signed Ascii Number L_DISBURSEMENTS2[9]=0/decimals=2;
        Signed Ascii Number L_AC_ROUNDED_AMOUNT[9]=0/decimals=0;
        Signed Ascii Number L_COMMISSION_AMOUNT[9]=0/decimals=2;
        Signed Ascii Number L_COMMISSION_RATE[5]=0/decimals=4;
        Signed Ascii Number L_HOLD_PREMIUM[9]=0/decimals=2;
        unsigned ascii number l_hold_agent_no[4]=0;
        unsigned ascii number l_hold_end_sequence[4]=0;
        unsigned ascii number l_pf_sub_code[4]=0;

        Include "sfscsexec.var"

        String L_COMMANDLINE[255];
        Unsigned Ascii Number L_TAB_POS[4];
        unsigned ascii number l_premium_financed[1]=0/decimals=0;
        Signed ascii number l_total_cx_premium[9]=0/decimals=2;
        signed ascii number l_total_13_paid[9]=0/decimals=2;

        signed ascii number l_write_off1[9]=0/decimals=2,
                            l_write_off2[9]=0/decimals=2 ;

        unsigned ascii number l_first_time[1]=0/decimals=0;
        unsigned ascii number l_first_time2[1]=1/decimals=0;
        UNSIGNED ASCII NUMBER L_DISBURSEMENT_TO_CHECK_FOR[9]=0/DECIMALS=2;

unsigned ascii number l_end_sequence[4]=0000/decimals=0;
signed ascii number l_distro_remaining[9]=0.00/decimals=2;
signed ascii number l_rounded_amount[9]=0/decimals=0;

        string l_hold_lob_subline[2],
               l_hold_misc[10];

signed ascii number l_total_installment2[9]=0.00/decimals=2,
                    l_total_paid2[9]=0.00/decimals=2,
                    l_total_write_off2[9]=0.00/decimals=2 ;
signed ascii number l_total_surcharge_installment2[9]=0.00/decimals=2,
                    l_total_surcharge_paid2[9]=0.00/decimals=2,
                    l_total_surcharge_write_off2[9]=0.00/decimals=2 ;
signed ascii number l_total_bucket[9]=0/decimals=0,
                    l_diff_installment[9]=0/decimals=0;
signed ascii number l_total_installment_fee2[4]=0/decimals=0;

signed ascii number l_total_installment_fee_paid2[9]=0.00/decimals=2,
                    l_total_installment_fee_write_off2[9]=0.00/decimals=2;

Access PRSTRANS, Set PRSTRANS:COMPANY_ID = L_COMPANY_ID , Approximate

Initialisation

L_COMMANDLINE = COMMANDLINE
L_TAB_POS     = Pos("<tab>",L_COMMANDLINE)

Write ("%c%s",15001,"INITIALISATION")
If PRSTRANS:ERRORNUMBER <> 0 Then
    Begin
    Stop("")
    End

Update

Write ("%c%s",15001,"UPDATE - VERSION 4.51")

COUNTER = COUNTER + 1
/* If COUNTER = 1 Then
    Begin
        Writefile (L_OUTFILE,"Starting arsup001.log <NL><NL>")
    End

write ("<014>")
Write ("%c%s",05001,"arsup001")
write ("%c%s%n",2001,"PRSTRANS:POLICY_NO    = ",PRSTRANS:POLICY_NO)
write ("%c%s%n",3001,"prstrans:trans_code   = ",prstrans:trans_code)
write ("%c%s%n",4001,"prstrans:ann premium  = ",prstrans:ann_premium)
write ("%c%s%n",5001,"prstrans : premium    = ",prstrans:premium)
Read (23,1,"AT TOP ----- Press Enter to Continue ",L_ENTER,1)
*/

If L_HOLD_POLICY_NO = 0 Then  -- should only happen when first entering
    Begin
        L_HOLD_COMPANY_ID       = PRSTRANS:COMPANY_ID
        L_HOLD_POLICY_NO        = PRSTRANS:POLICY_NO
        L_HOLD_TRANS_EFF        = PRSTRANS:TRANS_EFF
        L_HOLD_TRANS_EXP        = PRSTRANS:TRANS_EXP
        L_HOLD_TRANS_DATE       = PRSTRANS:TRANS_DATE
        L_HOLD_LINE_OF_BUSINESS = PRSTRANS:LINE_OF_BUSINESS
        L_HOLD_PAYMENT_PLAN     = PRSTRANS:PAYMENT_PLAN
        l_hold_bill_plan        = prstrans:bill_plan
        l_hold_agent_no         = prstrans:agent_no
--        l_hold_pol_year         = prstrans:pol_year
        l_hold_end_sequence     = prstrans:end_sequence
        l_hold_trans_code       = prstrans:trans_code
        L_INSTALLMENT_UPDATED   = "N"
        L_16_REMAINING_PREM     = 0
        L_16_DIFF_PREM          = 0
        L_HOLD_POL_YEAR         = PRSTRANS:POL_YEAR
        L_TOTAL_UNEARNED        = 0.00
        l_hold_lob_subline      = prstrans:lob_subline
        l_hold_misc             = prstrans:misc
        l_first_time2           = 1

        if prstrans:trans_code one of 15 then
          l_audit = "Y"

    End

If L_HOLD_POLICY_NO <> PRSTRANS:POLICY_NO Then
   Begin

   l_audit = "N"

   l_premium_financed = 0

   if l_hold_bill_plan one of "AC" then
   begin
       do check_for_premium_financed
   end

   if l_trans_code_hold one of 11 and
      l_premium_financed one of 1 then
      begin
         do get_total_cancellation_premium
         do create_premium_financed_return
      end

    Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = prstrans:COMPANY_ID,
                           ARSPAYPLAN:LINE_OF_BUSINESS = prstrans:LINE_OF_BUSINESS,
                           ARSPAYPLAN:PAYMENT_PLAN     = prstrans:PAYMENT_PLAN

   If L_TRANS_CODE_HOLD One Of 10,14 And
--      ARSBILLING:PAYMENT_PLAN > 1 Then
      arspayplan:number_of_payments > 1 then
      Begin
         Do CREATE_INSTALLMENT_CHARGE
      End

   If L_TRANS_CODE_HOLD One Of 16 Then
      Begin
         Do CHECK_FOR_CX_REINSTATEMENT
         Do REINSTATE_PRIOR_RECORDS
         Do CHECK_FOR_CX_RETURN_PREMIUMS
      End

       L_HOLD_COMPANY_ID       = PRSTRANS:COMPANY_ID
       L_HOLD_POLICY_NO        = PRSTRANS:POLICY_NO
       L_HOLD_TRANS_EFF        = PRSTRANS:TRANS_EFF
       L_HOLD_TRANS_EXP        = PRSTRANS:TRANS_EXP
       L_HOLD_TRANS_DATE       = PRSTRANS:TRANS_DATE
       L_HOLD_LINE_OF_BUSINESS = PRSTRANS:LINE_OF_BUSINESS
       L_HOLD_PAYMENT_PLAN     = PRSTRANS:PAYMENT_PLAN
       l_hold_bill_plan        = prstrans:bill_plan
       l_hold_agent_no         = prstrans:agent_no
--       l_hold_pol_year         = prstrans:pol_year
       l_hold_end_sequence     = prstrans:end_sequence
       l_hold_trans_code       = prstrans:trans_code
       L_16_REMAINING_PREM     = 0.00
       L_16_DIFF_PREM          = 0.00
       L_HOLD_POL_YEAR         = PRSTRANS:POL_YEAR
       L_TOTAL_UNEARNED        = 0.00
       l_hold_lob_subline      = prstrans:lob_subline
       l_hold_misc             = prstrans:misc
       l_first_time2           = 1
       if prstrans:trans_code one of 15 then
         l_audit = "Y"

       If L_TRANS_CODE_HOLD One Of 12 Then
       Begin
           Do CHECK_FOR_CX_RETURN_PREMIUMS
       End

-- check for credit endorsement (transcode = 13) processed and if so process as needed
   if l_hold_trans_code one of 13 then
     {
       do check_for_credit_endorsement
     }
       If L_TRANS_CODE_HOLD One Of 13, 15 Then
--       If L_TRANS_CODE_HOLD One Of  15 Then
       Begin
           Do CHECK_FOR_RETURN_PREMIUMS
           If L_NET_PAYMENTS > ARSCONTROL:WAIVE_AMOUNT_CREDIT And
              L_NET_PAYMENTS > 0 and
              l_hold_bill_plan one of "DB" then
           Begin
               Do CREATE_ACCOUNTS_PAYABLE
           End
       End


       If L_TRANS_CODE_HOLD One Of 11 and
          l_hold_bill_plan one of "DB" then
       Begin
           Do CHECK_FOR_CX_BALANCE
       End

       L_HOLD_POLICY_NO  = PRSTRANS:POLICY_NO
       L_HOLD_COMPANY_ID = PRSTRANS:COMPANY_ID
       L_FIRST_PASS = "Y"
       L_INSTALLMENT_UPDATED = "N"
End

If PRSTRANS:TRANS_CODE One Of 10,11,12,13,14,15,16 Then
Begin
    L_16_DIFF_PREM      = L_16_DIFF_PREM + (PRSTRANS:ANN_PREMIUM - PRSTRANS:PREMIUM)
    L_16_REMAINING_PREM = L_16_DIFF_PREM
    L_TOTAL_UNEARNED    = L_TOTAL_UNEARNED + (PRSTRANS:ANN_PREMIUM  - PRSTRANS:PREMIUM)
End

If PRSTRANS:TRANS_CODE One Of 19,22,23,29 Then
Begin
    L_19_DIFF_PREM      = L_19_DIFF_PREM + (PRSTRANS:ANN_PREMIUM - PRSTRANS:PREMIUM)
    L_19_REMAINING_PREM = L_19_DIFF_PREM
    L_TOTAL_UNEARNED    = L_TOTAL_UNEARNED + (PRSTRANS:ANN_PREMIUM - PRSTRANS:PREMIUM)
End

If PRSTRANS:EFF_DATE = PRSTRANS:TRANS_EFF And
   PRSTRANS:TRANS_CODE One Of 19,22,23,29 Then
Begin
    L_19_DIFF_PREM      = L_19_DIFF_PREM + PRSTRANS:PREMIUM
    L_19_REMAINING_PREM = L_19_DIFF_PREM
    L_TOTAL_UNEARNED    = L_TOTAL_UNEARNED + PRSTRANS:PREMIUM
End

-- June 10, 2001 - removed hard coded 30 and replaced with the
-- arscontrol information

Access ARSCONTROL, Set ARSCONTROL:COMPANY_ID = PRSTRANS:COMPANY_ID, Approximate

If PRSTRANS:TRANS_CODE < ARSCONTROL:ASSUMED_TRANS_CODE_RANGE[1] And
-- feb 6, 2002 - per Debbie, workers comp needs to write out 0 premium records
-- need to allow for zero amount records so that claims can see sublines
-- that are required for certain causes of losses.
--   PRSTRANS:PREMIUM <> 0 And
   PRSTRANS:TRANS_CODE Not One Of 18,28 Then
    Begin
    if prstrans:lob_subline <> "PP" and
       prstrans:misc <> "PAYORCHG" then
       {
           Do UPDATE_MASTER_FILE
           Do UPDATE_CANCEL_FILE
       }
    End


/* have to post the reinsurance transactions */
   Else
   If PRSTRANS:TRANS_CODE >= ARSCONTROL:CEDED_TRANS_CODE_RANGE[1] And
      PRSTRANS:PREMIUM <> 0 Then
      Begin
         Do POST_TO_PREMIUMS
      End

Screen Exit


/* reprocess the billing file to create finder records */
-- instead of recreating the prstrans file delet the records processed

   l_premium_financed = 0

   if l_hold_bill_plan one of "AC" then
   begin
       do check_for_premium_financed
   end

   if l_trans_code_hold one of 11 and
      l_premium_financed one of 1 then
      begin
         do get_total_cancellation_premium
         do create_premium_financed_return
      end

If L_TRANS_CODE_HOLD One Of 10,14 And
--   L_HOLD_PAYMENT_PLAN > 1 Then
   arspayplan:number_of_payments > 1 then
    Begin
        Do CREATE_INSTALLMENT_CHARGE
    End

If L_TRANS_CODE_HOLD One Of 16 Then
Begin
    Do CHECK_FOR_CX_REINSTATEMENT
    Do REINSTATE_PRIOR_RECORDS
    Do CHECK_FOR_CX_RETURN_PREMIUMS
    if arscontrol2:remove_ar_cx_on_reinstate one of 1 then
    begin
        do update_arscancel
    end
End

If L_TRANS_CODE_HOLD One Of 12 and
   l_hold_lob_subline not one of "PP" and
   l_hold_misc not one of "PAYORCHG" Then
Begin
    Do CHECK_FOR_CX_RETURN_PREMIUMS

End

if prstrans:trans_code one of 12 and
   l_hold_lob_subline one of "PP" and
   l_hold_misc one of "PAYORCHG" then
   {
       do change_payment_plan
   }

L_PRIOR_YEAR = 0 -- not true

Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = PRSTRANS:POLICY_NO

If PRSTRANS:POL_YEAR < SFPCURRENT:POL_YEAR Then
Begin
    L_PRIOR_YEAR = 1
End
Else
Begin
    L_PRIOR_YEAR = 0
End

if l_hold_trans_code one of 13,15 then
   {
      do check_for_credit_endorsement
   }

 If L_TRANS_CODE_HOLD One Of 13, 15 Then
--If L_TRANS_CODE_HOLD One Of  15 Then
Begin
    Do CHECK_FOR_RETURN_PREMIUMS
    If L_NET_PAYMENTS > ARSCONTROL:WAIVE_AMOUNT_CREDIT And
       L_NET_PAYMENTS > 0 and
       l_hold_bill_plan one of "DB" then
    Begin
        Do CREATE_ACCOUNTS_PAYABLE

--        If L_PRIOR_YEAR One Of 1 Then
--        Begin
--            Do CREATE_PRIOR_YEAR_INTERNAL_CHECK
--        End

          if l_hold_trans_code one of 15 then
            {
             Do APPLY_STATUS_UPDATE
            }

    End

End


If L_TRANS_CODE_HOLD One Of 11 and
   l_hold_bill_plan one of "DB" then
Begin

   Do CHECK_FOR_RETURN_PREMIUMS

   if l_net_payments > 0 then
    {
     If (L_NET_PAYMENTS  > ARSCONTROL:WAIVE_AMOUNT_DEBIT Or
         L_NET_PAYMENTS  < ARSCONTROL:WAIVE_AMOUNT_CREDIT) and
         l_hold_bill_plan one of "DB" then
          {
             Do CREATE_ACCOUNTS_PAYABLE
          }
    }
   else
    {
      Do CHECK_FOR_CX_BALANCE
    }
End

/* 12/17/2002 - dlp - added reinsurance processing here
   as reinsurance changes are made this will make it easier
   so that nothing is missed */

Access SFSCOMPANY, Set SFSCOMPANY:COMPANY_ID = PRSTRANS:COMPANY_ID
If SFSCOMPANY:REINSURANCE One Of "1" Then
Begin
--     Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = PRSTRANS:POLICY_NO
     G_POLICY_NO    = PRSTRANS:POLICY_NO
     G_POL_YEAR     = Year(PRSTRANS:EFF_DATE)

     Access SFPPOINT, Set SFPPOINT:POLICY_NO = PRSTRANS:POLICY_NO,
                          SFPPOINT:POL_YEAR  = G_POL_YEAR

--     G_END_SEQUENCE = SFPCURRENT:END_SEQUENCE
    G_END_SEQUENCE    = SFPPOINT:END_SEQUENCE
--     G_POL_YEAR     = SFPCURRENT:POL_YEAR

     Proc ("prstrans_cnv.mk")/noconsole
     Proc ("arsoffsetwrk.mk")/noconsole

     If SFSCOMPANY:DEBUG_MODE One Of 0 Then
     Begin
         Proc ("csbatch prsup610 %s%s%s%s%s",Str(PRSTRANS:TRANS_CODE,"99"),Str(G_POLICY_NO,"999999999"),Str(G_POL_YEAR,"9999"),Str(G_END_SEQUENCE,"9999"),PRSTRANS:COMPANY_ID)/noconsole
     End
     Else
     If SFSCOMPANY:DEBUG_MODE One Of 1 Then
     Begin
         Proc ("csbatch prsup610 %s%s%s%s%s",Str(PRSTRANS:TRANS_CODE,"99"),Str(G_POLICY_NO,"999999999"),Str(G_POL_YEAR,"9999"),Str(G_END_SEQUENCE,"9999"),PRSTRANS:COMPANY_ID)
     End

     Do POST_TO_PREMIUMS_TREATY_REINSURANCE

End -- end of sfscompany:reinsurance checking

Do CLEANUP_PRSTRANS

--Writefile (L_OUTFILE,"%s%n%s","<NL>Number of Errors Reported: ",L_ERR_CTR,"<NL>")
--Writefile (L_OUTFILE,"%s%n%s","<NL><NL>Number of Records Read: ",COUNTER,"<NL>")

Write ("%c%s",15020,"ARSUP001 is now exiting  ")

Errors

L_ERR_CTR = L_ERR_CTR + 1

Procedure Definition

Procedure CLEANUP_PRSTRANS
Begin

L_COMPANY_ID = ""
L_HOLD_POLICY_NO = 0

Access PRSTRANS_ALT, Set PRSTRANS_ALT:COMPANY_ID = L_COMPANY_ID, Approximate

While PRSTRANS_ALT:COMPANY_ID <> ""  -- No more records in database
      Begin
      If L_HOLD_POLICY_NO <> PRSTRANS_ALT:POLICY_NO Then
          Begin
              L_HOLD_POLICY_NO = PRSTRANS_ALT:POLICY_NO

              Do CHECK_FOR_PAYMENTS
          End
          Delete PRSTRANS_ALT

          Next PRSTRANS_ALT
      End

If SYSTEM[1,3] = "Win" Then
Begin
   Proc ("prstrans")/noconsole
   Proc ("prstrans_cnv")/noconsole
End
Else
Begin
   Proc ("prstrans.mk")/noconsole
   Proc ("prstrans_cnv.mk")/noconsole
   Proc ("arsoffsestwrk.mk")/noconsole
End

End

Procedure UPDATE_MASTER_FILE
Begin

L_UPDATE_FILE = "arsmaster - update_master_file"
L_TRANS_EFF   = PRSTRANS:TRANS_EFF
L_TRANS_EXP   = PRSTRANS:TRANS_EXP
L_TRANS_DATE  = PRSTRANS:TRANS_DATE
L_COMPANY_ID  = PRSTRANS:COMPANY_ID

L_TEMP_TRANS_CODE = PRSTRANS:TRANS_CODE

If L_TEMP_TRANS_CODE = 29 And
   PRSTRANS:PREMIUM >= 0.00 Then
   Begin
      L_TEMP_TRANS_CODE = 27
   End

Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = L_COMPANY_ID

Access ARSMASTER, Set ARSMASTER:COMPANY_ID       = L_COMPANY_ID,
                      ARSMASTER:POLICY_NO        = PRSTRANS:POLICY_NO,
                      ARSMASTER:TRANS_DATE       = L_TRANS_DATE ,
                      ARSMASTER:TRANS_EFF        = L_TRANS_EFF,
                      ARSMASTER:TRANS_EXP        = L_TRANS_EXP,
                      ARSMASTER:TRANS_CODE       = L_TEMP_TRANS_CODE,
                      ARSMASTER:LINE_OF_BUSINESS = PRSTRANS:LINE_OF_BUSINESS,
                      ARSMASTER:COMM_RATE        = PRSTRANS:COMM_RATE, Approximate

If (ARSMASTER:COMPANY_ID        <>   L_COMPANY_ID Or
    ARSMASTER:POLICY_NO         <>   PRSTRANS:POLICY_NO Or
    ARSMASTER:TRANS_DATE        <>   L_TRANS_DATE Or
    ARSMASTER:TRANS_EFF         <>   L_TRANS_EFF Or
    ARSMASTER:TRANS_EXP         <>   L_TRANS_EXP Or
    ARSMASTER:TRANS_CODE        <>   L_TEMP_TRANS_CODE Or
    ARSMASTER:LINE_OF_BUSINESS  <>   PRSTRANS:LINE_OF_BUSINESS Or
    ARSMASTER:COMM_RATE         <>   PRSTRANS:COMM_RATE) And
    -- no zero premiums to A/R - only in Premiums for claims processing
    -- June 25, 2003 (DLP, DAP)
    PRSTRANS:PREMIUM            <>   0.00 Then
    Begin
    Add ARSMASTER
        Begin
        ARSMASTER:COMPANY_ID         =    PRSTRANS:COMPANY_ID
        ARSMASTER:POLICY_NO          =    PRSTRANS:POLICY_NO
        ARSMASTER:TRANS_DATE         =    L_TRANS_DATE
        ARSMASTER:TRANS_EFF          =    L_TRANS_EFF
        ARSMASTER:TRANS_EXP          =    L_TRANS_EXP
        ARSMASTER:TRANS_CODE         =    L_TEMP_TRANS_CODE
        ARSMASTER:LINE_OF_BUSINESS   =    PRSTRANS:LINE_OF_BUSINESS
        ARSMASTER:COMM_RATE          =    PRSTRANS:COMM_RATE
        ARSMASTER:AGENT_NO           =    PRSTRANS:AGENT_NO
        ARSMASTER:PAYMENT_PLAN       =    PRSTRANS:PAYMENT_PLAN
        ARSMASTER:LOB_SUBLINE        =    PRSTRANS:LOB_SUBLINE
        ARSMASTER:BILL_PLAN          =    PRSTRANS:BILL_PLAN
        ARSMASTER:STATE              =    PRSTRANS:STATE
        ARSMASTER:COUNTY             =    PRSTRANS:COUNTY
        ARSMASTER:TRANS_EFF          =    PRSTRANS:TRANS_EFF
        ARSMASTER:TRANS_EXP          =    PRSTRANS:TRANS_EXP
        ARSMASTER:PREMIUM            =    PRSTRANS:PREMIUM

     /* added December 6, 2005 */
        ARSMASTER:POL_YEAR           =    PRSTRANS:POL_YEAR
        ARSMASTER:END_SEQUENCE       =    PRSTRANS:END_SEQUENCE
        ARSMASTER:EXPANSION          =    PRSTRANS:EXPANSION/raw
        End
    End
Else
    Begin
    Change ARSMASTER
        Begin
        ARSMASTER:PREMIUM            =    ARSMASTER:PREMIUM +
                                          PRSTRANS:PREMIUM

            If ARSCONTROL2:AC_ROUND One Of 1 Then
            Begin
                L_AC_ROUNDED_AMOUNT = ARSMASTER:PREMIUM  * 1
                ARSMASTER:PREMIUM   = L_AC_ROUNDED_AMOUNT
            End

--            Switch (ARSMASTER:COMM_RATE)
--            Case 0.00 : ARSMASTER:AC_NET_AMOUNT_DUE = 0.00
--            End

        End

    End

/* reinstatements are done a different way so that SCIPS can
   properly reinstatement the prior records*/

L_TRANS_CODE = PRSTRANS:TRANS_CODE
If PRSTRANS:TRANS_CODE One Of 29 And
   PRSTRANS:PREMIUM  >= 0 Then
Begin
   L_TRANS_CODE = 27
   L_NUMBER_OF_PAYMENTS = 1
End

if l_trans_code one of 15 then
{
    l_number_of_payments = 1
}

If L_TRANS_CODE One Of 10,11,12,13,14,15,16 Then
Begin
   L_TRANS_CODE_HOLD = L_TRANS_CODE
End

-- go find out if there are any billing_ctr = 1 and trans code one of 10, 14 and
-- status one of "B" - set to yes if so else "N" - l_first_credit

if l_first_time2 one of 1 then
{
    l_first_credit = "N"
}

access arsbilling_alt3, set arsbilling_alt3:company_id = prstrans:company_id,
                            arsbilling_alt3:policy_no  = prstrans:policy_no, approximate

while arsbilling_alt3:company_id  = prstrans:company_id and
      arsbilling_alt3:policy_no   = prstrans:policy_no
      {
         if arsbilling_alt3:billing_ctr = 1 and
            arsbilling_alt3:trans_code one of 10, 14 and
            arsbilling_alt3:status     one of "B" then
            {
                l_first_credit = "Y"
            }
      next arsbilling_alt3

      }

access arscontrol2, set arscontrol2:company_id = prstrans:company_id

access sfsline, set sfsline:company_id = prstrans:company_id,
                    sfsline:line_of_business = prstrans:line_of_business,
                    sfsline:lob_subline      = "0000"

if arscontrol2:align_credit_endorsement one of 1 and
   sfsline:lob_code <> "WORK" then  -- do not distribute for WCP ** Workers Compensation Cindy **
begin
if l_trans_code one of 13 and
   l_first_credit = "Y" and
   l_first_time2 = 1 then
     {
         l_first_time2  = 0
         do calculate_credit_buckets
         l_first_credit = "Y"
     }
 else
   {
    l_first_time2 = 0
   }
end

if l_trans_code not one of 13,16,27 then
begin
    do create_billing_records
end

if l_trans_code one of 13 and
   ((sfsline:lob_code = "WORK" and
    arscontrol2:align_credit_endorsement one of 1) or
   (arscontrol2:align_credit_endorsement not one of 1 or
    l_first_credit <> "Y"))
    then
    {
        do create_billing_records
    }
--
-- august 5, 2001
-- post outstanding checks so that current invoices reflect this
-- Do CHECK_FOR_PAYMENTS

/* new logic - Feb 26, 2007
   remove all payments made to a policy as long as the first installmnet
   is still a "B" or "O" status

   then reaplly this amount via arsup010 so that the buckets are not
   over paid
*/

/*
if l_first_time one of 1 then
begin
l_first_time = 0
if prstrans:trans_code one of 13 and
   l_periods = arspayplan:number_of_payments then
   begin
      do update_arsbilling_payments
      do create_arschksu
      proc (":cli arsup020 %n",prstrans:policy_no)/noconsole
   end
end
*/

If PRSTRANS:TRANS_CODE <> ARSCONTROL:INSTALLMENT_CHARGE_TRANS_CODE And
   PRSTRANS:TRANS_CODE <> ARSCONTROL:INSTALLMENT_CHARGE_TRANS_CX   Then
Begin
    Do POST_TO_PREMIUMS
End

End

Procedure UPDATE_CANCEL_FILE
Begin

Access ARSCANCEL, Set ARSCANCEL:COMPANY_ID = PRSTRANS:COMPANY_ID,
                      ARSCANCEL:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While ARSCANCEL:COMPANY_ID = PRSTRANS:COMPANY_ID And
      ARSCANCEL:POLICY_NO  = PRSTRANS:POLICY_NO
      Begin
         If PRSTRANS:TRANS_CODE One Of 11 And
            ARSCANCEL:CX_STATUS One Of "P" Then
            Change ARSCANCEL
            Begin
                ARSCANCEL:CX_STATUS = "C"
            End

        if arscontrol2:remove_ar_cx_on_reinstate one of 1 then
           {
            If PRSTRANS:TRANS_CODE One Of 16 And
               ARSCANCEL:CX_STATUS One Of "C" Then
                Change ARSCANCEL
                 {
                   ARSCANCEL:CX_STATUS = "R"
                 }
           }
        Next ARSCANCEL

End -- end of while

End -- end of procedure

Procedure CREATE_BILLING_RECORDS
Begin

L_UPDATE_FILE = "arsbilling - create_billing_records"

/* access arspayplan here since all of the conditions below
   will require the pay_plan information */

Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = ARSMASTER:COMPANY_ID,
                       ARSPAYPLAN:LINE_OF_BUSINESS = ARSMASTER:LINE_OF_BUSINESS,
                       ARSPAYPLAN:PAYMENT_PLAN     = ARSMASTER:PAYMENT_PLAN

/* Create billing records for new and renewal business */
/* Create billing records for Installment charges processed */
/* Create billing records for endorsements processed */

L_NUMBER_OF_PAYMENTS = ARSPAYPLAN:NUMBER_OF_PAYMENTS

/*If ARSMASTER:TRANS_CODE = ARSCONTROL:SURCHARGE_TRANS_CODE Or
   ARSMASTER:TRANS_CODE = ARSCONTROL:SURCHARGE_TRANS_CX Then */
If ARSMASTER:TRANS_CODE One Of 15,19,22,23,29 Then
       Begin
       L_NUMBER_OF_PAYMENTS = 1
       End


/* ac should only be annual bill */

If ARSMASTER:BILL_PLAN = "AC" Then
    Begin
    L_NUMBER_OF_PAYMENTS = 1
    End

/* need to establish whether or not there is Mortgagee that is a
   payor on the policy at this point */
-- 99999

Do GET_PAYOR_TYPE

L_TRANS_CODE = PRSTRANS:TRANS_CODE

If L_TRANS_CODE_HOLD One Of 11 And -- only change if in fact it is a cx
   (PRSTRANS:TRANS_CODE = ARSCONTROL:INSTALLMENT_CHARGE_TRANS_CX Or
   PRSTRANS:TRANS_CODE = ARSCONTROL:SURCHARGE_TRANS_CX) Then
    Begin
    L_TRANS_CODE = ARSCONTROL:CANCELLATION_TRANS_CODE
    End

Switch(L_TRANS_CODE)
  Case ARSCONTROL:ANNUAL_TRANS_CODE,
       ARSCONTROL:RENEWAL_TRANS_CODE,
--     ARSCONTROL:REINSTATEMENT_TRANS_CODE,
       ARSCONTROL:INSTALLMENT_CHARGE_TRANS_CODE,
       ARSCONTROL:SURCHARGE_TRANS_CODE : Begin
                                         Do CALCULATE_NEW_RENEWAL_PERIODS
                                         Do CALCULATE_INSTALLMENT_AMOUNTS
                                         End
--01/31/2007 - removed 13 and 23 for new credit procedures
  Case ARSCONTROL:DECREASE_TRANS_CODE,
       ARSCONTROL:INCREASE_TRANS_CODE,
       15,
       22,
       23,63                              : Do CALCULATE_ENDORSEMENT_PERIODS
  Case CANCELLATION_TRANS_CODE,27
                                       : Do CALCULATE_CANCELLATION
  Default                              : Do CALCULATE_ENDORSEMENT_PERIODS
  End

L_SUB_CODE = 10 -- current records will always be 10


if prstrans:bill_plan = "AC" then
   {
     l_commission_rate   = prstrans:comm_rate * 0.01
     l_commission_amount = prstrans:premium * l_commission_rate
     l_temp_premium      = prstrans:premium - l_commission_amount
     l_installment[1]    = l_temp_premium
   }

Do GET_BILLING_SUBCODE

-- change 2/16/2002
-- for endorsements the billing ctr was not being aligned with the correct
-- billing ctr per the "remaining" unbilled buckets.

L_START_BILLING_CTR = 1 -- this sets this for annual, renewal and reinstatements

-- added audits - april 27, 2005
If L_TRANS_CODE One Of 12,13,15,22,23 And
   L_START_BILLING_CTR <= L_TOTAL_REMAINING_PERIODS Then
    {
    L_START_BILLING_CTR = L_SKIPPED_PERIODS + 1
    }

if l_trans_code one of 12,22 and
   l_skipped_periods = 0 and
   l_force_invoice = "Y" then
    {
    -- this forces the billing ctr to be the very last bucket
    -- when there are no more buckets to bill
     l_start_billing_ctr = arspayplan:number_of_payments
    }

L_BUCKET_CTR = 0
-- added for audits 09/08/2008
If L_TRANS_CODE One Of 22, 23, 15 Then
    Begin
    L_TOTAL_REMAINING_PERIODS = 1
    End

if arsmaster:trans_code one of 15 then
   {
     do Audit_increment
   }
else
   {


    For L_CTR = 1 To L_TOTAL_REMAINING_PERIODS
        Begin
         L_BUCKET_CTR = L_BUCKET_CTR + 1

/*
Write ("<014>")
Write ("%c%s%s",02001,"company       = ",ARSMASTER:COMPANY_ID)
Write ("%c%s%n",03001,"policy no     = ",ARSMASTER:POLICY_NO)
Write ("%c%s%d",04001,"trans date    = ",ARSMASTER:TRANS_DATE)
Write ("%c%s%d",05001,"trans eff     = ",ARSMASTER:TRANS_EFF)
Write ("%c%s%d",06001,"trans exp     = ",ARSMASTER:TRANS_EXP)
Write ("%c%s%n",07001,"trans code    = ",ARSMASTER:TRANS_CODE)
Write ("%c%s%n",08001,"line          = ",ARSMASTER:LINE_OF_BUSINESS)
Write ("%c%s%n",09001,"comm rate     = ",ARSMASTER:COMM_RATE)
Write ("%c%s%n",10001,"sub code      = ",L_SUB_CODE)
Write ("%c%s%n",11001,"billing ctr   = ",L_START_BILLING_CTR)
Write ("%c%s%n",12001,"return check  = ",L_RETURN_CHECK_CTR)
Write ("%c%s%n",13001,"l ctr         = ",L_CTR)
Write ("%c%s%n",14001,"installment   = ",L_INSTALLMENT[L_CTR])
Write ("%c%s%n",15001,"total paid    = ",L_hold_total_amount_paid)
write ("%c%s%n",16001,"total remaining periods = ",l_total_remaining_periods)
Read (23,1,"Press Enter to Continue ",L_ENTER,1)
*/
-- this is ok to here as well


        Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID     = ARSMASTER:COMPANY_ID

        Access ARSBILLING, Set ARSBILLING:COMPANY_ID       = ARSMASTER:COMPANY_ID,
                               ARSBILLING:POLICY_NO        = ARSMASTER:POLICY_NO,
                               ARSBILLING:TRANS_DATE       = ARSMASTER:TRANS_DATE,
                               ARSBILLING:TRANS_EFF        = ARSMASTER:TRANS_EFF,
                               ARSBILLING:TRANS_EXP        = ARSMASTER:TRANS_EXP,
                               ARSBILLING:TRANS_CODE       = ARSMASTER:TRANS_CODE,
                               ARSBILLING:LINE_OF_BUSINESS = ARSMASTER:LINE_OF_BUSINESS,
                               ARSBILLING:COMM_RATE        = ARSMASTER:COMM_RATE,
                               ARSBILLING:SUB_CODE         = L_SUB_CODE,
                               ARSBILLING:BILLING_CTR      = L_START_BILLING_CTR,
                               ARSBILLING:RETURN_CHECK_CTR = L_RETURN_CHECK_CTR, Approximate

        L_UPDATE_FILE = "ADD"

/*
Write ("<014>")
Write ("%c%s%s",02001,"company       = ",ARSbilling:COMPANY_ID)
Write ("%c%s%n",03001,"policy no     = ",ARSbilling:POLICY_NO)
Write ("%c%s%d",04001,"trans date    = ",ARSbilling:TRANS_DATE)
Write ("%c%s%d",05001,"trans eff     = ",ARSbilling:TRANS_EFF)
Write ("%c%s%d",06001,"trans exp     = ",ARSbilling:TRANS_EXP)
Write ("%c%s%n",07001,"trans code    = ",ARSbilling:TRANS_CODE)
Write ("%c%s%n",08001,"line          = ",ARSbilling:LINE_OF_BUSINESS)
Write ("%c%s%n",09001,"comm rate     = ",ARsbilling:COMM_RATE)
Write ("%c%s%n",10001,"sub code      = ",arsbilling:SUB_CODE)
Write ("%c%s%n",11001,"billing ctr   = ",arsbilling:BILLING_CTR)
Write ("%c%s%n",12001,"return check  = ",arsbilling:RETURN_CHECK_CTR)
Read (23,1,"Press Enter to Continue ",L_ENTER,1)
*/
        If (ARSBILLING:COMPANY_ID       <> ARSMASTER:COMPANY_ID Or
           ARSBILLING:POLICY_NO        <> ARSMASTER:POLICY_NO Or
           ARSBILLING:TRANS_DATE       <> ARSMASTER:TRANS_DATE Or
           ARSBILLING:TRANS_EFF        <> ARSMASTER:TRANS_EFF Or
           ARSBILLING:TRANS_EXP        <> ARSMASTER:TRANS_EXP Or
           ARSBILLING:TRANS_CODE       <> ARSMASTER:TRANS_CODE Or
           ARSBILLING:LINE_OF_BUSINESS <> ARSMASTER:LINE_OF_BUSINESS Or
           ARSBILLING:COMM_RATE        <> ARSMASTER:COMM_RATE Or
           ARSBILLING:SUB_CODE         <> L_SUB_CODE Or
           ARSBILLING:BILLING_CTR      <> L_START_BILLING_CTR Or
           ARSBILLING:RETURN_CHECK_CTR <> L_RETURN_CHECK_CTR)  And -- record does not exist
           L_INSTALLMENT[L_CTR] <> 0 Then -- record value is not $0.00
            Begin
            Add ARSBILLING
               Begin
                ARSBILLING:COMPANY_ID           = ARSMASTER:COMPANY_ID
                ARSBILLING:POLICY_NO            = ARSMASTER:POLICY_NO
                ARSBILLING:TRANS_DATE           = ARSMASTER:TRANS_DATE
                ARSBILLING:TRANS_EFF            = ARSMASTER:TRANS_EFF
                ARSBILLING:TRANS_EXP            = ARSMASTER:TRANS_EXP
                ARSBILLING:TRANS_CODE           = ARSMASTER:TRANS_CODE
                ARSBILLING:LINE_OF_BUSINESS     = ARSMASTER:LINE_OF_BUSINESS
                ARSBILLING:AGENT_NO             = ARSMASTER:AGENT_NO
                ARSBILLING:COMM_RATE            = ARSMASTER:COMM_RATE
                ARSBILLING:SUB_CODE             = L_SUB_CODE
                ARSBILLING:BILLING_CTR          = L_start_billing_Ctr
                ARSBILLING:RETURN_CHECK_CTR     = L_RETURN_CHECK_CTR
                ARSBILLING:LOB_SUBLINE          = ARSMASTER:LOB_SUBLINE
                ARSBILLING:BILL_PLAN            = ARSMASTER:BILL_PLAN
                ARSBILLING:PAYMENT_PLAN         = ARSMASTER:PAYMENT_PLAN
                ARSBILLING:POL_YEAR             = ARSMASTER:POL_YEAR
                ARSBILLING:END_SEQUENCE         = ARSMASTER:END_SEQUENCE

/* July  2007 - set due date to 00.00.0000 for Account current new policy  */
                If (L_CTR = 1 And
                   ARSMASTER:TRANS_CODE One Of 10, 11 and
                   arsmaster:bill_plan = "AC") Then
                    Begin
                      arsbilling:due_date   = 00.00.0000
                    end
                else
                    begin
                       if arsmaster:bill_plan <> "AC" then
                      begin
                         ARSBILLING:DUE_DATE       = L_DUE_DATE[L_BUCKET_CTR]
/*
write ("<014>")
write ("%c%s%n",2001,"L_BUCKET_CTR                = ",L_BUCKET_CTR)
write ("%c%s%d",2001,"L_DUE_DATE[L_BUCKET_CTR]    = ",L_DUE_DATE[L_BUCKET_CTR])
Read (23,1,"in create billing   -- Press Enter to Continue ",L_ENTER,1)
*/

                      end
                    end

                If (L_CTR = 1 And
                   ARSMASTER:TRANS_CODE One Of 14 and
                   arsmaster:bill_plan = "AC") Then
                    Begin
                      arsbilling:due_date   = 00.00.0000
                    end

                If ((L_CTR = 1 And
                   ARSBILLING:TRANS_CODE Not One Of 12, 13, 22, 23) Or
                   L_FORCE_INVOICE = "Y") Then
                    Begin
                    -- 12 = endorsement increase
                    -- 13 = endorsement decrease
                    -- 22 = surcharge increase
                    -- 23 = surcharge decrease
                    ARSBILLING:STATUS           = "B" -- billed
                    ARSBILLING:STATUS_DATE      = ARSMASTER:TRANS_DATE
                    ARSBILLING:BILLED_DATE      = ARSMASTER:TRANS_DATE
                   /* cancellations must have a status = "C" - cancelled */
                    If (ARSMASTER:TRANS_CODE = ARSCONTROL:CANCELLATION_TRANS_CODE Or
                        L_TRANS_CODE         = ARSCONTROL:CANCELLATION_TRANS_CODE) and
                        arsmaster:bill_plan one of "DB"  Then
                        Begin
                         ARSBILLING:STATUS       = "C"
                        End
                    End

/* october 23, 2002 added to force and open status on endorsements processed
   after the last installment was processed */
                Else
                 If ((L_CTR = 1 And
                    ARSBILLING:TRANS_CODE One Of 12, 22) And
                    L_FORCE_INVOICE  = "X") Then
                     Begin
                      -- 12 = endorsement increase
                      -- 22 = surcharge increase
                      ARSBILLING:BILLING_CTR      = l_start_billing_ctr
                      ARSBILLING:STATUS           = "O" -- billed
                      ARSBILLING:STATUS_DATE      = ARSMASTER:TRANS_DATE
                      ARSBILLING:BILLED_DATE      = 00.00.0000
                     End
                 Else
/* october 31, 2002 added to force and paid status on endorsements processed
   after the last installment was processed.  Disbursement will be created so
   this transaction should never have an invoice created on it. */
                  If ((L_CTR = 1 And
                     ARSBILLING:TRANS_CODE One Of 13, 23, 63) And
                     L_FORCE_INVOICE  = "X") Then
                     Begin
                      -- 13 = endorsement decrease
                      -- 23 = surchareg decrease

                     ARSBILLING:BILLING_CTR      = l_start_billing_ctr
                     arsbilling:status           = "B"

                     ARSBILLING:STATUS_DATE      = ARSMASTER:TRANS_DATE
                     ARSBILLING:BILLED_DATE      = 00.00.0000
--                     ARSBILLING:DUE_DATE         = 00.00.0000


                    End
/* july 14, 2003 */
                If (L_CTR One Of 1 And
                    PRSTRANS:TRANS_CODE        One Of 12,13,22,23 And
                    L_HOLD_LAST_BILLING_STATUS One Of "B" And
                    L_PERIODS         = 1 And
                    L_SKIPPED_PERIODS = 0) Then
                    BEGIN
                     if prstrans:bill_plan one of "AC" then
                      {
                        arsbilling:due_date     = 00.00.0000
                      }
                     else
                      {
--write ("<014>")
--write ("%c%s%d",2001,"l_hold_last_due_date   =",l_hold_last_due_date)
--Read (23,1,"3333333333333Press Enter to Continue ",L_ENTER,1)
                        arsbilling:due_date     = l_hold_last_due_date
                      }
                     ARSBILLING:STATUS           = "B"
                     ARSBILLING:STATUS_DATE      = ARSMASTER:TRANS_DATE
                     ARSBILLING:BILLED_DATE      = ARSMASTER:TRANS_DATE
                    END
                 Else
                 If (L_CTR > 1 And
                     L_DUE_DATE[L_CTR] <= L_DUE_DATE[1]) Then
                      {
                       ARSBILLING:STATUS           = "B"
                       ARSBILLING:STATUS_DATE      = ARSMASTER:TRANS_DATE
                       ARSBILLING:BILLED_DATE      = ARSMASTER:TRANS_DATE
                      }
                 else
                    If ((L_CTR > 1 And
                       L_DUE_DATE[L_CTR] > L_DUE_DATE[1]) Or
                       ARSBILLING:TRANS_CODE One Of 12, 13, 22, 23) Then
                         {
                           ARSBILLING:STATUS           = "O" -- not billed
                           ARSBILLING:STATUS_DATE      = ARSMASTER:TRANS_DATE
                           ARSBILLING:BILLED_DATE      = 00.00.0000
                         }

                 if (l_ctr = 1 and
                     l_periods = arspayplan:number_of_payments and
                     arsbilling:trans_code one of 13, 23) and
                     l_due_date_status[l_ctr] not one of "P", " " then
                      {
                        arsbilling:status            = l_due_date_status[l_ctr]
                        arsbilling:billed_date       = todaysdate
                      }

                 ARSBILLING:INSTALLMENT_AMOUNT   = L_INSTALLMENT[L_CTR]
                 ARSBILLING:AC_NET_AMOUNT_DUE    = ARSMASTER:AC_NET_AMOUNT_DUE
                 ARSBILLING:TOTAL_AMOUNT_PAID    = 0.00
                 ARSBILLING:WRITE_OFF            = 0
                 ARSBILLING:WRITE_OFF_AMOUNT     = 0.00
                 ARSBILLING:WRITE_OFF_DATE       = 00.00.0000
                 ARSBILLING:PRIOR_STATUS         = ARSBILLING:STATUS
                 ARSBILLING:PRIOR_STATUS_DATE    = ARSBILLING:STATUS_DATE
                 ARSBILLING:REINSTATED           = "N"

-- to catch due date prior todaysdate - 09/17/2008
                 if arsbilling:due_date <= todaysdate then
                   {
                    if dateadd(arsbilling:trans_date,1) < arsbilling:trans_exp then
                     {
                      arsbilling:due_date = dateadd(arsbilling:trans_date,1)
                     }
                    else
                     {

                      arsbilling:due_date = arsbilling:trans_exp
                     }
                   }

                 if l_ctr = 1 and
                    arsbilling:trans_code one of 23,22 and
                    l_audit = "Y" then
                      {
                        arsbilling:due_date = todaysdate + 30
                        arsbilling:status   = "B"
                      }
/*
write ("<014>")
write ("%c%s%d",2001,"arsbilling:due date   =",arsbilling:due_date)
Read (23,1,"33333333333  Press Enter to Continue ",L_ENTER,1)
*/
                -- no matter what, if AC then due date = 00.00.0000
                 if arsmaster:bill_plan = "AC" Then
                   {
                      arsbilling:due_date   = 00.00.0000
                   }
/*
write ("<014>")
write ("%c%s%d",2001,"l_hold_last_due_date     = ",l_hold_last_due_date)
write ("%c%s%d",3001,"L_DUE_DATE[L_BUCKET_CTR] = ",L_DUE_DATE[L_BUCKET_CTR])
write ("%c%s%n",4001,"L_BUCKET_CTR             = ",L_BUCKET_CTR)
write ("%c%s%d",5001,"l_due_date[l_ctr]        = ",l_due_date[l_ctr])
write ("%c%s%n",6001,"l_ctr                    = ",l_ctr)
write ("%c%s%d",7001,"arsbilling:due_date      = ",arsbilling:due_date)
write ("%c%s%n",8001,"ARSBILLING:INSTALLMENT_AMOUNT = ",ARSBILLING:INSTALLMENT_AMOUNT)
write ("%c%s%n",9001,"arsbilling:billin ctr    = ",arsbilling:billing_ctr)
write ("%c%s%n",10001,"arsbilling:trans code   = ",arsbilling:trans_code)
Read (23,1,"222222222222Press Enter to Continue ",L_ENTER,1)
*/

               End
           End
        Else
          {
            L_UPDATE_FILE = "Change"
            Change ARSBILLING
              {
/*
write ("<014>")
write ("%c%s%n",2001,"L_INSTALLMENT[L_CTR]   = ",L_INSTALLMENT[L_CTR])
Read (23,1,"in the change ******Press Enter to Continue ",L_ENTER,1)
*/
                ARSBILLING:INSTALLMENT_AMOUNT   = ARSBILLING:INSTALLMENT_AMOUNT +
                                                  L_INSTALLMENT[L_CTR]
                ARSBILLING:AC_NET_AMOUNT_DUE    = ARSBILLING:AC_NET_AMOUNT_DUE  +
                                                  ARSMASTER:AC_NET_AMOUNT_DUE

                if arsbilling:trans_code = 13 and
                   arsbilling:status = "P"  then
                   {
                    arsbilling:status = "B"
                    l_duplicate13_installment = l_installment[l_ctr]
                   }
                else
                  if arsbilling:trans_code <> 13 then
                   {
                    l_duplicate13_installment = 0
                   }

                -- no matter what, if AC then due date = 00.00.0000
                if arsmaster:bill_plan = "AC" Then
                   {
                     arsbilling:due_date   = 00.00.0000
                   }

              }
          }

      L_START_BILLING_CTR = L_START_BILLING_CTR + 1
      End
   }
End

procedure Audit_increment
BEGIN

l_start_billing_ctr_audit = 1

    For L_CTR = 1 To L_TOTAL_REMAINING_PERIODS
        Begin
         L_BUCKET_CTR = L_BUCKET_CTR + 1

/*
Write ("<014>")
Write ("%c%s%s",02001,"company       = ",ARSMASTER:COMPANY_ID)
Write ("%c%s%n",03001,"policy no     = ",ARSMASTER:POLICY_NO)
Write ("%c%s%d",04001,"trans date    = ",ARSMASTER:TRANS_DATE)
Write ("%c%s%d",05001,"trans eff     = ",ARSMASTER:TRANS_EFF)
Write ("%c%s%d",06001,"trans exp     = ",ARSMASTER:TRANS_EXP)
Write ("%c%s%n",07001,"trans code    = ",ARSMASTER:TRANS_CODE)
Write ("%c%s%n",08001,"line          = ",ARSMASTER:LINE_OF_BUSINESS)
Write ("%c%s%n",09001,"comm rate     = ",ARSMASTER:COMM_RATE)
Write ("%c%s%n",10001,"sub code      = ",L_SUB_CODE)
Write ("%c%s%n",11001,"billing ctr   = ",L_START_BILLING_CTR)
Write ("%c%s%n",12001,"return check  = ",L_RETURN_CHECK_CTR)
Write ("%c%s%n",13001,"l ctr         = ",L_CTR)
Write ("%c%s%n",14001,"installment   = ",L_INSTALLMENT[L_CTR])
Write ("%c%s%n",15001,"total paid    = ",L_hold_total_amount_paid)
write ("%c%s%n",16001,"total remaining periods = ",l_total_remaining_periods)
Read (23,1,"Press Enter to Continue ",L_ENTER,1)

-- this is ok to here as well
*/

        Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID     = ARSMASTER:COMPANY_ID

        Access ARSBILLING, Set ARSBILLING:COMPANY_ID       = ARSMASTER:COMPANY_ID,
                               ARSBILLING:POLICY_NO        = ARSMASTER:POLICY_NO,
                               ARSBILLING:TRANS_DATE       = ARSMASTER:TRANS_DATE,
                               ARSBILLING:TRANS_EFF        = ARSMASTER:TRANS_EFF,
                               ARSBILLING:TRANS_EXP        = ARSMASTER:TRANS_EXP,
                               ARSBILLING:TRANS_CODE       = ARSMASTER:TRANS_CODE,
                               ARSBILLING:LINE_OF_BUSINESS = ARSMASTER:LINE_OF_BUSINESS,
                               ARSBILLING:COMM_RATE        = ARSMASTER:COMM_RATE,
                               ARSBILLING:SUB_CODE         = L_SUB_CODE,
                               ARSBILLING:BILLING_CTR      = L_START_BILLING_CTR,
                               ARSBILLING:RETURN_CHECK_CTR = L_RETURN_CHECK_CTR, Approximate

        L_UPDATE_FILE = "ADD"

/*
Write ("<014>")
Write ("%c%s%s",02001,"company       = ",ARSbilling:COMPANY_ID)
Write ("%c%s%n",03001,"policy no     = ",ARSbilling:POLICY_NO)
Write ("%c%s%d",04001,"trans date    = ",ARSbilling:TRANS_DATE)
Write ("%c%s%d",05001,"trans eff     = ",ARSbilling:TRANS_EFF)
Write ("%c%s%d",06001,"trans exp     = ",ARSbilling:TRANS_EXP)
Write ("%c%s%n",07001,"trans code    = ",ARSbilling:TRANS_CODE)
Write ("%c%s%n",08001,"line          = ",ARSbilling:LINE_OF_BUSINESS)
Write ("%c%s%n",09001,"comm rate     = ",ARsbilling:COMM_RATE)
Write ("%c%s%n",10001,"sub code      = ",arsbilling:SUB_CODE)
Write ("%c%s%n",11001,"billing ctr   = ",arsbilling:BILLING_CTR)
Write ("%c%s%n",12001,"return check  = ",arsbilling:RETURN_CHECK_CTR)
Read (23,1,"Press Enter to Continue ",L_ENTER,1)
*/
        If (ARSBILLING:COMPANY_ID       <> ARSMASTER:COMPANY_ID Or
           ARSBILLING:POLICY_NO        <> ARSMASTER:POLICY_NO Or
           ARSBILLING:TRANS_DATE       <> ARSMASTER:TRANS_DATE Or
           ARSBILLING:TRANS_EFF        <> ARSMASTER:TRANS_EFF Or
           ARSBILLING:TRANS_EXP        <> ARSMASTER:TRANS_EXP Or
           ARSBILLING:TRANS_CODE       <> ARSMASTER:TRANS_CODE Or
           ARSBILLING:LINE_OF_BUSINESS <> ARSMASTER:LINE_OF_BUSINESS Or
           ARSBILLING:COMM_RATE        <> ARSMASTER:COMM_RATE Or
           ARSBILLING:SUB_CODE         <> L_SUB_CODE Or
           ARSBILLING:BILLING_CTR      <> L_START_BILLING_CTR Or
           ARSBILLING:RETURN_CHECK_CTR <> L_RETURN_CHECK_CTR)  And -- record does not exist
           L_INSTALLMENT[L_CTR] <> 0 Then -- record value is not $0.00
            {
            Add ARSBILLING
               {
                ARSBILLING:COMPANY_ID           = ARSMASTER:COMPANY_ID
                ARSBILLING:POLICY_NO            = ARSMASTER:POLICY_NO
                ARSBILLING:TRANS_DATE           = ARSMASTER:TRANS_DATE
                ARSBILLING:TRANS_EFF            = ARSMASTER:TRANS_EFF
                ARSBILLING:TRANS_EXP            = ARSMASTER:TRANS_EXP
                ARSBILLING:TRANS_CODE           = ARSMASTER:TRANS_CODE
                ARSBILLING:LINE_OF_BUSINESS     = ARSMASTER:LINE_OF_BUSINESS
                ARSBILLING:AGENT_NO             = ARSMASTER:AGENT_NO
                ARSBILLING:COMM_RATE            = ARSMASTER:COMM_RATE
                ARSBILLING:SUB_CODE             = L_SUB_CODE
                ARSBILLING:BILLING_CTR          = L_START_BILLING_CTR_audit
                ARSBILLING:RETURN_CHECK_CTR     = L_RETURN_CHECK_CTR
                ARSBILLING:LOB_SUBLINE          = ARSMASTER:LOB_SUBLINE
                ARSBILLING:BILL_PLAN            = ARSMASTER:BILL_PLAN
                ARSBILLING:PAYMENT_PLAN         = ARSMASTER:PAYMENT_PLAN
                ARSBILLING:POL_YEAR             = ARSMASTER:POL_YEAR
                ARSBILLING:END_SEQUENCE         = ARSMASTER:END_SEQUENCE
                ARSBILLING:STATUS_DATE          = ARSMASTER:TRANS_DATE
                ARSBILLING:BILLED_DATE          = todaysdate
                ARSBILLING:INSTALLMENT_AMOUNT   = prstrans:premium
                ARSBILLING:AC_NET_AMOUNT_DUE    = ARSMASTER:AC_NET_AMOUNT_DUE
                ARSBILLING:TOTAL_AMOUNT_PAID    = 0.00
                ARSBILLING:WRITE_OFF            = 0
                ARSBILLING:WRITE_OFF_AMOUNT     = 0.00
                ARSBILLING:WRITE_OFF_DATE       = 00.00.0000
                ARSBILLING:PRIOR_STATUS         = ARSBILLING:STATUS
                ARSBILLING:PRIOR_STATUS_DATE    = ARSBILLING:STATUS_DATE
                ARSBILLING:REINSTATED           = "N"

                ARSBILLING:STATUS               = "B" -- billed
                arsbilling:due_date             = todaysdate + 30

                if arsmaster:bill_plan = "AC" Then
                   {
                     arsbilling:due_date   = 00.00.0000
                   }

               }
           }
        Else
          {
            L_UPDATE_FILE = "Change"
            Change ARSBILLING
              {
                ARSBILLING:INSTALLMENT_AMOUNT   = (arsbilling:installment_amount + prstrans:premium)

                ARSBILLING:AC_NET_AMOUNT_DUE    = ARSBILLING:AC_NET_AMOUNT_DUE  +
                                                  ARSMASTER:AC_NET_AMOUNT_DUE

                ARSBILLING:STATUS               = "B" -- billed
                arsbilling:due_date             = todaysdate + 30

                -- no matter what, if AC then due date = 00.00.0000
                if arsmaster:bill_plan = "AC" Then
                   {
                     arsbilling:due_date   = 00.00.0000
                   }

              }
          }

      L_START_BILLING_CTR_audit = 1
      End

END




procedure update_arsbilling
begin

Access ARSBILLING, Set ARSBILLING:COMPANY_ID       = ARSMASTER:COMPANY_ID,
                       ARSBILLING:POLICY_NO        = ARSMASTER:POLICY_NO,
                       ARSBILLING:TRANS_DATE       = ARSMASTER:TRANS_DATE,
                       ARSBILLING:TRANS_EFF        = ARSMASTER:TRANS_EFF,
                       ARSBILLING:TRANS_EXP        = ARSMASTER:TRANS_EXP,
                       ARSBILLING:TRANS_CODE       = ARSMASTER:TRANS_CODE,
                       ARSBILLING:LINE_OF_BUSINESS = ARSMASTER:LINE_OF_BUSINESS,
                       ARSBILLING:COMM_RATE        = ARSMASTER:COMM_RATE,
                       ARSBILLING:SUB_CODE         = L_SUB_CODE,
                       ARSBILLING:BILLING_CTR      = L_CTR,
                       ARSBILLING:RETURN_CHECK_CTR = L_RETURN_CHECK_CTR, Approximate

L_UPDATE_FILE = "ADD"




If (ARSBILLING:COMPANY_ID      <> ARSMASTER:COMPANY_ID Or
   ARSBILLING:POLICY_NO        <> ARSMASTER:POLICY_NO Or
   ARSBILLING:TRANS_DATE       <> ARSMASTER:TRANS_DATE Or
   ARSBILLING:TRANS_EFF        <> ARSMASTER:TRANS_EFF Or
   ARSBILLING:TRANS_EXP        <> ARSMASTER:TRANS_EXP Or
   ARSBILLING:TRANS_CODE       <> ARSMASTER:TRANS_CODE Or
   ARSBILLING:LINE_OF_BUSINESS <> ARSMASTER:LINE_OF_BUSINESS Or
   ARSBILLING:COMM_RATE        <> ARSMASTER:COMM_RATE Or
   ARSBILLING:SUB_CODE         <> L_SUB_CODE Or
   ARSBILLING:BILLING_CTR      <> L_CTR Or
   ARSBILLING:RETURN_CHECK_CTR <> L_RETURN_CHECK_CTR) Then
    Begin
    Add ARSBILLING
        Begin
        ARSBILLING:COMPANY_ID           = ARSMASTER:COMPANY_ID
        ARSBILLING:POLICY_NO            = ARSMASTER:POLICY_NO
        ARSBILLING:TRANS_DATE           = ARSMASTER:TRANS_DATE
        ARSBILLING:TRANS_EFF            = ARSMASTER:TRANS_EFF
        ARSBILLING:TRANS_EXP            = ARSMASTER:TRANS_EXP
        ARSBILLING:TRANS_CODE           = ARSMASTER:TRANS_CODE
        ARSBILLING:LINE_OF_BUSINESS     = ARSMASTER:LINE_OF_BUSINESS
        ARSBILLING:AGENT_NO             = ARSMASTER:AGENT_NO
        ARSBILLING:COMM_RATE            = ARSMASTER:COMM_RATE
        ARSBILLING:SUB_CODE             = L_SUB_CODE
        ARSBILLING:BILLING_CTR          = L_CTR
        ARSBILLING:RETURN_CHECK_CTR     = L_RETURN_CHECK_CTR
        ARSBILLING:LOB_SUBLINE          = ARSMASTER:LOB_SUBLINE
        ARSBILLING:BILL_PLAN            = ARSMASTER:BILL_PLAN
        ARSBILLING:PAYMENT_PLAN         = ARSMASTER:PAYMENT_PLAN
        ARSBILLING:POL_YEAR             = ARSMASTER:POL_YEAR
        ARSBILLING:END_SEQUENCE         = ARSMASTER:END_SEQUENCE
        ARSBILLING:STATUS_DATE          = ARSMASTER:TRANS_DATE
        ARSBILLING:BILLED_DATE          = l_hold_billed_date[l_ctr]


/* July 2007 - set due date to 00.00.0000 for Account current new policy  */
        If arsmaster:bill_plan = "AC" Then
            Begin
              arsbilling:due_date       = 00.00.0000
              ARSBILLING:STATUS         = "B"   -- for AC - l_due_date_status[l_ctr]
            end
        else
            begin
              arsbilling:due_date       = l_hold_due_date[l_ctr]

              if arsmaster:trans_code one of 13 then
               {
                if l_due_date_status[l_ctr] not one of "P", " " then
                {
                 ARSBILLING:STATUS         = l_due_date_status[l_ctr]
                }
               }

            end

         if arsbilling:due_date > arsmaster:trans_exp then
          {
           arsbilling:due_date = arsmaster:trans_exp
          }
--write ("<014>")
--write ("%c%s%n",2001,"l_total_credit[l_ctr]    = ",l_total_credit[l_ctr])
--Read (23,1,"in update arsbilling -- Press Enter to Continue ",L_ENTER,1)

        ARSBILLING:INSTALLMENT_AMOUNT   = l_total_credit[l_ctr]
        ARSBILLING:AC_NET_AMOUNT_DUE    = ARSMASTER:AC_NET_AMOUNT_DUE
        ARSBILLING:TOTAL_AMOUNT_PAID    = 0.00
        ARSBILLING:WRITE_OFF            = 0
        ARSBILLING:WRITE_OFF_AMOUNT     = 0.00
        ARSBILLING:WRITE_OFF_DATE       = 00.00.0000
        ARSBILLING:PRIOR_STATUS         = ARSBILLING:STATUS
        ARSBILLING:PRIOR_STATUS_DATE    = ARSBILLING:STATUS_DATE
        ARSBILLING:REINSTATED           = "N"
        End
/*
Write ("<014>")
Write ("%c%s%s",02001,"company       = ",ARSbilling:COMPANY_ID)
Write ("%c%s%n",03001,"policy no     = ",ARSbilling:POLICY_NO)
Write ("%c%s%d",04001,"trans date    = ",ARSbilling:TRANS_DATE)
Write ("%c%s%d",05001,"trans eff     = ",ARSbilling:TRANS_EFF)
Write ("%c%s%d",06001,"trans exp     = ",ARSbilling:TRANS_EXP)
Write ("%c%s%n",07001,"trans code    = ",ARSbilling:TRANS_CODE)
Write ("%c%s%n",08001,"line          = ",ARSbilling:LINE_OF_BUSINESS)
Write ("%c%s%n",09001,"comm rate     = ",ARsbilling:COMM_RATE)
Write ("%c%s%n",10001,"sub code      = ",arsbilling:SUB_CODE)
Write ("%c%s%n",11001,"billing ctr   = ",arsbilling:BILLING_CTR)
Write ("%c%s%n",12001,"return check  = ",arsbilling:RETURN_CHECK_CTR)
write ("%c%s%n",13001,"l total credit= ",l_total_credit[l_ctr])
Read (23,1,"in update arsbilling ----- Press Enter to Continue ",L_ENTER,1)
*/
    End
Else
    Begin
    L_UPDATE_FILE = "Change"
    Change ARSBILLING
        Begin
/*
write ("<014>")
write ("%c%s%n",2001,"L_INSTALLMENT[L_CTR]   = ",L_INSTALLMENT[L_CTR])
Read (23,1,"in update billing change Press Enter to Continue ",L_ENTER,1)
*/
        ARSBILLING:INSTALLMENT_AMOUNT   = ARSBILLING:INSTALLMENT_AMOUNT +
                                          L_INSTALLMENT[L_CTR]
        ARSBILLING:AC_NET_AMOUNT_DUE    = ARSBILLING:AC_NET_AMOUNT_DUE  +
                                          ARSMASTER:AC_NET_AMOUNT_DUE

       -- no matter what, if AC then due date = 00.00.0000
        if arsmaster:bill_plan = "AC" Then
           Begin
             arsbilling:due_date   = 00.00.0000
           end

        End
    End

L_START_BILLING_CTR = L_START_BILLING_CTR + 1

End

-- added august 5, 2001 (DLP)
Procedure GET_BILLING_SUBCODE
Begin

Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID = ARSMASTER:COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO  = ARSMASTER:POLICY_NO,
                           ARSBILLING_ALT:TRANS_DATE = ARSMASTER:TRANS_DATE,
                           ARSBILLING_ALT:TRANS_EFF  = ARSMASTER:TRANS_EFF,
                           ARSBILLING_ALT:TRANS_EXP  = ARSMASTER:TRANS_EXP,
                           ARSBILLING_ALT:TRANS_CODE = ARSMASTER:TRANS_CODE,
                           ARSBILLING_ALT:LINE_OF_BUSINESS = ARSMASTER:LINE_OF_BUSINESS,
                           ARSBILLING_ALT:COMM_RATE  = ARSMASTER:COMM_RATE, Approximate

While ARSBILLING_ALT:COMPANY_ID = ARSMASTER:COMPANY_ID And
      ARSBILLING_ALT:POLICY_NO  = ARSMASTER:POLICY_NO And
      ARSBILLING_ALT:TRANS_DATE = ARSMASTER:TRANS_DATE And
      ARSBILLING_ALT:TRANS_EFF  = ARSMASTER:TRANS_EFF And
      ARSBILLING_ALT:TRANS_EXP  = ARSMASTER:TRANS_EXP And
      ARSBILLING_ALT:TRANS_CODE = ARSMASTER:TRANS_CODE And
      ARSBILLING_ALT:LINE_OF_BUSINESS = ARSMASTER:LINE_OF_BUSINESS And
      ARSBILLING_ALT:COMM_RATE   = ARSMASTER:COMM_RATE
      Begin
        L_SUB_CODE = ARSBILLING_ALT:SUB_CODE
        Next ARSBILLING_ALT
      End

End

Procedure CHECK_FOR_PAYMENTS
Begin

Access ARSCHKSU, Set ARSCHKSU:POLICY_NO = PRSTRANS_ALT:POLICY_NO,Approximate,Using Fourth Index


If PRSTRANS_ALT:TRANS_CODE Not One Of 11 Then
Begin
While ARSCHKSU:POLICY_NO = PRSTRANS_ALT:POLICY_NO
Begin

-- the following line was changed from
-- if arschksu:disposition = "OPEN" then
-- if the check is having multiple pulls on it then the
-- checks disposition would be "INPROCESS"
-- change made 10/17/2001 - DLP

Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = ARSCHKSU:POLICY_NO

Access SFPNAME, Set SFPNAME:POLICY_NO = SFPCURRENT:POLICY_NO,
                    SFPNAME:POL_YEAR  = SFPCURRENT:POL_YEAR,
                    SFPNAME:END_SEQUENCE = SFPCURRENT:END_SEQUENCE

If PRSTRANS_ALT:TRANS_CODE One Of 14 And
   SFPNAME:USER_ID Not One Of "AUTO RENEWAL" And
   arschksu:check_hold one of "N", "O", "" and
   arschksu:bank_no <> "DO NOT DEPOSIT" and
   ARSCHKSU:BALANCE  <> 0 Then
       Begin
       If SFSCOMPANY:DEBUG_MODE One Of 1 Then
       Begin
           Proc ("csbatch arsup010 %n",ARSCHKSU:POLICY_NO)
       End
       Else
       If SFSCOMPANY:DEBUG_MODE One Of 0 Then
       Begin
           Proc ("csbatch arsup010 %n",ARSCHKSU:POLICY_NO)/noconsole
       End
       End

If PRSTRANS_ALT:TRANS_CODE Not One Of 14 And
   arschksu:check_hold one of "N", "O", "" and
--   arschksu:bank_no <> "DO NOT DEPOSIT" and
   ARSCHKSU:BALANCE  <> 0 Then
       Begin
       If SFSCOMPANY:DEBUG_MODE One Of 1 Then
       Begin
           Proc ("csbatch arsup010 %n",ARSCHKSU:POLICY_NO)
       End
       Else
       If SFSCOMPANY:DEBUG_MODE One Of 0 Then
       Begin
           Proc ("csbatch arsup010 %n",ARSCHKSU:POLICY_NO)/noconsole
       End
       End

    Next ARSCHKSU
End

End

End

Procedure CHECK_FOR_RETURN_PREMIUMS
Begin
L_TOTAL_ANNUAL        = 0
L_TOTAL_PAYMENTS      = 0
L_NET_PAYMENTS        = 0
L_FLAT_CX             = "N"
L_TOTAL_REAL_CHECKS   = 0
l_write_off1          = 0.00
l_installment_charge1 = 0

--If PRSTRANS:PREMIUM = PRSTRANS:ANN_PREMIUM Then -- flat cx

If PRSTRANS:TRANS_EFF = PRSTRANS:EFF_DATE And
   PRSTRANS:TRANS_CODE Not One Of 12,13,15,18,22,23 Then
    Begin
    L_FLAT_CX = "Y"
    End
Else
    Begin
    L_FLAT_CX = "N"
    End

Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID = L_HOLD_COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO  = L_HOLD_POLICY_NO,Approximate

While ARSBILLING_ALT:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSBILLING_ALT:POLICY_NO  = L_HOLD_POLICY_NO
    Begin
--       If ((Month(ARSBILLING_ALT:TRANS_EFF) = Month(PRSTRANS:TRANS_EXP) And
--          Day(ARSBILLING_ALT:TRANS_EFF) = Day(PRSTRANS:TRANS_EXP) And
--          Year(ARSBILLING_ALT:TRANS_EXP) - Year(PRSTRANS:TRANS_EXP) = 0) and
--          arsbilling_alt:status = "D") then

-- commented because it is adding refunds from previous years to the amount

       If ARSBILLING_ALT:TRANS_EXP = PRSTRANS:TRANS_EXP and
          arsbilling_alt:status = "D" then
           Begin
            If ARSBILLING_ALT:TRANS_CODE Not One Of 25,55 And
               ARSBILLING_ALT:STATUS Not One Of  "C" Then -- removed 1
               Begin
                L_TOTAL_ANNUAL   = L_TOTAL_ANNUAL   + ARSBILLING_ALT:INSTALLMENT_AMOUNT
                L_TOTAL_PAYMENTS = L_TOTAL_PAYMENTS + ARSBILLING_ALT:TOTAL_AMOUNT_PAID
                L_TOTAL_RETURN   = L_TOTAL_RETURN   + ARSBILLING_ALT:DISBURSEMENT_AMOUNT

               End
           End -- end of checking for flat


      If L_FLAT_CX One Of "Y" And
         ARSBILLING_ALT:TRANS_CODE One Of 50 Then
          Begin
          L_NSF_CHARGE = L_NSF_CHARGE + ARSBILLING_ALT:INSTALLMENT_AMOUNT
          End

      if l_flat_cx = "N" and
         arsbilling_alt:trans_code one of 50 then
--         arsbilling_alt:total_amount_paid <> arsbilling_alt:installment_amount and
--         arsbilling_alt:status = "C" and
--         prstrans:trans_code = 11 then
--         arsbilling_alt:status_date = todaysdate then
          {
           l_NSF_amount_to_bill = L_NSF_amount_to_bill + arsbilling_alt:installment_amount
          }

      If ARSBILLING_ALT:TRANS_CODE One Of 18, 70 And
         (Year(ARSBILLING_ALT:TRANS_EXP) - Year(PRSTRANS:TRANS_EXP) = 0 Or
         ARSBILLING_ALT:POL_YEAR = PRSTRANS:POL_YEAR) And
         (ARSBILLING_ALT:INSTALLMENT_AMOUNT + ARSBILLING_ALT:TOTAL_AMOUNT_PAID - ARSBILLING_ALT:WRITE_OFF_AMOUNT <> 0) and
         arsbilling_alt:installment_amount > 0.00 Then
          Begin
          L_INSTALLMENT_CHARGE = L_INSTALLMENT_CHARGE +
                                 ARSBILLING_ALT:TOTAL_AMOUNT_PAID -
                                 ARSBILLING_ALT:WRITE_OFF_AMOUNT
--          L_NSF_CHARGE = 0.00
          End

--  this is to catch fees and write offs for refunds to return or not to return
--  01.31.2008  added to arscontrol2
      If (ARSBILLING_ALT:TRANS_CODE One Of 18 And
         Year(ARSBILLING_ALT:TRANS_EXP) - Year(PRSTRANS:TRANS_EXP) = 0 and
         arsbilling_alt:write_off_amount = 0 and
         arsbilling_alt:installment_amount > 0.00 ) then -- added 03/25/2008
          {
           if arsbilling_alt:installment_amount = arsbilling_alt:total_amount_paid and
              arscontrol2:return_paid_installment_fee one of 1 then  -- NO dont return it
              {
              l_installment_charge1 = l_installment_charge1 + arsbilling_alt:installment_amount
             }
          }
      If (ARSBILLING_ALT:TRANS_CODE One Of 70 And
         Year(ARSBILLING_ALT:TRANS_EXP) - Year(PRSTRANS:TRANS_EXP) = 0 and
         arsbilling_alt:write_off_amount = 0) then
          {
           if arsbilling_alt:installment_amount = arsbilling_alt:total_amount_paid and
              arscontrol2:return_paid_late_fee one of 1 then
             {
              l_installment_charge1 = l_installment_charge1 + arsbilling_alt:installment_amount
           }
        }
      If (ARSBILLING_ALT:TRANS_CODE not One Of 18, 70,50 And
         (arsbilling_alt:pol_year = prstrans:pol_year and
          arsbilling_alt:write_off_amount <> 0)) then
          {
           if arscontrol2:return_write_offs one of 1 then
             {
              l_write_off1 = l_write_off1 + arsbilling_alt:write_off_amount
             }
          }

-- to catch fees that are partial paid with the rest written off and not refund them
-- if control file checked.
      If (ARSBILLING_ALT:TRANS_CODE One Of 18, 70,50  And
--         (arsbilling_alt:pol_year = prstrans:pol_year and
         (Year(ARSBILLING_ALT:TRANS_EXP) - Year(PRSTRANS:TRANS_EXP) = 0 and
         arsbilling_alt:write_off_amount <> 0)) then
          {
           if arscontrol2:return_write_offs one of 1 then
            {
             l_write_off2 = l_write_off2 + arsbilling_alt:total_amount_paid
            }
          }

    Next ARSBILLING_ALT
    End

access arschksu, set arschksu:policy_no = prstrans:policy_no, approximate, using fourth index

while arschksu:policy_no = prstrans:policy_no
begin
        If ARSCHKSU:DISPOSITION Not One Of "NSF" And
           ARSCHKSU:INTERNAL_CHECK  Not One Of 1 and
           arschksu:check_hold not one of "1" and
           arschksu:disposition = "CLEAR" and
           arschksu:pol_year = prstrans:pol_year Then
           Begin
               L_TOTAL_REAL_CHECKS = L_TOTAL_REAL_CHECKS + arschksu:check_amount
           End

    next arschksu

end

L_TOTAL_UNEARNED = 0
L_TOTAL_WRITTEN  = 0
L_TOTAL_EARNED   = 0

Access PRSMASTER, Set PRSMASTER:COMPANY_ID = PRSTRANS:COMPANY_ID,
                      PRSMASTER:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While PRSMASTER:COMPANY_ID = PRSTRANS:COMPANY_ID And
      PRSMASTER:POLICY_NO  = PRSTRANS:POLICY_NO
      Begin
         If PRSMASTER:TRANS_EXP = PRSTRANS:TRANS_EXP And
            PRSMASTER:POL_YEAR  = PRSTRANS:POL_YEAR AND
            PRSMASTER:TRANS_CODE < 30 Then
         Begin
             L_TOTAL_WRITTEN = L_TOTAL_WRITTEN + PRSMASTER:PREMIUM
         End
         Next PRSMASTER
      End

/*  process arsbilling to capture current processed disbursements
    for the current period - use arsbilling:pol_year = prstrans:pol_year
    to decide current term/period */

L_DISBURSEMENTS2 = 0.00

Access ARSBILLING_ALT2, Set ARSBILLING_ALT2:COMPANY_ID = PRSTRANS:COMPANY_ID,
                            ARSBILLING_ALT2:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While ARSBILLING_ALT2:COMPANY_ID = PRSTRANS:COMPANY_ID And
      ARSBILLING_ALT2:POLICY_NO  = PRSTRANS:POLICY_NO
      Begin
--      If ARSBILLING_ALT2:POL_YEAR = PRSTRANS:POL_YEAR And
        If ARSBILLING_ALT2:trans_exp = PRSTRANS:trans_exp And
         ARSBILLING_ALT2:STATUS   One Of "D" Then
         Begin
            L_DISBURSEMENTS2 = L_DISBURSEMENTS2
                               + ARSBILLING_ALT2:DISBURSEMENT_AMOUNT
         End
      Next ARSBILLING_ALT2
      End

If L_FLAT_CX Not One Of "Y" Then
Begin
-- to add fees, writeoff back in by control file
   L_TOTAL_EARNED = L_TOTAL_WRITTEN  + l_installment_charge1 - L_write_off1 + l_write_off2 + l_nsf_amount_to_bill
End


if prstrans:trans_code one of 15,13,23 then
 {
  -- this is to subtract out prior disbursements from the audit disbursement - we dont want to duplicate disbursements
  -- to subtract out prior disbursements for endorsements that are refunded
  L_TOTAL_AMOUNT_PAID = (L_TOTAL_REAL_CHECKS - L_DISBURSEMENTS2)
 }
else
 {
  L_TOTAL_AMOUNT_PAID = (L_TOTAL_REAL_CHECKS - L_TOTAL_RETURN)
 }


L_NET_PAYMENTS = 0

If L_TOTAL_AMOUNT_PAID >= L_TOTAL_EARNED Then
Begin
    L_NET_PAYMENTS = L_TOTAL_AMOUNT_PAID - L_TOTAL_EARNED
End

/*
Write ("<014>")
Write ("%c%s%s",01001,"l flat CX              = ",L_FLAT_CX)
Write ("%c%s%n",02001,"l total amount paid    = ",L_TOTAL_AMOUNT_PAID)
Write ("%c%s%n",03001,"l total earned         = ",L_TOTAL_EARNED)
Write ("%c%s%n",04001,"l total written        = ",L_TOTAL_WRITTEN)
Write ("%c%s%n",05001,"l total real checks    = ",L_TOTAL_REAL_CHECKS)
Write ("%c%s%n",06001,"l total return         = ",L_TOTAL_RETURN)
Write ("%c%s%n",07001,"l net payments         = ",L_NET_PAYMENTS)
Write ("%c%s%s",08001,"l hold company id      = ",L_HOLD_COMPANY_ID)
Write ("%c%s%s",09001,"l company id           = ",L_COMPANY_ID)
Write ("%c%s%n",10001,"l installment charge   = ",L_INSTALLMENT_CHARGE)
Write ("%c%s%n",11001,"prstrans:pol_year      = ",PRSTRANS:POL_YEAR )
Write ("%c%s%d",12001,"prstrans:eff_date      = ",PRSTRANS:EFF_DATE)
Write ("%c%s%d",13001,"prstrans:trans_eff     = ",PRSTRANS:TRANS_EFF)
Write ("%c%s%n",14001,"l total disbursements  = ",L_TOTAL_DISBURSEMENTS)
Write ("%c%s%n",15001,"l total disbursements2 = ",L_DISBURSEMENTS2)
write ("%c%s%n",16001,"l_installment_charge1  = ",l_installment_charge1)
write ("%c%s%n",17001,"L_write_off1           = ",L_write_off1)
write ("%c%s%n",18001,"prstrans code          = ",prstrans:trans_code)
write ("%c%s%n",19001,"l_nsf_amount_to_bill   = ",l_nsf_amount_to_bill)
Read (23,1,"Press Enter to Continue ",L_ENTER,1)
*/

-- this was put back for flat cancellation
If L_FLAT_CX One Of "Y" And
   L_INSTALLMENT_CHARGE <> 0 Then
   Begin
       Do CREATE_CANCELLATION_INSTALLMENT_CHARGE
   End

If L_FLAT_CX One Of "Y" And
   L_NSF_CHARGE <> 0 Then
   Begin
       Do CREATE_NSF_WRITEOFF
   End

End

Procedure CREATE_OFFSET_INSTALLMENT_CHARGE
Begin

Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID       = L_HOLD_COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO        = L_HOLD_POLICY_NO, Approximate

While ARSBILLING_ALT:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSBILLING_ALT:POLICY_NO  = L_HOLD_POLICY_NO
Begin

If ARSBILLING_ALT:POL_YEAR = PRSTRANS:POL_YEAR And
   ARSBILLING_ALT:TRANS_CODE One Of 18, 68
   Then
   Begin

  Access ARSBILLING_ALT2, Set
  ARSBILLING_ALT2:COMPANY_ID       = ARSBILLING_ALT:COMPANY_ID,
  ARSBILLING_ALT2:POLICY_NO        = ARSBILLING_ALT:POLICY_NO,
  ARSBILLING_ALT2:TRANS_DATE       = ARSBILLING_ALT:TRANS_DATE,
  ARSBILLING_ALT2:TRANS_EFF        = ARSBILLING_ALT:TRANS_EFF,
  ARSBILLING_ALT2:TRANS_EXP        = ARSBILLING_ALT:TRANS_EXP,
  ARSBILLING_ALT2:TRANS_CODE       = ARSBILLING_ALT:TRANS_CODE,
  ARSBILLING_ALT2:LINE_OF_BUSINESS = ARSBILLING_ALT:LINE_OF_BUSINESS,
  ARSBILLING_ALT2:COMM_RATE        = ARSBILLING_ALT:COMM_RATE,
  ARSBILLING_ALT2:SUB_CODE         = ARSBILLING_ALT:SUB_CODE,
  ARSBILLING_ALT2:BILLING_CTR      = ARSBILLING_ALT:BILLING_CTR,
  ARSBILLING_ALT2:RETURN_CHECK_CTR = ARSBILLING_ALT:RETURN_CHECK_CTR, Exact

  If ARSBILLING_ALT2:COMPANY_ID       = ARSBILLING_ALT:COMPANY_ID And
     ARSBILLING_ALT2:POLICY_NO        = ARSBILLING_ALT:POLICY_NO And
     ARSBILLING_ALT2:TRANS_DATE       = ARSBILLING_ALT:TRANS_DATE And
     ARSBILLING_ALT2:TRANS_EFF        = ARSBILLING_ALT:TRANS_EFF And
     ARSBILLING_ALT2:TRANS_EXP        = ARSBILLING_ALT:TRANS_EXP And
     ARSBILLING_ALT2:TRANS_CODE       = ARSBILLING_ALT:TRANS_CODE And
     ARSBILLING_ALT2:LINE_OF_BUSINESS = ARSBILLING_ALT:LINE_OF_BUSINESS And
     ARSBILLING_ALT2:COMM_RATE        = ARSBILLING_ALT:COMM_RATE And
     ARSBILLING_ALT2:SUB_CODE         = ARSBILLING_ALT:SUB_CODE And
     ARSBILLING_ALT2:BILLING_CTR      = ARSBILLING_ALT:BILLING_CTR And
     ARSBILLING_ALT2:RETURN_CHECK_CTR = ARSBILLING_ALT:RETURN_CHECK_CTR Then

     Begin
         Change ARSBILLING_ALT2
         Begin
             ARSBILLING_ALT2:WRITE_OFF_AMOUNT = ARSBILLING_ALT:INSTALLMENT_AMOUNT -
                                                ARSBILLING_ALT:TOTAL_AMOUNT_PAID -
                                                ARSBILLING_ALT:WRITE_OFF_AMOUNT
             ARSBILLING_ALT2:WRITE_OFF        = ARSBILLING_ALT:WRITE_OFF
             arsbilling_alt2:write_off_date   = arsbilling_alt:write_off_date
         End
     End

   End -- end of pol year checking

   Next ARSBILLING_ALT

   End

End

Procedure CREATE_CANCELLATION_INSTALLMENT_CHARGE
Begin

Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID       = l_hold_COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO        = l_hold_POLICY_NO, Approximate

While ARSBILLING_ALT:COMPANY_ID = l_hold_COMPANY_ID And
      ARSBILLING_ALT:POLICY_NO  = l_hold_POLICY_NO
Begin

If ARSBILLING_ALT:POL_YEAR = PRSTRANS:POL_YEAR And
   ARSBILLING_ALT:TRANS_CODE One Of 18, 68 And
   ARSBILLING_ALT:CONSENT_ORDER Not One Of 9 and
   arsbilling_alt:bill_plan one of "DB" and
   arsbilling_alt:prior_trans_code one of 0 and
   arsbilling_alt:total_amount_paid = arsbilling_alt:installment_amount
   Then
   Begin


L_BILLING_CTR = ARSBILLING_ALT:BILLING_CTR + 100


Access ARSBILLING_ALT2, Set ARSBILLING_ALT3:COMPANY_ID       = ARSBILLING_ALT:COMPANY_ID,
                            ARSBILLING_ALT3:POLICY_NO        = ARSBILLING_ALT:POLICY_NO,
                            ARSBILLING_ALT3:TRANS_DATE       = ARSBILLING_ALT:TRANS_DATE,
                            ARSBILLING_ALT3:TRANS_EFF        = ARSBILLING_ALT:TRANS_EFF,
                            ARSBILLING_ALT3:TRANS_EXP        = ARSBILLING_ALT:TRANS_EXP,
                            ARSBILLING_ALT3:TRANS_CODE       = ARSBILLING_ALT:TRANS_CODE, Approximate

While ARSBILLING_ALT3:COMPANY_ID    = ARSBILLING_ALT:COMPANY_ID And
      ARSBILLING_ALT3:POLICY_NO     = ARSBILLING_ALT:POLICY_NO And
      ARSBILLING_ALT3:TRANS_DATE    = ARSBILLING_ALT:TRANS_DATE And
      ARSBILLING_ALT3:TRANS_EFF     = ARSBILLING_ALT:TRANS_EFF And
      ARSBILLING_ALT3:TRANS_EXP     = ARSBILLING_ALT:TRANS_EXP And
      ARSBILLING_ALT3:TRANS_CODE    = ARSBILLING_ALT:TRANS_CODE
Begin
      L_SUB_CODE = ARSBILLING_ALT3:SUB_CODE
      Next ARSBILLING_ALT3
End

L_SUB_CODE = L_SUB_CODE + 11


  Access ARSBILLING_ALT2, Set
  ARSBILLING_ALT2:COMPANY_ID       = ARSBILLING_ALT:COMPANY_ID,
  ARSBILLING_ALT2:POLICY_NO        = ARSBILLING_ALT:POLICY_NO,
  ARSBILLING_ALT2:TRANS_DATE       = ARSBILLING_ALT:TRANS_DATE,
  ARSBILLING_ALT2:TRANS_EFF        = ARSBILLING_ALT:TRANS_EFF,
  ARSBILLING_ALT2:TRANS_EXP        = ARSBILLING_ALT:TRANS_EXP,
  ARSBILLING_ALT2:TRANS_CODE       = ARSBILLING_ALT:TRANS_CODE,
  ARSBILLING_ALT2:LINE_OF_BUSINESS = ARSBILLING_ALT:LINE_OF_BUSINESS,
  ARSBILLING_ALT2:COMM_RATE        = ARSBILLING_ALT:COMM_RATE,
  ARSBILLING_ALT2:SUB_CODE         = L_SUB_CODE,
  ARSBILLING_ALT2:BILLING_CTR      = L_BILLING_CTR,
  ARSBILLING_ALT2:RETURN_CHECK_CTR = ARSBILLING_ALT:RETURN_CHECK_CTR, Exact

  If ARSBILLING_ALT2:COMPANY_ID       <> ARSBILLING_ALT:COMPANY_ID Or
     ARSBILLING_ALT2:POLICY_NO        <> ARSBILLING_ALT:POLICY_NO Or
     ARSBILLING_ALT2:TRANS_DATE       <> ARSBILLING_ALT:TRANS_DATE Or
     ARSBILLING_ALT2:TRANS_EFF        <> ARSBILLING_ALT:TRANS_EFF Or
     ARSBILLING_ALT2:TRANS_EXP        <> ARSBILLING_ALT:TRANS_EXP Or
     ARSBILLING_ALT2:TRANS_CODE       <> ARSBILLING_ALT:TRANS_CODE Or
     ARSBILLING_ALT2:LINE_OF_BUSINESS <> ARSBILLING_ALT:LINE_OF_BUSINESS Or
     ARSBILLING_ALT2:COMM_RATE        <> ARSBILLING_ALT:COMM_RATE Or
     ARSBILLING_ALT2:SUB_CODE         <> L_SUB_CODE Or
     ARSBILLING_ALT2:BILLING_CTR      <> L_BILLING_CTR Or
     ARSBILLING_ALT2:RETURN_CHECK_CTR <> ARSBILLING_ALT:RETURN_CHECK_CTR Then

     Begin
         Add ARSBILLING_ALT2
         Begin
             ARSBILLING_ALT2:RECORD            = ARSBILLING_ALT:RECORD/raw
             ARSBILLING_ALT2:SUB_CODE          = L_SUB_CODE
             ARSBILLING_ALT2:BILLING_CTR       = L_BILLING_CTR
             ARSBILLING_ALT2:STATUS            = "C"
             ARSBILLING_ALT2:USER              = USERNAME
             ARSBILLING_ALT2:CONSENT_ORDER     = 9
             ARSBILLING_ALT2:INSTALLMENT_AMOUNT = ARSBILLING_ALT2:INSTALLMENT_AMOUNT * -1
             ARSBILLING_ALT2:TOTAL_AMOUNT_PAID = 0.00
             ARSBILLING_ALT2:WRITE_OFF_AMOUNT  = 0.00
             arsbilling_alt2:write_off_date    = 00.00.0000
             ARSBILLING_ALT2:BILLED_DATE       = 00.00.0000
         End
     End

   End -- end of pol year checking

   Next ARSBILLING_ALT

   End

End

Procedure CREATE_NSF_WRITEOFF
Begin

Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID       = L_HOLD_COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO        = L_HOLD_POLICY_NO, Approximate

While ARSBILLING_ALT:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSBILLING_ALT:POLICY_NO  = L_HOLD_POLICY_NO
Begin

    If ARSBILLING_ALT:TRANS_CODE One Of 50 And
       ARSBILLING_ALT:STATUS     One Of "C","O","B" And
       ARSBILLING_ALT:POL_YEAR   = PRSTRANS:POL_YEAR Then
       Begin
  Access ARSBILLING_ALT2, Set
  ARSBILLING_ALT2:COMPANY_ID       = ARSBILLING_ALT:COMPANY_ID,
  ARSBILLING_ALT2:POLICY_NO        = ARSBILLING_ALT:POLICY_NO,
  ARSBILLING_ALT2:TRANS_DATE       = ARSBILLING_ALT:TRANS_DATE,
  ARSBILLING_ALT2:TRANS_EFF        = ARSBILLING_ALT:TRANS_EFF,
  ARSBILLING_ALT2:TRANS_EXP        = ARSBILLING_ALT:TRANS_EXP,
  ARSBILLING_ALT2:TRANS_CODE       = ARSBILLING_ALT:TRANS_CODE,
  ARSBILLING_ALT2:LINE_OF_BUSINESS = ARSBILLING_ALT:LINE_OF_BUSINESS,
  ARSBILLING_ALT2:COMM_RATE        = ARSBILLING_ALT:COMM_RATE,
  ARSBILLING_ALT2:SUB_CODE         = ARSBILLING_ALT:SUB_CODE,
  ARSBILLING_ALT2:BILLING_CTR      = ARSBILLING_ALT:BILLING_CTR,
  ARSBILLING_ALT2:RETURN_CHECK_CTR = ARSBILLING_ALT:RETURN_CHECK_CTR, Exact
  If ARSBILLING_ALT2:ERRORNUMBER = 0 Then
  Begin
       Change ARSBILLING_ALT2
       Begin
           ARSBILLING_ALT2:WRITE_OFF        = 1
           ARSBILLING_ALT2:WRITE_OFF_AMOUNT = ARSBILLING_ALT:INSTALLMENT_AMOUNT
           arsbilling_alt2:write_off_date   = todaysdate
       End
       End
       End
       Next ARSBILLING_ALT
       End

End -- end of procedure

Procedure POST_TO_PREMIUMS
Begin

L_UPDATE_FILE = "prsmaster - post to premiums"

L_PRMAST_SUB_CODE = 0 -- set to 0

Access PRSMASTER, Set PRSMASTER:COMPANY_ID= PRSTRANS:COMPANY_ID,
                      PRSMASTER:POLICY_NO = PRSTRANS:POLICY_NO, Approximate

While PRSMASTER:COMPANY_ID = PRSTRANS:COMPANY_ID And
      PRSMASTER:POLICY_NO  = PRSTRANS:POLICY_NO
Begin
       L_PRMAST_SUB_CODE = PRSMASTER:SUB_CODE + 1
       Next PRSMASTER
End

L_PRMAST_SUB_CODE = L_PRMAST_SUB_CODE + 1

-- update prsmaster file

Add PRSMASTER
Begin
     PRSMASTER:POLICY_NO           =       PRSTRANS:POLICY_NO
     PRSMASTER:RECORD              =       PRSTRANS:RECORD/raw
     PRSMASTER:SUB_CODE            =       L_PRMAST_SUB_CODE
End

End

Procedure POST_TO_PREMIUMS_TREATY_REINSURANCE
Begin

L_UPDATE_FILE = "prsmaster - post to premiums treaty reinsurance"

L_PRMAST_SUB_CODE = 0 -- set to 0

Access PRSTRANS_CNV, Set PRSTRANS_CNV:COMPANY_ID = PRSTRANS:COMPANY_ID,
                         PRSTRANS_CNV:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While PRSTRANS_CNV:COMPANY_ID = PRSTRANS:COMPANY_ID And
      PRSTRANS_CNV:POLICY_NO  = PRSTRANS:POLICY_NO
Begin

If PRSTRANS_CNV:TRANS_CODE >= 70 Then
Begin

Access PRSMASTER, Set PRSMASTER:COMPANY_ID= PRSTRANS_CNV:COMPANY_ID,
                      PRSMASTER:POLICY_NO = PRSTRANS_CNV:POLICY_NO, Approximate

While PRSMASTER:COMPANY_ID = PRSTRANS_CNV:COMPANY_ID And
      PRSMASTER:POLICY_NO  = PRSTRANS_CNV:POLICY_NO
Begin
       L_PRMAST_SUB_CODE = PRSMASTER:SUB_CODE + 1
       Next PRSMASTER
End

L_PRMAST_SUB_CODE = L_PRMAST_SUB_CODE + 1

-- update prsmaster file

Add PRSMASTER
Begin
     PRSMASTER:POLICY_NO           =       PRSTRANS_CNV:POLICY_NO
     PRSMASTER:RECORD              =       PRSTRANS_CNV:RECORD/raw
     PRSMASTER:SUB_CODE            =       L_PRMAST_SUB_CODE
End

End -- end of transaction code check

Next PRSTRANS_CNV
End

End

Procedure CALCULATE_NEW_RENEWAL_PERIODS
Begin

/* house cleaning */

L_UPDATE_FILE = "calculate new renewal periods"
l_ctr_counter = 0

Do CLEANUP_DUE_DATE_ARRAY
L_TOTAL_REMAINING_PERIODS = L_NUMBER_OF_PAYMENTS

/* calculate due dates, use eff date */

For L_CTR = 1 To L_NUMBER_OF_PAYMENTS
    Begin
    If L_CTR = 1 Then
        Begin
        Do CALCULATE_FIRST_PERIOD
        End
    Else
        If L_CTR > 1 Then
            Begin
            Do CALCULATE_PERIOD_2_ON
            End
    End

End

Procedure CALCULATE_INSTALLMENT_AMOUNTS
Begin

L_UPDATE_FILE = "calculate installment amounts "

Do CLEANUP_INSTALLMENT_AMOUNT_ARRAY

L_TEMP_PREMIUM = PRSTRANS:PREMIUM

Switch (PRSTRANS:BILL_PLAN)
 Case "AC" : Begin
              L_COMMISSION_RATE   = PRSTRANS:COMM_RATE * 0.01
              L_COMMISSION_AMOUNT = PRSTRANS:PREMIUM * L_COMMISSION_RATE
              L_TEMP_PREMIUM      = PRSTRANS:PREMIUM - L_COMMISSION_AMOUNT
             End
 Default   : L_TEMP_PREMIUM      = PRSTRANS:PREMIUM
End

For L_CTR = 1 To 20
Begin
   L_INSTALLMENT_NO_CENTS[L_CTR] = 0.00
   L_INSTALLMENT[L_CTR]          = 0.00
End

For L_CTR = 1 To L_NUMBER_OF_PAYMENTS
    Begin
        L_INSTALLMENT[L_CTR] =
        (L_TEMP_PREMIUM * ARSPAYPLAN:DISTRIBUTION[L_CTR])
        L_INSTALLMENT_NO_CENTS[L_CTR] =
        (L_TEMP_PREMIUM * ARSPAYPLAN:DISTRIBUTION[L_CTR])

If PRSTRANS:TRANS_CODE = ARSCONTROL:INSTALLMENT_CHARGE_TRANS_CODE And
   ARSPAYPLAN:INSTALLMENT_CHARGE_TYPE   = "FLAT" Then
   Begin
       L_INSTALLMENT[L_CTR] = (L_TEMP_PREMIUM Divide L_NUMBER_OF_PAYMENTS)
   End

End

/* make sure that the total of the no cents installment buckets equal
   the total premium, if not apply the difference to the first bucket */

For L_CTR = 1 To L_NUMBER_OF_PAYMENTS
Begin
    L_TOTAL_INSTALLMENT_NO_CENTS = L_TOTAL_INSTALLMENT_NO_CENTS +
                                   L_INSTALLMENT_NO_CENTS[L_CTR]
End

L_DIFF_INSTALLMENT_NO_CENTS = L_TEMP_PREMIUM - L_TOTAL_INSTALLMENT_NO_CENTS
L_INSTALLMENT_NO_CENTS[1] = L_INSTALLMENT_NO_CENTS[1] + L_DIFF_INSTALLMENT_NO_CENTS

L_DIFF_INSTALLMENT_NO_CENTS  = 0.00
L_TOTAL_INSTALLMENT_NO_CENTS = 0.00

If ARSCONTROL2:WHOLE_DOLLAR_INSTALLMENTS One Of 1 Then  -- put the control file check here
Begin
For L_CTR = 1 To L_NUMBER_OF_PAYMENTS
Begin
    L_INSTALLMENT[L_CTR] = L_INSTALLMENT_NO_CENTS[L_CTR]
End
End

If PRSTRANS:TRANS_CODE One Of 19,22,23 Then
Begin
    L_INSTALLMENT[1] = L_TEMP_PREMIUM
End

Access ARSCONTROL, Set ARSCONTROL:COMPANY_ID = L_COMPANY_ID, Exact
If ARSCONTROL:COMPANY_ID <> "" Then
Begin
    If ARSMASTER:TRANS_EFF < ARSCONTROL:INVOICE_APPLY_END_EFF Then
    Begin
        L_INSTALLMENT[L_CTR] = L_TEMP_PREMIUM
    End
End

End

Procedure CALCULATE_CANCELLATION
Begin

l_premium_financed = 0

/* need to set the prior records, if they exist */

Do ARSBILLING_PERIODS

If L_TRANS_CODE = 11 Then
Begin
    Do SET_PRIOR_RECORDS
End

L_CTR = 1
L_TOTAL_REMAINING_PERIODS = 1
Do CALCULATE_FIRST_PERIOD
L_INSTALLMENT[1] = PRSTRANS:PREMIUM

If L_TRANS_CODE One Of 27 Then -- reinstatement of sur charge
Begin
    L_INSTALLMENT[1]=PRSTRANS:ANN_PREMIUM
End

If ARSPAYPLAN:NUMBER_OF_PAYMENTS <> 1 And
   L_INSTALLMENT_UPDATED = "N" Then
Begin
--  added 10/27/2001 - this is new logic to calculate that remaining
--  billing periods without using a work file - very cool indead
    L_INSTALLMENT_UPDATED = "Y"
End

End

Procedure CALCULATE_ENDORSEMENT_PERIODS
Begin

L_FORCE_INVOICE = "X"

Do CLEANUP_DUE_DATE_ARRAY
Do CLEANUP_INSTALLMENT_AMOUNT_ARRAY

For L_CTR = 1 To 20
    Begin
    L_INSTALLMENT_NO_CENTS[L_CTR] = 0.00
    L_INSTALLMENT[L_CTR]          = 0.00
    L_DUE_DATE_STATUS[L_CTR]      = " "
    End

-- added 10/26/2001

Do ARSBILLING_PERIODS
--write ("<014>")
--write ("%c%s%n",2001,"l periods   = ",l_periods)
--Read (23,1,"l -periods   Press Enter to Continue ",L_ENTER,1)

-- added 2/9/2002 - if the endorsement was done and there was no more
-- due dates to apply this logic would not bill this endorsement.  this was
-- caused by the new logic to space out the installments evenly

If L_PERIODS = 0 Then
    Begin
    L_PERIODS = 1
    L_FORCE_INVOICE = "Y"
    End

-- this is checking to see the effective of when the a/r system
-- will put endorsements on installments.  this should not be
-- an issue with new clients just existing ones
If ARSCONTROL:INVOICE_APPLY_END_EFF > PRSTRANS:TRANS_EFF Then
    Begin
    L_ENDORSEMENT_INSTALLMENTS = 1
    End
Else
    Begin
--    L_ENDORSEMENT_INSTALLMENTS = L_NUMBER_OF_PAYMENTS
    L_ENDORSEMENT_INSTALLMENTS = L_PERIODS
    End

L_SKIPPED_PERIODS = L_NUMBER_OF_PAYMENTS - L_PERIODS

L_TOTAL_REMAINING_PERIODS = L_NUMBER_OF_PAYMENTS - L_SKIPPED_PERIODS
If L_FORCE_INVOICE = "Y" And
   L_NUMBER_OF_PAYMENTS > 1 Then
    Begin
    L_SKIPPED_PERIODS = 0
    End

/* do not put surcharges on installments */
If PRSTRANS:TRANS_CODE Not One Of 22,23 Then
    Begin
    L_TEMP_PREMIUM = PRSTRANS:PREMIUM

    Switch (PRSTRANS:BILL_PLAN)
      Case "AC" : Begin
                  L_COMMISSION_RATE   = PRSTRANS:COMM_RATE * 0.01
                  L_COMMISSION_AMOUNT = PRSTRANS:PREMIUM *
                                        L_COMMISSION_RATE
                  L_TEMP_PREMIUM      = PRSTRANS:PREMIUM -
                                        L_COMMISSION_AMOUNT
                  End
      Default   : L_TEMP_PREMIUM      = PRSTRANS:PREMIUM
      End

    For L_CTR = 1 To L_PERIODS
        Begin
--      L_INSTALLMENT[L_CTR] = PRSTRANS:PREMIUM Divide L_PERIODS

if prstrans:trans_code one of 15 then
{
    l_periods = 1
}
l_number_of_payments = arspayplan:number_of_payments

if l_periods <> arspayplan:number_of_payments then
begin
        l_installment[l_ctr] = l_temp_premium Divide l_periods
end

if l_periods = arspayplan:number_of_payments then
begin
        l_installment[l_ctr] = l_temp_premium * arspayplan:distribution[l_ctr]
end

-- put no-cents calc here

--      L_INSTALLMENT_NO_CENTS[L_CTR] = PRSTRANS:PREMIUM Divide L_PERIODS
        if l_periods <> arspayplan:number_of_payments then
        begin
            L_INSTALLMENT_NO_CENTS[L_CTR] = L_TEMP_PREMIUM Divide L_PERIODS
        end

        if l_periods = arspayplan:number_of_payments then
        begin
            l_installment_no_cents[l_ctr] = l_temp_premium *
                                            arspayplan:distribution[l_ctr]
        end
--write ("<014>")
--write ("%c%s%n",2001,"L_PERIODS             = ",L_PERIODS)
--write ("%c%s%n",3001,"arspayplanNUMBER_OF_PAYMENTS  = ",arspayplan:NUMBER_OF_PAYMENTS)
--write ("%c%s%n",4001,"L_ctr                         = ",L_ctr)
--Read (23,1,"here ---- Press Enter to Continue ",L_ENTER,1)

        L_DUE_DATE[L_CTR]    = L_HOLD_DUE_DATE[L_CTR + (arspayplan:NUMBER_OF_PAYMENTS - L_PERIODS)]

-- **  FOR BINARY = 135690
        if l_skipped_periods = 0 and
           l_trans_code one of 12,22 and
           l_force_invoice = "Y" then
            {
             if dateadd(prstrans:trans_date,1) => dateadd(todaysdate,1) then
              {
                l_due_date[l_ctr] = dateadd(prstrans:trans_date,1)
              }
             else
              {
                l_due_date[l_ctr] = dateadd(todaysdate,1)
              }

             if l_due_date[l_ctr] > prstrans:exp_date then
              {
                l_due_date[l_ctr] = prstrans:exp_date
--                l_due_date[l_ctr] = dateadd(todaysdate,1)

              }
            }


/* logic added 10/24/2002 - due date needs normal calculation if no more
   buckets are available */
        If L_SKIPPED_PERIODS = 0 and
           l_trans_code not one of arscontrol:decrease_trans_code, 23 Then -- no more buckets
            Begin
            L_FORCE_INVOICE = "X"
            L_DUE_DATE[1] = 00.00.0000
            L_DUE_DATE[L_CTR] = PRSTRANS:TRANS_EFF

            If L_DUE_DATE_STATUS[L_CTR + (L_NUMBER_OF_PAYMENTS - L_PERIODS)] One Of "B" Then
                Begin
                L_DUE_DATE[L_CTR] = L_HOLD_DUE_DATE[L_CTR + (L_NUMBER_OF_PAYMENTS - L_PERIODS)]
                End

            If Dateadd(PRSTRANS:TRANS_DATE,1) > L_DUE_DATE[L_CTR] Then
                Begin
                L_DUE_DATE[L_CTR] = Dateadd(PRSTRANS:TRANS_DATE,1)
                End

--          If L_DUE_DATE[L_CTR] > PRSTRANS:EXP_DATE Then
--              Begin
--              L_DUE_DATE[L_CTR] = PRSTRANS:EXP_DATE
--              End

            If L_NET_AMOUNT_DUE > 0.00 Then
                Begin
                L_FORCE_INVOICE = "E"
                End

            End

        End
    End
Else
If PRSTRANS:TRANS_CODE One Of 22,23 Then
    Begin

    L_INSTALLMENT[1] = PRSTRANS:PREMIUM

    For L_CTR = 1 To 20
      Begin

      /* logic added 10/24/2002 - due date needs normal calculation if no more
         buckets are available */

      --If L_SKIPPED_PERIODS => 0 then
          If L_HOLD_DUE_DATE[L_CTR]   <> 00.00.0000 And
             L_DUE_DATE_STATUS[L_CTR] One Of "O" And
            L_DUE_DATE[1]            = 00.00.0000 Then
             Begin
              L_DUE_DATE[1] = L_HOLD_DUE_DATE[L_CTR]
              End
       End -- end of l_ctr
/*
write ("<014>")
write ("%c%s%n",2001,"l_ctr                    = ",l_ctr)
write ("%c%s%d",3001,"L_HOLD_DUE_DATE[L_CTR]   = ",L_HOLD_DUE_DATE[L_CTR])
write ("%c%s%s",4001,"L_DUE_DATE_STATUS[L_CTR] = ",L_DUE_DATE_STATUS[L_CTR])
write ("%c%s%d",5001,"L_DUE_DATE[L_CTR]        = ",L_DUE_DATE[L_CTR])
write ("%c%s%d",6001,"L_DUE_DATE[1]            = ",L_DUE_DATE[1])
write ("%c%s%n",7001,"prstrans trans code      = ",prstrans:trans_code)
Read (23,1,"JJJJJJJJJJJJJJJJjjjPress Enter to Continue ",L_ENTER,1)
*/

    If L_DUE_DATE[1] = 00.00.0000 Then
        Begin
          L_DUE_DATE[1] = PRSTRANS:TRANS_EFF
          If L_DUE_DATE[1] < Dateadd(PRSTRANS:TRANS_DATE,1) Then
            {
              L_DUE_DATE[1] = Dateadd(PRSTRANS:TRANS_DATE,1)
            }
        -- calculate AC due from arscontrol2
          If PRSTRANS:BILL_PLAN One Of "AC" Then
            {
              Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = PRSTRANS:COMPANY_ID
              L_DUE_DATE[1] = PRSTRANS:TRANS_EFF
              If L_DUE_DATE[1] < PRSTRANS:TRANS_DATE + ARSCONTROL2:AC_DAYS_DUE Then
               {
                l_due_date[1] = 00.00.0000
               }
            } -- end of AC due date calculations

         If Dateadd(PRSTRANS:TRANS_DATE,1) > L_DUE_DATE[1] Then
           {
            L_DUE_DATE[1] = Dateadd(PRSTRANS:TRANS_DATE,1)
           }

       End -- end of due date = 00.00.0000 checking

    End  -- end of trans code one of 13 23 end of else

/* September 9, 2003 - zero rounding calc */

For L_CTR = 1 To L_PERIODS
Begin
    L_TOTAL_INSTALLMENT_NO_CENTS = L_TOTAL_INSTALLMENT_NO_CENTS +
                                   L_INSTALLMENT_NO_CENTS[L_CTR]
End

L_DIFF_INSTALLMENT_NO_CENTS = PRSTRANS:PREMIUM - L_TOTAL_INSTALLMENT_NO_CENTS
L_INSTALLMENT_NO_CENTS[1] = L_INSTALLMENT_NO_CENTS[1] + L_DIFF_INSTALLMENT_NO_CENTS

if prstrans:bill_plan one of "AC" then
begin
   l_installment_no_cents[1] = l_temp_premium
end

L_DIFF_INSTALLMENT_NO_CENTS  = 0.00
L_TOTAL_INSTALLMENT_NO_CENTS = 0.00

If ARSCONTROL2:WHOLE_DOLLAR_INSTALLMENTS One Of 1 Then  -- put the control file check here
Begin
For L_CTR = 1 To L_PERIODS
Begin
    L_INSTALLMENT[L_CTR] = L_INSTALLMENT_NO_CENTS[L_CTR]
End
End

/* july 14, 2003 */

If PRSTRANS:TRANS_CODE One Of 13 And
   L_HOLD_LAST_BILLING_STATUS One Of "B" And
   L_PERIODS = 1 And
   L_SKIPPED_PERIODS = 0 Then
   Begin
       L_DUE_DATE[1] = L_HOLD_LAST_DUE_DATE
       if l_due_date[1] > prstrans:trans_exp then
           l_due_date[1] = prstrans:trans_exp

   End

/* make sure that the total installments equal the written premium
   if not add / subtract the difference to the last bucket billed */

L_TOTAL_INSTALLMENT = 0 -- house cleaning

For L_CTR = 1 To L_PERIODS
    Begin
    L_TOTAL_INSTALLMENT = L_TOTAL_INSTALLMENT + L_INSTALLMENT[L_CTR]
    End

If L_TOTAL_INSTALLMENT <> PRSTRANS:PREMIUM and
   prstrans:bill_plan one of "DB" Then
    Begin
    L_DIFFERENT_PREMIUM = PRSTRANS:PREMIUM - L_TOTAL_INSTALLMENT
--    L_INSTALLMENT[L_PERIODS] = L_INSTALLMENT[L_PERIODS] +
--                                               L_DIFFERENT_PREMIUM
    L_INSTALLMENT[L_ctr] = L_INSTALLMENT[L_ctr] +  -- DLP
                                               L_DIFFERENT_PREMIUM
    End

/* a little more house cleaning, clean out buckets that were not
   filled with data */

/* logic for endorsements to be billed like the old system goes here
   for testing purposes and balancing do not place endorsements on
   installments until the date noted in the arscontrol file
*/

For L_CTR = (L_TOTAL_REMAINING_PERIODS + 1) To L_NUMBER_OF_PAYMENTS
    Begin
    L_DUE_DATE[L_CTR] = 00.00.0000
    L_INSTALLMENT[L_CTR] = 0
    End

End

Procedure CALCULATE_FIRST_PERIOD
Begin

-- access arspayplan to ensure the test for effdate billing test is good

access arspayplan, set arspayplan:company_id       = arsmaster:company_id,
                       arspayplan:line_of_business = arsmaster:line_of_business,
                       arspayplan:payment_plan     = arsmaster:payment_plan


-- effective date billing
-- test flag here for effective date billing
if arspayplan:eff_date_billing one of 1 then
  {
    If ARSMASTER:TRANS_EFF > Dateadd(ARSMASTER:TRANS_DATE,1) Then
     {
       l_due_date[l_ctr] = arsmaster:trans_eff
     }
    else
     {
       l_due_date[l_ctr] = dateadd(arsmaster:trans_date,1)
     }
  }
else
  {
    If ARSMASTER:TRANS_EFF > Dateadd(ARSMASTER:TRANS_DATE,1) Then
         L_DUE_DATE[L_CTR] = ARSMASTER:TRANS_EFF
    Else
         L_DUE_DATE[L_CTR] = Dateadd(ARSMASTER:TRANS_DATE,1)
  }


If ARSMASTER:BILL_PLAN One Of "AC" Then
Begin
    Access ARSCONTROL, Set ARSCONTROL2:COMPANY_ID = ARSMASTER:COMPANY_ID
    If ARSMASTER:TRANS_EFF > ARSMASTER:TRANS_DATE + ARSCONTROL2:AC_DAYS_DUE Then
    Begin
        L_DUE_DATE[L_CTR] = ARSMASTER:TRANS_EFF
    End
    Else
    Begin
        L_DUE_DATE[L_CTR] = ARSMASTER:TRANS_DATE + ARSCONTROL2:AC_DAYS_DUE
    End

End

End

Procedure CALCULATE_PERIOD_2_ON
Begin

/* calculate the subsequent due dates using the policy effective date
   changed 10/13/2001
*/

if arspayplan:eff_date_billing one of 1 then
  {
    if dateadd(arsmaster:trans_eff,arspayplan:eff_date_install_days[l_ctr]) > dateadd(arsmaster:trans_date,1) then
     {
       l_due_date[l_ctr] = dateadd(arsmaster:trans_eff,arspayplan:eff_date_install_days[l_ctr])
     }
    else
     {
--     DELOS DOES NOT USE THE SECTION BELOW
--     this is because it is buckets 2 thru ? and to catch if a policy is back dated - entered in May but effective
--     in June- the first bill should include previous months billing to catch up on 10 payments.

      l_arsmaster_trans_eff = dateadd(arsmaster:trans_eff,arspayplan:eff_date_install_days[(l_ctr)])
      l_arsmaster_trans_date = dateadd(arsmaster:trans_date,1)

      if Month(l_arsmaster_trans_eff) =< month(l_arsmaster_trans_date) and
         year(l_arsmaster_trans_eff) = year(l_arsmaster_trans_date) then
         {
           l_due_date[l_ctr] = dateadd(arsmaster:trans_date,1)
           l_ctr_counter = l_ctr_counter + 1
         }
     }
  }
else
  {
    If ARSPAYPLAN:INSTALLMENT_MONTHS_BETWEEN <> 0 Then
     Begin
       If ARSMASTER:TRANS_EFF > Dateadd(ARSMASTER:TRANS_DATE,1) Then
        {
          L_DUE_DATE[L_CTR] = Dateadd(SFPNAME:EFF_DATE,
                              ARSPAYPLAN:INSTALLMENT_MONTHS_BETWEEN * (L_CTR -1))
        }
       Else
        {
--  this is because it is buckets 2 thru ? and to catch if a policy is back dated - entered in May but effective
--  in June- the first bill should include previous months billing to catch up on 10 payments.

         l_arsmaster_trans_eff = dateadd(arsmaster:trans_eff,(l_ctr -1))
         l_arsmaster_trans_date = dateadd(arsmaster:trans_date,1)

--       if Month(dateadd(arsmaster:trans_eff,(l_ctr -1))) =< month(dateadd(arsmaster:trans_date,1)) then
         if Month(l_arsmaster_trans_eff) =< month(l_arsmaster_trans_date) and
            year(l_arsmaster_trans_eff) = year(l_arsmaster_trans_date) then
           {
             L_DUE_DATE[L_CTR] = Dateadd(ARSMASTER:TRANS_DATE,1)
             l_ctr_counter = l_ctr_counter + 1
           }
         else
             L_DUE_DATE[L_CTR] = Dateadd(ARSMASTER:TRANS_DATE,(l_ctr - l_ctr_counter))
--           L_DUE_DATE[L_CTR] = Dateadd(ARSMASTER:TRANS_eff,l_ctr)
        }

    /* if other installment due dates are prior
       to the first installment then change
       the installment due dates to be due the
       same as the first installment so they
       are billed
     */

       If L_DUE_DATE[L_CTR] =< L_DUE_DATE[1] Then
          L_DUE_DATE[L_CTR] = L_DUE_DATE[1]

     End

/* payplan uses days betweeen each due date to calculate the
   next due date -- this was changed 10/13/2001
*/

    If ARSPAYPLAN:INVOICE_DAYS_BETWEEN <> 0 Then
     {
       L_DUE_DATE[L_CTR] = L_DUE_DATE[L_CTR - 1] + ARSPAYPLAN:INVOICE_DAYS_BETWEEN
       If L_DUE_DATE[L_CTR] > SFPNAME:EXP_DATE Then
        {
         L_DUE_DATE[L_CTR] = L_DUE_DATE[L_CTR -1]
        }
     }

    If ARSMASTER:TRANS_CODE = 13  Then -- decrease in premium
     {
       L_CTR_2 = 0

       While L_CTR_2 < L_MAX_CTR
        {
          L_CTR_2 = L_CTR_2 + 1
          L_13_DUE_DATE[L_CTR_2] = 00.00.0000
        }

       L_CTR_2 = 0

       While L_CTR_2 < L_NUMBER_OF_PAYMENTS
        {
          L_CTR_2 = L_CTR_2 + 1
          If L_CTR_2 = 1 Then
            {
             L_13_DUE_DATE[L_CTR_2] = SFPNAME:EFF_DATE
            }
          Else
           If L_CTR_2 > 1 Then
             {
               L_13_DUE_DATE[L_CTR_2] = Dateadd(SFPNAME:EFF_DATE,
                                        ARSPAYPLAN:INSTALLMENT_MONTHS_BETWEEN * (L_CTR_2 - 1))
             }
        }

       L_FOUND = "N"
       L_CTR_2 = 0
       L_CTR_3 = 0

       While L_FOUND = "N" And
             L_CTR_2 < L_NUMBER_OF_PAYMENTS -- changed from "4" 02/13/2001
        {
          L_CTR_2 = L_CTR_2 + 1
          L_CTR_3 = L_CTR_2 + 1

          If L_DUE_DATE[1] >= L_13_DUE_DATE[L_CTR_2] And
             L_DUE_DATE[1] <= L_13_DUE_DATE[L_CTR_3] Then
              {
               L_FOUND = "Y"
              }
        }

/* if the loop worked then realign the due dates.  However,
   in the event that the first due date for the transaction
   is past the last due calculated based on the sfpname:eff_date
   and the months between then use the calculated due date based
   on the original calculate_first_period procedure
*/

       If L_FOUND = "Y" Then
        {
          L_CTR_2 = 0
          While L_CTR_2 < ARSPAYPLAN:INSTALLMENT_MONTHS_BETWEEN
           {
             L_CTR_2 = L_CTR_2 + 1
             L_DUE_DATE[L_CTR_2] = L_13_DUE_DATE[L_CTR_3]
             L_CTR_3 = L_CTR_3 + 1
           }
        }

     }
  }  -- end of else for effective date billing
End

/*Procedure CALCULATE_INSTALLMENT_PERIODS
Begin

If ARSPAYPLAN:INSTALLMENT_MONTHS_BETWEEN <> 0 Then
Begin
For L_CTR = 1 To L_MAX_CTR
    Begin
    If L_CTR = 1 Then
        Begin
        L_HOLD_DUE_DATE[L_CTR] = SFPNAME:EFF_DATE
        End
    Else
        If L_CTR > 1 Then
            Begin
            L_HOLD_DUE_DATE[L_CTR] = Dateadd(L_HOLD_DUE_DATE[L_CTR -1],
                                     ARSPAYPLAN:INSTALLMENT_MONTHS_BETWEEN)
            End
    End
End

If ARSPAYPLAN:INVOICE_DAYS_BETWEEN <> 0 Then
Begin
    For L_CTR = 1 To L_MAX_CTR
    Begin
        L_HOLD_DUE_DATE[L_CTR] = L_DUE_DATE[L_CTR]
        If L_HOLD_DUE_DATE[L_CTR] > SFPNAME:EXP_DATE Then
        {  L_HOLD_DUE_DATE[L_CTR] = L_DUE_DATE[L_CTR - 1] }
    End
End

End
*/

Procedure SET_PRIOR_RECORDS
Begin

L_UPDATE_FILE = "arsbilling_alt - set_prior_records"

    Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID       = ARSMASTER:COMPANY_ID,
                               ARSBILLING_ALT:POLICY_NO        = ARSMASTER:POLICY_NO, Generic

    While ARSBILLING_ALT:COMPANY_ID = ARSMASTER:COMPANY_ID And
          ARSBILLING_ALT:POLICY_NO = ARSMASTER:POLICY_NO
    Begin
        if arsbilling_alt:trans_exp = arsmaster:trans_exp then
         {
           Change ARSBILLING_ALT
           Begin
           If ARSBILLING_ALT:STATUS      One Of "B", "P", "O" Then
           Begin
               ARSBILLING_ALT:PRIOR_STATUS      = ARSBILLING_ALT:STATUS
               ARSBILLING_ALT:PRIOR_STATUS_DATE = ARSBILLING_ALT:STATUS_DATE
               ARSBILLING_ALT:STATUS            = "C"
               ARSBILLING_ALT:STATUS_DATE       = ARSMASTER:TRANS_DATE
               If ARSBILLING_ALT:REINSTATED Not One Of "Y" Then
               Begin
                   ARSBILLING_ALT:REINSTATED        = "N"
               End

               If ARSBILLING_ALT:TRANS_CODE One Of 18 Then
               Begin
                   If ARSBILLING_ALT:INSTALLMENT_AMOUNT - (ARSBILLING_ALT:TOTAL_AMOUNT_PAID +
                                                           ARSBILLING_ALT:WRITE_OFF_AMOUNT) <> 0 Then
                   Begin -- july 17 2003 changes at ficof
                   ARSBILLING_ALT:WRITE_OFF        = 1
                   ARSBILLING_ALT:WRITE_OFF_AMOUNT = (ARSBILLING_ALT:INSTALLMENT_AMOUNT - (ARSBILLING_ALT:TOTAL_AMOUNT_PAID +
                                                          ARSBILLING_ALT:WRITE_OFF_AMOUNT))
--                   ARSBILLING_ALT:WRITE_OFF_AMOUNT = ARSBILLING_ALT:INSTALLMENT_AMOUNT
                   ARSBILLING_ALT:WRITE_OFF_DATE   = TODAYSDATE
                   End
               End
           End
           End
         }
    Next ARSBILLING_ALT
    End
End

Procedure REINSTATE_PRIOR_RECORDS
Begin

L_UPDATE_FILE = "reinstate_prior_records 1"

L_PENDING_DISBURSEMENTS = 0.00 -- house cleaning
L_TOTAL_DISBURSEMENTS   = 0.00
L_USE_RECORD            = 1 -- set to on, reset to 0 if not true

-- checking prorate cancellation or flat
l_flat_policy_cx = "N"

l_end_sequence = 0

--access sfpcurrent, set sfpcurrent:policy_no = prstrans:policy_no

--access sfpname, set sfpname:policy_no    = sfpcurrent:policy_no,
--                    sfpname:pol_year     = sfpcurrent:pol_year, generic

access sfpname, set sfpname:policy_no    = prstrans:policy_no,
                    sfpname:pol_year     = prstrans:pol_year, generic

while sfpname:policy_no = prstrans:policy_no and
      sfpname:pol_year = prstrans:pol_year
       begin
         if sfpname:trans_code = 11 then
          {
           if sfpname:eff_date = sfpname:status_date then
           {
            l_flat_policy_cx = "Y"
           }
         else
           {
            l_flat_policy_cx = "N"
           }
          }
       next sfpname
       end


Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID = L_HOLD_COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO  = L_HOLD_POLICY_NO, Approximate

While ARSBILLING_ALT:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSBILLING_ALT:POLICY_NO  = L_HOLD_POLICY_NO
      Begin
      /* new procedure to check prstrans transaction codes to the
         arsbilling transaction codes.  Must be reinstated in
         premiums before it can be reinstated in arsbilling
         October 18, 2005   */

      l_use_record = 1 -- does not get reset if set to 0

      Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = ARSBILLING_ALT:COMPANY_ID

      If ARSCONTROL2:SELECTIVE_REINSTATEMENTS One Of 1 Then
       Begin
        If ARSBILLING_ALT:TRANS_CODE > 16 Then
         Begin
           Do CONFIRM_TRANS_CODE
         End
        Else
         Begin
           L_USE_RECORD = 1
         End
      End

-- delos
      If ARSBILLING_ALT:CONSENT_ORDER One Of 1 or
         arsbilling_alt:trans_code one of 191,27, 29 Then
      Begin
          L_USE_RECORD = 0
      End

-- do not reinstate the paid cx installment fee or late fee
      if l_flat_policy_cx = "N" and
         arsbilling_alt:trans_code one of 18, 28, 68, 70 and
         arsbilling_alt:total_amount_paid = arsbilling_alt:installment_amount then
          {
           l_use_record = 0
          }
      else
       if l_flat_policy_cx = "Y" and
          arsbilling_alt:trans_code one of 18, 28, 68, 70 and
          arsbilling_alt:total_amount_paid = arsbilling_alt:installment_amount then
           {
            l_use_record = 1
           }

--  if it is written off prior to the cancelation it will not be reinstated
      if arsbilling_alt:trans_code one of 18, 28, 68 and
         arsbilling_alt:write_off = 1 and
         arsbilling_alt:write_off_date < prstrans:trans_eff then
          {
           l_use_record = 0
          }

-- do not reinstate the negative cx installment fee
      if arsbilling_alt:trans_code one of 18, 28, 68 and
         arsbilling_alt:installment_amount < 0.00 then
         {
          l_use_record = 0
         }

-- do not reinstate NSF trans codes
      if arsbilling_alt:trans_code one of 60,61,62,63,64,65,66,69 then
         {
          l_use_record = 0
         }

/*
write ("<014>")
write ("%c%s%n",01001,"Policy Number        = ",arsbilling_alt:policy_no)
write ("%c%s%d",02001,"trans exp            = ",arsbilling_alt:trans_exp)
write ("%c%s%n",03001,"l\lob                = ",arsbilling_alt:line_of_business)
write ("%c%s%s",04001,"prior status         = ",arsbilling_alt:prior_status)
write ("%c%s%s",05001,"status               = ",arsbilling_alt:status)
write ("%c%s%n",06001,"installment          = ",arsbilling_alt:installment_amount)
write ("%c%s%n",07001,"trans code           = ",arsbilling_alt:trans_code)
write ("%c%s%n",08001,"use record           = ",l_use_record)
write ("%c%s%n",09001,"l holdPolicy Number  = ",l_hold_policy_no)
write ("%c%s%d",10001,"l hold trans exp     = ",l_hold_trans_exp)
write ("%c%s%n",11001,"l hold lob           = ",l_hold_line_of_business)

Read (23,1,"above IF ----  Press Enter to Continue ",L_ENTER,1)
*/

      If L_USE_RECORD One Of 1 Then
      Begin
      If ARSBILLING_ALT:COMPANY_ID       = L_HOLD_COMPANY_ID And
         ARSBILLING_ALT:POLICY_NO        = L_HOLD_POLICY_NO And
         ARSBILLING_ALT:TRANS_EXP        = L_HOLD_TRANS_EXP And
         ARSBILLING_ALT:LINE_OF_BUSINESS = L_HOLD_LINE_OF_BUSINESS And
         ARSBILLING_ALT:STATUS           = "C" And
         ARSBILLING_ALT:PRIOR_STATUS     Not One Of "C","E" And
         ARSBILLING_ALT:TRANS_CODE       Not One Of 21,27,29,30,50,55,99 Then -- added 27,29 - do not reinstate sur charge cx record
                                                                           -- the original 19 will be reinstated
         Begin

         Access ARSBILLING_ALIAS,
         Set ARSBILLING_ALIAS:COMPANY_ID = ARSBILLING_ALT:COMPANY_ID,
         ARSBILLING_ALIAS:POLICY_NO  = ARSBILLING_ALT:POLICY_NO,
         ARSBILLING_ALIAS:TRANS_DATE = todaysdate, /*PRSTRANS:TRANS_DATE, -- changed this on may 21 - see if this is working*/
         ARSBILLING_ALIAS:TRANS_EFF  = L_HOLD_TRANS_EFF, -- ARSBILLING_ALT:TRANS_EFF,
         ARSBILLING_ALIAS:TRANS_EXP  = L_HOLD_TRANS_EXP, -- arsbilling_alt:trans_exp,
         ARSBILLING_ALIAS:TRANS_CODE = ARSBILLING_ALT:TRANS_CODE,
         ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING_ALT:LINE_OF_BUSINESS,
         ARSBILLING_ALIAS:COMM_RATE  = ARSBILLING_ALT:COMM_RATE,
         ARSBILLING_ALIAS:SUB_CODE   = ARSBILLING_ALT:SUB_CODE,
         ARSBILLING_ALIAS:BILLING_CTR = ARSBILLING_ALT:BILLING_CTR,
         ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING_ALT:RETURN_CHECK_CTR

/*
write ("<014>")
write ("%c%s%n",01001,"ars Policy Number    = ",arsbilling_alias:policy_no)
write ("%c%s%d",02001,"arsbill trans date   = ",arsbilling_alias:trans_date)
write ("%c%s%d",03001,"arsbill trans eff    = ",arsbilling_alias:trans_eff)
write ("%c%s%d",04001,"arsbilltrans exp     = ",arsbilling_alias:trans_exp)
write ("%c%s%n",05001,"arsbilltrans code    = ",arsbilling_alias:trans_code)
write ("%c%s%n",06001,"arsbilllob           = ",arsbilling_alias:line_of_business)
write ("%c%s%n",07001,"arsbill comm rate    = ",arsbilling_alias:comm_rate)
write ("%c%s%n",08001,"arsbill subcode      = ",arsbilling_alias:sub_code)
write ("%c%s%n",09001,"arsbill bill ctr     = ",arsbilling_alias:billing_ctr)
write ("%c%s%n",10001,"arsbill ret check ctr= ",arsbilling_alias:return_check_ctr)
write ("%c%s%n",11001,"use record           = ",l_use_record)
write ("%c%s%n",12001,"alt Policy Number    = ",arsbilling_alt:policy_no)
write ("%c%s%d",13001,"prstrans trans date  = ",prstrans:trans_date)
write ("%c%s%d",14001,"l hold trans eff     = ",l_hold_trans_eff)
write ("%c%s%d",15001,"l hold trans exp     = ",l_hold_trans_exp)
write ("%c%s%n",16001,"alt  trans code      = ",arsbilling_alt:trans_code)
write ("%c%s%n",17001,"alt lob              = ",arsbilling_alt:line_of_business)
write ("%c%s%n",18001,"alt comm rate        = ",arsbilling_alt:comm_rate)
write ("%c%s%n",19001,"alt bill subcode     = ",arsbilling_alt:sub_code)
write ("%c%s%n",20001,"alt bill ctr         = ",arsbilling_alt:billing_ctr)
write ("%c%s%n",21001,"all ret check ctr    = ",arsbilling_alt:return_check_ctr)

Read (23,1,"above ADD      ----  Press Enter to Continue ",L_ENTER,1)
*/

         Add ARSBILLING_ALIAS
         Begin
--  after this move need to adjust the first, second buckets from the difference of annual premium and reinstated premium

             ARSBILLING_ALIAS:RECORD         = ARSBILLING_ALT:RECORD/raw
             ARSBILLING_ALIAS:COMPANY_ID     = L_HOLD_COMPANY_ID
             ARSBILLING_ALIAS:POLICY_NO      = L_HOLD_POLICY_NO
             ARSBILLING_ALIAS:LINE_OF_BUSINESS = L_HOLD_LINE_OF_BUSINESS
             ARSBILLING_ALIAS:TRANS_DATE     = TODAYSDATE
             ARSBILLING_ALIAS:TRANS_EFF      = L_HOLD_TRANS_EFF
             ARSBILLING_ALIAS:TRANS_EXP      = L_HOLD_TRANS_EXP

If ARSCONTROL2:REINSTATE_PREMIUMS One Of 1 Then
Begin

             If ARSBILLING_ALIAS:TRANS_CODE One Of 10,11,12,13,14,16 Then
             Begin
             If L_16_REMAINING_PREM <> 0 And
                ARSBILLING_ALIAS:TRANS_CODE One Of 10,11,12,13,14,16 Then
             Begin
                 If ARSBILLING_ALIAS:INSTALLMENT_AMOUNT => L_16_REMAINING_PREM Then
                 Begin
                      ARSBILLING_ALIAS:INSTALLMENT_AMOUNT = ARSBILLING_ALIAS:INSTALLMENT_AMOUNT - L_16_REMAINING_PREM
                      L_16_REMAINING_PREM = 0.00
                End
                Else If ARSBILLING_ALIAS:INSTALLMENT_AMOUNT < L_16_REMAINING_PREM Then
                Begin
                     L_16_REMAINING_PREM = L_16_REMAINING_PREM  - ARSBILLING_ALIAS:INSTALLMENT_AMOUNT
                     ARSBILLING_ALIAS:INSTALLMENT_AMOUNT = 0.00
                End
             End
             End

--  delos
/*
write ("<014>")
write ("%c%s%n",2001,"L_19_REMAINING_PREM          = ",L_19_REMAINING_PREM)
write ("%c%s%n",3001,"ARSBILLING_ALIAS:TRANS_CODE  = ",ARSBILLING_ALIAS:TRANS_CODE)
Read (23,1,"Press Enter to Continue ",L_ENTER,1)
*/
             If ARSBILLING_ALIAS:TRANS_CODE One Of 19,29 Then
             Begin
             If L_19_REMAINING_PREM <> 0 And
                ARSBILLING_ALIAS:TRANS_CODE One Of 19,29 Then
                Begin
                  If ARSBILLING_ALIAS:INSTALLMENT_AMOUNT > L_19_REMAINING_PREM Then
                   Begin
                      ARSBILLING_ALIAS:INSTALLMENT_AMOUNT = ARSBILLING_ALIAS:INSTALLMENT_AMOUNT - L_19_REMAINING_PREM
                      L_19_REMAINING_PREM = 0.00
                   End
                  Else If ARSBILLING_ALIAS:INSTALLMENT_AMOUNT < L_19_REMAINING_PREM Then
                    Begin
                      L_19_REMAINING_PREM = L_19_REMAINING_PREM  - ARSBILLING_ALIAS:INSTALLMENT_AMOUNT
                      ARSBILLING_ALIAS:INSTALLMENT_AMOUNT = 0.00
                    End
                End
             End
             ARSBILLING_ALIAS:TRANS_DATE     = PRSTRANS:TRANS_DATE

End -- end of arscontrol2:reinstate_premiums one of 1 checking


             L_PENDING_DISBURSEMENTS         = L_PENDING_DISBURSEMENTS +
                                               ARSBILLING_ALT:TOTAL_AMOUNT_PAID

         If ARSBILLING_ALT:TRANS_CODE One Of 30 Then
         {
             L_TOTAL_DISBURSEMENTS           = L_TOTAL_DISBURSEMENTS +
                                               (ARSBILLING_ALT:INSTALLMENT_AMOUNT * -1)
         }

             ARSBILLING_ALIAS:TOTAL_AMOUNT_PAID = 0.00
             ARSBILLING_ALIAS:TRANS_CODE     = L_TRANS_CODE_HOLD

-- cindy look here

             if  arsbilling_alt:trans_code = 70 then
             {
                 arsbilling_alias:trans_code = arsbilling_alt:trans_code
             }

             ARSBILLING_ALIAS:PRIOR_TRANS_CODE = ARSBILLING_ALT:TRANS_CODE
             ARSBILLING_ALIAS:WRITE_OFF        = 0
             ARSBILLING_ALIAS:WRITE_OFF_AMOUNT = 0.00
             ARSBILLING_ALIAS:WRITE_OFF_DATE   = 00.00.0000
             ARSBILLING_ALIAS:STATUS         = ARSBILLING_ALT:PRIOR_STATUS

-- need to set the status to "B" so that the check processing will apply
-- the money correct
             If ARSBILLING_ALT:PRIOR_STATUS = "P" Then
             Begin
                 ARSBILLING_ALIAS:STATUS = "B"
                 If ARSBILLING_ALIAS:BILLED_DATE = 00.00.0000 Then
                 Begin
                     ARSBILLING_ALIAS:STATUS = "O"
                 End
             End

             ARSBILLING_ALIAS:STATUS_DATE    = ARSBILLING_ALT:PRIOR_STATUS_DATE
             ARSBILLING_ALIAS:REINSTATED     = "Y"
             L_UPDATE_FILE = "reinstate prior records 2"

             L_SUB_CODE = ARSBILLING_ALIAS:SUB_CODE + 3 -- was 1
             ARSBILLING_ALIAS:SUB_CODE       = L_SUB_CODE

             If ARSBILLING_ALIAS:PRIOR_TRANS_CODE One Of 12,13,18,19,22,23,28,29 Then
             Begin
                 ARSBILLING_ALIAS:TRANS_CODE       = ARSBILLING_ALIAS:PRIOR_TRANS_CODE
             End

         If ARSBILLING_ALIAS:INSTALLMENT_AMOUNT = 0 Then
         Begin
             ARSBILLING_ALIAS:STATUS = "^"
         End

         End -- end of add

     End -- end of If conditions

     End -- end of l_use_record checking

     Next ARSBILLING_ALT

     End -- end of while

-- need to offset the CX installment charge on reinstatements as long as
-- the CX was done prorata - if if was flat this is being done at the time
-- of the CX.

l_flat_cx = "N"

l_end_sequence = 0

access sfpcurrent, set sfpcurrent:policy_no = l_hold_policy_no

access sfpname, set sfpname:policy_no    = sfpcurrent:policy_no,
                    sfpname:pol_year     = sfpcurrent:pol_year,
                    sfpname:end_sequence = sfpcurrent:end_sequence

if sfpname:policy_eff_date = l_hold_trans_eff then
{
    l_flat_cx = "Y"
}

/* let's clean up the "^" status records here */

Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID = L_HOLD_COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO  = L_HOLD_POLICY_NO, Approximate

While ARSBILLING_ALT:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSBILLING_ALT:POLICY_NO  = L_HOLD_POLICY_NO
      Begin
      If ARSBILLING_ALT:STATUS One Of "^" Then
      Begin
          Delete ARSBILLING_ALT
      End
      Next ARSBILLING_ALT
End

End -- end of procedure

Procedure CHECK_FOR_CX_RETURN_PREMIUMS
Begin

/* procedure will check for pending disbursements and reverse the amount
   if exists */

L_UPDATE_FILE = "check_for_cx_return_premiums 1"
L_CHECKS_ISSUED           = 0.00
L_UNISSUED_CHECK          = 0.00
l_refund_pol_year = 0000

Access ARSCHECK, Set ARSCHECK:COMPANY_ID = L_HOLD_COMPANY_ID,
                     ARSCHECK:POLICY_NO  = L_HOLD_POLICY_NO, Approximate

While ARSCHECK:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSCHECK:POLICY_NO  = L_HOLD_POLICY_NO
      Begin

      If ARSCHECK:RELEASE Not One Of "V","Y" And
         arscheck:eff_date  = sfpname:eff_date and
         ARSCHECK:APS_TRANS_CODE One Of "OVER", "CANCEL", "ENDORSE","RETURN" And
         Val(ARSCHECK:CHECK_NO) One Of 0 Then -- found a pending disbursement
         Begin
            Access ARSCHECK_ALIAS, Set ARSCHECK_ALIAS:COMPANY_ID = ARSCHECK:COMPANY_ID,
                                       ARSCHECK_ALIAS:POLICY_NO  = ARSCHECK:POLICY_NO,
                                       ARSCHECK_ALIAS:SUB_CODE   = ARSCHECK:SUB_CODE
           Change ARSCHECK_ALIAS
           Begin
                ARSCHECK_ALIAS:RELEASE = "V"
                ARSCHECK_ALIAS:COMMENTS = "Reapplied to A/R from Reinstatement"
                if arscheck:aps_trans_code one of "CANCEL" then
                 {
                   L_UNISSUED_CHECK = 0
                   l_aps_trans_code = "CANCEL"
                 }
                else
                 {
                   L_UNISSUED_CHECK = L_UNISSUED_CHECK + ARSCHECK_ALIAS:CHECK_AMOUNT
                   l_aps_trans_code = arscheck:aps_trans_code
                 }
           End

         End
      Else
      If ARSCHECK:RELEASE One Of "Y" And
         ARSCHECK:APS_TRANS_CODE One Of "CANCEL" And
         Val(ARSCHECK:CHECK_NO) <> 0 Then
         Begin
             L_CHECKS_ISSUED = L_CHECKS_ISSUED + ARSCHECK:CHECK_AMOUNT
         End

      Next ARSCHECK

End

-- l_pending_disbursements is now updated in
-- check_for_cx_return_premiums (1190)
-- March 12, 2002

--L_PENDING_DISBURSEMENTS = L_PENDING_DISBURSEMENTS - L_CHECKS_ISSUED +
--                          L_CX_BALANCE_DUE_PAID


Access ARSBILLING_ALIAS, Set ARSBILLING_ALIAS:COMPANY_ID = L_HOLD_COMPANY_ID,
                             ARSBILLING_ALIAS:POLICY_NO  = L_HOLD_POLICY_NO, Approximate

While ARSBILLING_ALIAS:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSBILLING_ALIAS:POLICY_NO  = L_HOLD_POLICY_NO
      Begin

          L_POL_YEAR = ARSBILLING_ALIAS:POL_YEAR
          If L_POL_YEAR = 0 Then
          Begin
              L_POL_YEAR = Year(ARSBILLING_ALIAS:TRANS_EFF)
          End
          If L_POL_YEAR = L_HOLD_POL_YEAR Then
          Begin
              L_TOTAL_AMOUNT_APPLIED = L_TOTAL_AMOUNT_APPLIED  +
                                       ARSBILLING_ALIAS:TOTAL_AMOUNT_PAID
          End

          Next ARSBILLING_ALIAS
End

L_REINSTATE_AR = L_TOTAL_AMOUNT_APPLIED - L_CHECKS_ISSUED
Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = L_HOLD_COMPANY_ID

/*
Write ("%c%s%n",01001,"l total amount applied      = ",L_TOTAL_AMOUNT_APPLIED)
Write ("%c%s%n",02001,"l reinstate ar              = ",L_REINSTATE_AR)
Write ("%c%s%n",03001,"arscontrol2:reinstate_prem  = ",ARSCONTROL2:REINSTATE_PREMIUMS)
Write ("%c%s%s",04001,"l_hold_company              = ",L_HOLD_COMPANY_ID)
write ("%c%s%n",05001,"l unissued check            = ",l_unissued_check)
Read (23,1,"Press Enter to Continue ",L_ENTER,1)
*/
-- L_PENDING_DISBURSEMENTS = L_UNISSUED_CHECK
L_PENDING_DISBURSEMENTS = 0

If ARSCONTROL2:REINSTATE_PREMIUMS One Of 1 Then
Begin
--    L_UNISSUED_CHECK        = 0
    L_REINSTATE_AR          = 0
    L_PENDING_DISBURSEMENTS = 0
End

if l_unissued_check = 0 then
{
    L_REINSTATE_AR          = 0
    L_PENDING_DISBURSEMENTS = 0
}

If L_UNISSUED_CHECK <> 0 and
   prstrans:trans_code <> 15 Then
    {
     Do CREATE_VOIDED_DISBURSEMENT_OFFSET
    }

If L_UNISSUED_CHECK = 0 and
   l_aps_trans_code = "CANCEL" and
   prstrans:trans_code <> 15 Then
   {
    Do CREATE_VOIDED_DISBURSEMENT_OFFSET
   }

If (prstrans:trans_code <> 15 and
   (L_PENDING_DISBURSEMENTS > 0 Or
   L_REINSTATE_AR  > 0)) Then -- need to create "dummy" check and process
Begin

L_UPDATE_FILE = "csexec_application"
I_CSEXEC_APPLICATION = "CHECK_REFERENCE"
Include "sfscsexec.pro"
L_UPDATE_FILE = "check_for_cx_return_premiums 2"
L_CHECK_REFERENCE = I_CSEXEC_NUMBER

Access ARSCHKSU, Set ARSCHKSU:COMPANY_ID      = L_HOLD_COMPANY_ID,
                     ARSCHKSU:CHECK_REFERENCE = L_CHECK_REFERENCE, Exact

If ARSCHKSU:COMPANY_ID      <> L_HOLD_COMPANY_ID And
   ARSCHKSU:CHECK_REFERENCE <> L_CHECK_REFERENCE Then -- new record
   Begin
   Add ARSCHKSU
   Begin
       ARSCHKSU:COMPANY_ID          = L_HOLD_COMPANY_ID
       ARSCHKSU:CHECK_REFERENCE     = L_CHECK_REFERENCE
       ARSCHKSU:POLICY_NO           = L_HOLD_POLICY_NO
       arschksu:pol_year            = l_refund_pol_year
       arschksu:trans_eff           = l_refund_trans_eff
       ARSCHKSU:AGENT_NO            = SFSAGENT:AGENT_NO
       ARSCHKSU:BANK_NO             = "DO NOT DEPOSIT"
       ARSCHKSU:TRANS_DATE          = TODAYSDATE
       ARSCHKSU:POSTED_DATE         = 00.00.0000
       ARSCHKSU:CHECK_NO            = "REINSTATED FROM A/P"
       ARSCHKSU:CHECK_AMOUNT        = L_PENDING_DISBURSEMENTS + L_REINSTATE_AR
       ARSCHKSU:COMMENTS            = "Not A check - Reinstatement of A/P"
       ARSCHKSU:PAYOR_NAME          = SFSCOMPANY:NAME[1]
       ARSCHKSU:PAYOR_CARE_OF       = SFSCOMPANY:NAME[2]
       ARSCHKSU:PAYOR_ADDRESS       = SFSCOMPANY:ADDRESS[1]
       ARSCHKSU:PAYOR_CITY          = SFSCOMPANY:CITY
       ARSCHKSU:PAYOR_STR_STATE     = SFSCOMPANY:STR_STATE
       ARSCHKSU:PAYOR_ZIP_CODE_STR  = SFSCOMPANY:STR_ZIPCODE
       ARSCHKSU:PAYOR_TYPE          = "O" -- other
       ARSCHKSU:DEPOSIT_DATE        = 00.00.0000
       ARSCHKSU:DISPOSITION         = "OPEN"
       ARSCHKSU:MONEY_ORDER         = "N"
       ARSCHKSU:BALANCE             = L_PENDING_DISBURSEMENTS + L_REINSTATE_AR
       ARSCHKSU:CHECK_HOLD          = "N"
       ARSCHKSU:USER                = USERNAME
       ARSCHKSU:USER_CONSOLE        = CONSOLE
       ARSCHKSU:ENTER_TIME          = SYSTEMTIME
       ARSCHKSU:ENTER_DATE          = SYSTEMDATE
       ARSCHKSU:QUOTE_NO            = 0
       ARSCHKSU:DEPOSIT_PREMIUM     = 0
       ARSCHKSU:MORTGAGE_ID         = " "
       ARSCHKSU:CREDIT_INSTALLMENT_CHAGE = 0
       ARSCHKSU:CHECK_PAYS_TOTAL    = 0
       ARSCHKSU:INTERNAL_CHECK      = 1 -- this is done so no deposit slip is created
   End -- end of add
   End -- end of checking for record exists

End -- end of checking for l_pending_disbursements > 0

End -- end of procedure

Procedure CLEANUP_DUE_DATE_ARRAY
Begin

For L_CTR = 1 To L_MAX_CTR
    Begin
    L_DUE_DATE[L_CTR] = 00.00.0000
    End

End

Procedure CLEANUP_INSTALLMENT_AMOUNT_ARRAY
Begin

For L_CTR = 1 To L_MAX_CTR
    Begin
    L_INSTALLMENT[L_CTR] = 0.00
    End

End

Procedure GET_PAYOR_TYPE
Begin
/* if other than the insured is the payor then the payment plan
   will be annual only - payment plan = 1 */

Access SFPSUPP, Set SFPSUPP:POLICY_NO = PRSTRANS:POLICY_NO,
                    SFPSUPP:POL_YEAR  = PRSTRANS:EFF_DATE_YYYY,
                    Approximate

While SFPSUPP:POLICY_NO = PRSTRANS:POLICY_NO And
      SFPSUPP:POL_YEAR  = PRSTRANS:EFF_DATE_YYYY
      Begin
      If SFPSUPP:MORTGAGE_TYPE_1 = "B" Or
         SFPSUPP:MORTGAGE_TYPE_1 = "C" Or
         SFPSUPP:MORTGAGE_TYPE_1 = "F" Then
         { L_NUMBER_OF_PAYMENTS = 1 }
      Next SFPSUPP
      End
End

Procedure CREATE_ACCOUNTS_PAYABLE
Begin

l_hold_aps_trans_code  = ""
L_NET_PAYMENTS_BALANCE = L_NET_PAYMENTS

Access ARSCHKSU, Set ARSCHKSU:POLICY_NO = PRSTRANS:POLICY_NO, Using Fourth Index, Approximate
/* grab the very last record in arschksu and reaccess arschksu to use for
   return check
   */
While ARSCHKSU:POLICY_NO = PRSTRANS:POLICY_NO
Begin
    If ARSCHKSU:POLICY_NO = PRSTRANS:POLICY_NO Then
    Begin
         L_HOLD_CHKSU_COMPANY_ID = ARSCHKSU:COMPANY_ID
         L_HOLD_CHKSU_CHECK_REFERENCE = ARSCHKSU:CHECK_REFERENCE
    End
    Next ARSCHKSU
End

Access ARSCHKSU, Set ARSCHKSU:COMPANY_ID      = L_HOLD_CHKSU_COMPANY_ID,
                     ARSCHKSU:CHECK_REFERENCE = L_HOLD_CHKSU_CHECK_REFERENCE

Do GET_ARSCHECK_SUB_CODE
Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = ARSCHKSU:COMPANY_ID, Approximate
L_DEFAULT_RELEASE = ARSCONTROL2:DEFAULT_CHECK_RELEASE

L_UPDATE_FILE = "arscheck - create_accounts_payable"
Write ("%c%s%s",05001,"<014>",L_UPDATE_FILE)

While ARSCHKSU:POLICY_NO = PRSTRANS:POLICY_NO
Begin
If L_NET_PAYMENTS_BALANCE > 0 Then
Begin
    Add ARSCHECK
    Begin
        ARSCHECK:COMPANY_ID          = PRSTRANS:COMPANY_ID
        ARSCHECK:POLICY_NO           = PRSTRANS:POLICY_NO
        ARSCHECK:SUB_CODE            = L_SUB_CODE
        ARSCHECK:ACCOUNT             = SFSCOMPANY:CHECKING_ACCOUNT_NO[2]
        If L_TRANS_CODE_HOLD = 11 Then
        Begin
           ARSCHECK:APS_TRANS_CODE   = "CANCEL"
           l_hold_aps_trans_code     = "CANCEL"
           ARSCHECK:PAYMENT_MESSAGE     = "Return Premium Check for Cancellation"
        End
        Else
        Begin
           ARSCHECK:APS_TRANS_CODE   = "ENDORSE"
           l_hold_aps_trans_code     = "ENDORSE"
           ARSCHECK:PAYMENT_MESSAGE     = "Return Premium Check for Endorsement"
        End
        ARSCHECK:TEN99               = 0
        ARSCHECK:LOSS_PAYEE          = 0
--        ARSCHECK:PAYEE_NAME[1]       = ARSCHKSU:PAYOR_NAME/raw
--        ARSCHECK:PAYEE_NAME[2]       = ARSCHKSU:PAYOR_CARE_OF/raw
        ARSCHECK:PAYEE_NAME[1]       = sfpname:NAME[1]/raw
        ARSCHECK:PAYEE_NAME[2]       = sfpname:name[2]/raw
        ARSCHECK:PAYEE_NAME[3]       = " "
        ARSCHECK:PAYEE_NAME[4]       = " "
        ARSCHECK:PAYEE_NAME[5]       = " "
        ARSCHECK:PAYEE_NAME[6]       = " "
--        ARSCHECK:MAILTO_NAME[1]      = ARSCHKSU:PAYOR_NAME/raw
        ARSCHECK:MAILTO_NAME[1]      = sfpname:NAME[1]/raw
        ARSCHECK:MAILTO_NAME[2]      = " "
        ARSCHECK:MAILTO_NAME[3]      = " "
--        ARSCHECK:ADDRESS[1]          = ARSCHKSU:PAYOR_ADDRESS/raw
        ARSCHECK:ADDRESS[1]          = sfpname:ADDRESS[1]/raw
        ARSCHECK:ADDRESS[2]          = sfpname:address[2]/raw
        ARSCHECK:ADDRESS[3]          = sfpname:address[3]/raw
--        ARSCHECK:CITY                = ARSCHKSU:PAYOr_CITY/raw
--        ARSCHECK:STR_STATE           = ARSCHKSU:PAYOR_STR_STATE/raw
--        ARSCHECK:STR_ZIPCODE         = ARSCHKSU:PAYOR_ZIP_CODE_STR/raw
        ARSCHECK:CITY                = sfpname:CITY/raw
        ARSCHECK:STR_STATE           = sfpname:STR_STATE/raw
        ARSCHECK:STR_ZIPCODE         = sfpname:STR_zipcode/raw
        ARSCHECK:CHECK_DRAFT         = "C"
        ARSCHECK:COMMENTS            = "Check Created by arsup001"
        ARSCHECK:CHECK_AMOUNT        = L_NET_PAYMENTS_BALANCE
        ARSCHECK:CHECK_NO            = " "
        ARSCHECK:CHECK_DATE          = 00.00.0000
        ARSCHECK:RELEASE             = L_DEFAULT_RELEASE
        ARSCHECK:RELEASE_DATE        = 00.00.0000
        ARSCHECK:CHECK_CLEARED       = 0
        ARSCHECK:CHECK_CLEARED_DATE  = 00.00.0000
        ARSCHECK:ENTERING_USER_NAME  = USERNAME
        ARSCHECK:CLEARING_USER_NAME  = " "
        ARSCHECK:RELEASE_USER_NAME   = " "
        ARSCHECK:PAYEE_TYPE[1]       = "I"
        ARSCHECK:AGENT_NO[1]         = PRSTRANS:AGENT_NO
        ARSCHECK:EFF_DATE            = PRSTRANS:EFF_DATE
        ARSCHECK:TIN                 = " "
        ARSCHECK:STATUS_AFTER_CHECK  = " "
        ARSCHECK:MORTGAGE_SUB_CODE   = 0
        ARSCHECK:ENTER_DATE          = TODAYSDATE

        if l_net_payments_balance < arscontrol:waive_amount_debit then
        {
            arscheck:release         = "V"
            arscheck:comments        = "Auto written off"
        }
    End

-- using l_net_payments_balance as a control total
    L_NET_PAYMENTS_BALANCE = L_NET_PAYMENTS_BALANCE - ARSCHKSU:CHECK_AMOUNT

End

      Next ARSCHKSU

End

/* create a/r disbursement here, using prstrans data */

L_CTR              = 1
L_SUB_CODE         = 0
L_RETURN_CHECK_CTR = 0

L_UPDATE_FILE = "arscheck - creating a/r disbursements "
Write ("%c%s%s",05001,"<014>",L_UPDATE_FILE)

Access ARSCONTROL, Set ARSCONTROL:COMPANY_ID = PRSTRANS:COMPANY_ID

If L_NET_PAYMENTS <> 0 Then
Begin

Access ARSBILLING_ALT,
Set ARSBILLING_ALT:COMPANY_ID       = PRSTRANS:COMPANY_ID,
    ARSBILLING_ALT:POLICY_NO        = PRSTRANS:POLICY_NO,
    ARSBILLING_ALT:TRANS_DATE       = PRSTRANS:TRANS_DATE,
    ARSBILLING_ALT:TRANS_EFF        = PRSTRANS:TRANS_EFF,
    ARSBILLING_ALT:TRANS_EXP        = PRSTRANS:TRANS_EXP,
    ARSBILLING_ALT:TRANS_CODE       = ARSCONTROL:DISBURSEMENT_TRANS_CODE,
    ARSBILLING_ALT:LINE_OF_BUSINESS = PRSTRANS:LINE_OF_BUSINESS,
    ARSBILLING_ALT:COMM_RATE        = PRSTRANS:COMM_RATE, Approximate

While ARSBILLING_ALT:COMPANY_ID   = PRSTRANS:COMPANY_ID And
      ARSBILLING_ALT:POLICY_NO    = PRSTRANS:POLICY_NO And
      ARSBILLING_ALT:TRANS_DATE   = PRSTRANS:TRANS_DATE And
      ARSBILLING_ALT:TRANS_EFF    = PRSTRANS:TRANS_EFF And
      ARSBILLING_ALT:TRANS_EXP    = PRSTRANS:TRANS_EXP And
      ARSBILLING_ALT:TRANS_CODE   = ARSCONTROL:DISBURSEMENT_TRANS_CODE And
      ARSBILLING_ALT:LINE_OF_BUSINESS = PRSTRANS:LINE_OF_BUSINESS And
      ARSBILLING_ALT:COMM_RATE        = PRSTRANS:COMM_RATE
      Begin
          L_SUB_CODE = ARSBILLING_ALT:SUB_CODE
          Next ARSBILLING_ALT
      End

L_SUB_CODE = L_SUB_CODE + 10

Access ARSBILLING_ALIAS,
Set ARSBILLING_ALIAS:COMPANY_ID       = PRSTRANS:COMPANY_ID,
    ARSBILLING_ALIAS:POLICY_NO        = PRSTRANS:POLICY_NO,
    ARSBILLING_ALIAS:TRANS_DATE       = PRSTRANS:TRANS_DATE,
    ARSBILLING_ALIAS:TRANS_EFF        = PRSTRANS:TRANS_EFF,
    ARSBILLING_ALIAS:TRANS_EXP        = PRSTRANS:TRANS_EXP,
    ARSBILLING_ALIAS:TRANS_CODE       = ARSCONTROL:DISBURSEMENT_TRANS_CODE,
    ARSBILLING_ALIAS:LINE_OF_BUSINESS = PRSTRANS:LINE_OF_BUSINESS,
    ARSBILLING_ALIAS:COMM_RATE        = PRSTRANS:COMM_RATE,
    ARSBILLING_ALIAS:SUB_CODE         = L_SUB_CODE

   If ARSBILLING_ALIAS:COMPANY_ID   <> PRSTRANS:COMPANY_ID Or
      ARSBILLING_ALIAS:POLICY_NO    <> PRSTRANS:POLICY_NO Or
      ARSBILLING_ALIAS:TRANS_DATE   <> PRSTRANS:TRANS_DATE Or
      ARSBILLING_ALIAS:TRANS_EFF    <> PRSTRANS:TRANS_EFF Or
      ARSBILLING_ALIAS:TRANS_EXP    <> PRSTRANS:TRANS_EXP Or
      ARSBILLING_ALIAS:TRANS_CODE   <> ARSCONTROL:DISBURSEMENT_TRANS_CODE Or
      ARSBILLING_ALIAS:LINE_OF_BUSINESS <> PRSTRANS:LINE_OF_BUSINESS Or
      ARSBILLING_ALIAS:COMM_RATE        <> PRSTRANS:COMM_RATE Or
      ARSBILLING_ALIAS:SUB_CODE         <> L_SUB_CODE Then
      Begin
      Add ARSBILLING_ALIAS
      Begin
      ARSBILLING_ALIAS:COMPANY_ID       = PRSTRANS:COMPANY_ID
      ARSBILLING_ALIAS:POLICY_NO        = PRSTRANS:POLICY_NO
      ARSBILLING_ALIAS:TRANS_DATE       = PRSTRANS:TRANS_DATE
      ARSBILLING_ALIAS:TRANS_EFF        = PRSTRANS:TRANS_EFF
      ARSBILLING_ALIAS:TRANS_EXP        = PRSTRANS:TRANS_EXP
      ARSBILLING_ALIAS:TRANS_CODE       = ARSCONTROL:DISBURSEMENT_TRANS_CODE
      ARSBILLING_ALIAS:LINE_OF_BUSINESS = PRSTRANS:LINE_OF_BUSINESS
      ARSBILLING_ALIAS:COMM_RATE        = PRSTRANS:COMM_RATE
      ARSBILLING_ALIAS:SUB_CODE         = L_SUB_CODE
      ARSBILLING_ALIAS:BILLING_CTR      = L_CTR
      ARSBILLING_ALIAS:RETURN_CHECK_CTR = L_RETURN_CHECK_CTR
      ARSBILLING_ALIAS:LOB_SUBLINE      = PRSTRANS:LOB_SUBLINE
      ARSBILLING_ALIAS:DUE_DATE         = TODAYSDATE
      ARSBILLING_ALIAS:BILL_PLAN        = PRSTRANS:BILL_PLAN
      ARSBILLING_ALIAS:PAYMENT_PLAN     = PRSTRANS:PAYMENT_PLAN
      ARSBILLING_ALIAS:STATUS           = "D"
      ARSBILLING_ALIAS:STATUS_DATE      = TODAYSDATE
      ARSBILLING_ALIAS:BILLED_DATE      = TODAYSDATE
      ARSBILLING_ALIAS:INSTALLMENT_AMOUNT = 0

-- changed 12/8/2008 if it is a cancel the amount should not show in the total amount
--  paid column.
-- 01/19/2009 the T/c 15 should not have the amount paid filled in for the refund

      if arsbilling_alias:trans_code <> 15  then
      {
      if l_hold_aps_trans_code one of "ENDORSE", "OVER" then
       {
        ARSBILLING_ALIAS:TOTAL_AMOUNT_PAID  =  l_net_payments
       }
      else
       {
        ARSBILLING_ALIAS:TOTAL_AMOUNT_PAID  = 0
       }
      }

      if l_trans_code_hold = 15 then
       {
        if l_hold_aps_trans_code  one of  "ENDORSE", "OVER" then
         {
          ARSBILLING_ALIAS:TOTAL_AMOUNT_PAID  = l_net_payments
         }
      else
        {
         ARSBILLING_ALIAS:TOTAL_AMOUNT_PAID  = 0
        }
       }

      ARSBILLING_ALIAS:DISBURSEMENT_AMOUNT = L_NET_PAYMENTS
      ARSBILLING_ALIAS:WRITE_OFF          = 0
      ARSBILLING_ALIAS:WRITE_OFF_AMOUNT   = 0.00
      ARSBILLING_ALIAS:WRITE_OFF_DATE     = 00.00.0000
      ARSBILLING_ALIAS:PRIOR_STATUS       = "D"
      ARSBILLING_ALIAS:PRIOR_STATUS_DATE  = TODAYSDATE
      ARSBILLING_ALIAS:PRIOR_TRANS_CODE   = ARSCONTROL:DISBURSEMENT_TRANS_CODE
      ARSBILLING_ALIAS:REINSTATED         = "N"
      ARSBILLING_ALIAS:USER               = USERNAME
      ARSBILLING_ALIAS:USER_CONSOLE       = TERMINAL
      ARSBILLING_ALIAS:POL_YEAR           = PRSTRANS:POL_YEAR
      ARSBILLING_ALIAS:END_SEQUENCE       = PRSTRANS:END_SEQUENCE
/*
write ("<014>")
write ("%c%s%n",2001,"l_net_payments   = ",l_net_payments)
write ("%c%s%n",3001,"arscontr waive amt debt = ",arscontrol:waive_amount_debit)
Read (23,1,"Press Enter to Continue ",L_ENTER,1)
      if l_net_payments > 0 and
         l_net_payments < arscontrol:waive_amount_debit then
      {
Read (23,1,"in creating arsbilling disbursements line 3400 ------ Press Enter to Continue ",L_ENTER,1)

           arsbilling_alias:write_off_amount = l_net_payments
           arsbilling_alias:write_off        = 1
           arsbilling_alias:write_off_date   = todaysdate
      }
*/
      End -- end of add

      End -- end of access

-- Write ("%c%s%",13001,"X'int ARSBILLING_ALIAS")

End -- end of checking for l_net_payments <> 0

End -- end of procedure

Procedure CREATE_PRIOR_YEAR_INTERNAL_CHECK
Begin

L_UPDATE_FILE = "csexec_application"
I_CSEXEC_APPLICATION = "CHECK_REFERENCE"
Include "sfscsexec.pro"
L_UPDATE_FILE = "check_for_cx_return_premiums 2"
L_CHECK_REFERENCE = I_CSEXEC_NUMBER

Access ARSCHKSU, Set ARSCHKSU:COMPANY_ID      = PRSTRANS:COMPANY_ID,
                     ARSCHKSU:CHECK_REFERENCE = L_CHECK_REFERENCE, Exact

If ARSCHKSU:COMPANY_ID      <> PRSTRANS:COMPANY_ID And
   ARSCHKSU:CHECK_REFERENCE <> L_CHECK_REFERENCE Then -- new record
   Begin
   Add ARSCHKSU
   Begin
       ARSCHKSU:COMPANY_ID          = PRSTRANS:COMPANY_ID
       ARSCHKSU:CHECK_REFERENCE     = L_CHECK_REFERENCE
       ARSCHKSU:POLICY_NO           = PRSTRANS:POLICY_NO
       ARSCHKSU:AGENT_NO            = SFSAGENT:AGENT_NO
       ARSCHKSU:BANK_NO             = "DO NOT DEPOSIT"
       ARSCHKSU:TRANS_DATE          = TODAYSDATE
       ARSCHKSU:POSTED_DATE         = 00.00.0000
       ARSCHKSU:CHECK_NO            = "Prior Year Disbursement"
       ARSCHKSU:CHECK_AMOUNT        = L_NET_PAYMENTS_BALANCE
       ARSCHKSU:COMMENTS            = "Not A check - Reinstatement of A/P"
       ARSCHKSU:PAYOR_NAME          = SFSCOMPANY:NAME[1]
       ARSCHKSU:PAYOR_CARE_OF       = SFSCOMPANY:NAME[2]
       ARSCHKSU:PAYOR_ADDRESS       = SFSCOMPANY:ADDRESS[1]
       ARSCHKSU:PAYOR_CITY          = SFSCOMPANY:CITY
       ARSCHKSU:PAYOR_STR_STATE     = SFSCOMPANY:STR_STATE
       ARSCHKSU:PAYOR_ZIP_CODE_STR  = SFSCOMPANY:STR_ZIPCODE
       ARSCHKSU:PAYOR_TYPE          = "O" -- other
       ARSCHKSU:DEPOSIT_DATE        = 00.00.0000
       ARSCHKSU:DISPOSITION         = "OPEN"
       ARSCHKSU:MONEY_ORDER         = "N"
       ARSCHKSU:BALANCE             = ARSCHKSU:CHECK_AMOUNT
       ARSCHKSU:CHECK_HOLD          = "N"
       ARSCHKSU:USER                = USERNAME
       ARSCHKSU:USER_CONSOLE        = CONSOLE
       ARSCHKSU:ENTER_TIME          = SYSTEMTIME
       ARSCHKSU:ENTER_DATE          = SYSTEMDATE
       ARSCHKSU:QUOTE_NO            = 0
       ARSCHKSU:DEPOSIT_PREMIUM     = 0
       ARSCHKSU:MORTGAGE_ID         = " "
       ARSCHKSU:CREDIT_INSTALLMENT_CHAGE = 0
       ARSCHKSU:CHECK_PAYS_TOTAL    = 0
       ARSCHKSU:INTERNAL_CHECK      = 1 -- this is done so no deposit slip is created
   End -- end of add

   End -- end of checking for record exists

End -- end of procedure create prior period internal check

Procedure APPLY_STATUS_UPDATE
Begin
Access ARSBILLING, Set ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID,
                       ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID And
      ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO
        Begin

-- if the status is open or billed update with a paid status
-- this will prevent the system from creating future notices
-- since the policy is paid off

        If ARSBILLING:STATUS One Of "O", "B" And
           ARSBILLING:POL_YEAR = PRSTRANS:POL_YEAR  and
           arsbilling:trans_code one of 15 and
           arsbilling:installment_amount < 0 Then
--           arsbilling:trans_code not one of 13, 23 Then
            Begin
            Access ARSBILLING_ALIAS,
      Set ARSBILLING_ALIAS:COMPANY_ID       = ARSBILLING:COMPANY_ID,
          ARSBILLING_ALIAS:POLICY_NO        = ARSBILLING:POLICY_NO,
          ARSBILLING_ALIAS:TRANS_DATE       = ARSBILLING:TRANS_DATE,
          ARSBILLING_ALIAS:TRANS_EFF        = ARSBILLING:TRANS_EFF,
          ARSBILLING_ALIAS:TRANS_EXP        = ARSBILLING:TRANS_EXP,
          ARSBILLING_ALIAS:TRANS_CODE       = ARSBILLING:TRANS_CODE,
          ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS,
          ARSBILLING_ALIAS:COMM_RATE        = ARSBILLING:COMM_RATE,
          ARSBILLING_ALIAS:SUB_CODE         = ARSBILLING:SUB_CODE,
          ARSBILLING_ALIAS:BILLING_CTR      = ARSBILLING:BILLING_CTR,
          ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR

      If ARSBILLING_ALIAS:COMPANY_ID       = ARSBILLING:COMPANY_ID And
         ARSBILLING_ALIAS:POLICY_NO        = ARSBILLING:POLICY_NO And
         ARSBILLING_ALIAS:TRANS_DATE       = ARSBILLING:TRANS_DATE And
         ARSBILLING_ALIAS:TRANS_EFF        = ARSBILLING:TRANS_EFF And
         ARSBILLING_ALIAS:TRANS_EXP        = ARSBILLING:TRANS_EXP And
         ARSBILLING_ALIAS:TRANS_CODE       = ARSBILLING:TRANS_CODE And
         ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS And
         ARSBILLING_ALIAS:COMM_RATE        = ARSBILLING:COMM_RATE And
         ARSBILLING_ALIAS:SUB_CODE         = ARSBILLING:SUB_CODE And
         ARSBILLING_ALIAS:BILLING_CTR      = ARSBILLING:BILLING_CTR And
         ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR Then
         Begin
         Change ARSBILLING_ALIAS
         Begin
           if arsbilling:bill_plan one of "DB" then
                 ARSBILLING_ALIAS:STATUS = "P" -- paid
                 arsbilling_alias:total_amount_paid = arsbilling_alias:installment_amount
         End

         End

         End -- end of "O","B" checking

        Next ARSBILLING
        End -- end of while

End -- end of procedure

Procedure GET_ARSCHECK_SUB_CODE
Begin
L_UPDATE_FILE = "arscheck - get_arscheck_sub_code "
L_SUB_CODE = 0

Access ARSCHECK_ALT, Set ARSCHECK_ALT:COMPANY_ID = PRSTRANS:COMPANY_ID,
                         ARSCHECK_ALT:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While ARSCHECK_ALT:COMPANY_ID = PRSTRANS:COMPANY_ID And
      ARSCHECK_ALT:POLICY_NO  = PRSTRANS:POLICY_NO
        Begin
        L_SUB_CODE = ARSCHECK_ALT:SUB_CODE + 10

        Next ARSCHECK_ALT
        End

End -- end of get_arscheck_sub_code

/*  new routine as of 10/25/2001 to process due dates based on current
    due dates on the arsbilling file
*/


Procedure ARSBILLING_PERIODS
Begin
l_lob_subline_first_time = "Y"

L_HIT                   = "N"
L_PERIODS               = 0
L_NET_AMOUNT_DUE        = 0.00
L_ENDORSEMENT_TRANS_EXP = 00.00.0000
L_HOLD_SUBLINE          = ""

-- align prior endorsements with current period
/* july 14, 2003 */
L_HOLD_LAST_BILLING_CTR    = 0
L_HOLD_LAST_DUE_DATE       = 00.00.0000
L_HOLD_LAST_BILLING_STATUS = ""
L_HOLD_PAYMENT_PLAN        = 0 -- use this to force correct payment plan
                               -- since on decrease endorsements it seems as
                               -- if the payment plan in sfpname and prstrans
                               -- is being forced to 1

For L_CTR = 1 To 13
    Begin
    L_HOLD_DUE_DATE[L_CTR] = 00.00.0000
    L_DUE_DATE_STATUS[L_CTR] = ""
    End

Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = PRSTRANS:POLICY_NO

Access SFPNAME, Set SFPNAME:POLICY_NO    = PRSTRANS:POLICY_NO,
                    SFPNAME:POL_YEAR     = SFPCURRENT:POL_YEAR,
                    SFPNAME:END_SEQUENCE = SFPCURRENT:END_SEQUENCE

L_ENDORSEMENT_TRANS_EXP = SFPNAME:EXP_DATE

Access ARSBILLING, Set ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID,
                       ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID And
      ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO
        Begin
      /* added 12/12/2002 - for trans code 13 */
        L_NET_AMOUNT_DUE = L_NET_AMOUNT_DUE +
                           (ARSBILLING:INSTALLMENT_AMOUNT -
                           (ARSBILLING:TOTAL_AMOUNT_PAID +
                           ARSBILLING:WRITE_OFF_AMOUNT))

         if l_lob_subline_first_time = "Y" and
            arsbilling:trans_code one of 10, 14, 16 and
            arsbilling:status one of "B", "O"  then
          {
           l_use_subline = arsbilling:lob_subline
           l_lob_subline_first_time = "N"
--           l_subline_ctr = 1
          }

--        If (ARSBILLING:TRANS_EXP = L_ENDORSEMENT_TRANS_EXP And
-- to use the main lob subline when checking if it is paid when a partial payment is done
-- on the 10 or 14 it needs to count that bucket if partial paid
--write ("<014>")
--write ("%c%s%s",2001,"arsbilling:lob_subline     = ",arsbilling:lob_subline)
--write ("%c%s%n",3001,"arsbilling:trans code      = ",arsbilling:trans_code)
--write ("%c%s%d",4001,"arsbilling:due date        = ",arsbilling:due_date)
--write ("%c%s%s",5001,"arsbilling:status          = ",arsbilling:status)
--write ("%c%s%s",6001,"l use_subline              = ",l_use_subline)
--Read (23,1,"Press Enter to Continue ",L_ENTER,1)

    if arsbilling:lob_subline  = l_use_subline and
       ARSBILLING:TRANS_EXP = PRSTRANS:TRANS_EXP And
       ARSBILLING:TRANS_CODE One Of 10, 14 and
       arsbilling:status not one of "C" then
        {


        if (ARSBILLING:TRANS_EXP = prstrans:TRANS_EXP And
           ARSBILLING:TRANS_CODE One Of 10, 14 And
           L_HOLD_DUE_DATE[ARSBILLING:BILLING_CTR] = 00.00.0000 And
           L_DUE_DATE_STATUS[ARSBILLING:BILLING_CTR] = "") Then -- annual transactions only
            Begin
                L_HIT = "Y"
                L_HOLD_DUE_DATE[ARSBILLING:BILLING_CTR]    = ARSBILLING:DUE_DATE
                L_DUE_DATE_STATUS[ARSBILLING:BILLING_CTR]  = ARSBILLING:STATUS
                L_HOLD_PAYMENT_PLAN                        = ARSBILLING:PAYMENT_PLAN
                L_NUMBER_OF_PAYMENTS                       = arspayplan:number_of_payments
                l_hold_billed_date[arsbilling:billing_ctr] = arsbilling:billed_date

                /* july 14, 2003 */
                L_HOLD_LAST_BILLING_CTR                    = ARSBILLING:BILLING_CTR
                L_HOLD_LAST_BILLING_STATUS                 = ARSBILLING:STATUS
                L_HOLD_LAST_DUE_DATE                       = ARSBILLING:DUE_DATE
--write ("<014>")
--write ("%c%s%d",2001,"l_hold_due_date[arsbilling:billing_ctr]       = ",L_HOLD_DUE_DATE[ARSBILLING:BILLING_CTR])
--write ("%c%s%s",3001,"l_due_date_status[arsbilling:billing_ctr]     = ",L_DUE_DATE_status[ARSBILLING:BILLING_CTR])
--Read (23,1,"top   Press Enter to Continue ",L_ENTER,1)

                If L_HOLD_SUBLINE = "" Then
                    Begin
                    L_HOLD_SUBLINE = ARSBILLING:LOB_SUBLINE
                    End

-- it must only look for "O" because of 10 pays can have the first few due dates lumped together  we only
--  want the 12 endorsements to use the status O due dates.
--                If ((L_DUE_DATE_STATUS[ARSBILLING:BILLING_CTR] one of "B", "O" And
                If ((L_DUE_DATE_STATUS[ARSBILLING:BILLING_CTR] one of  "O" And
                   L_HOLD_SUBLINE  = ARSBILLING:LOB_SUBLINE)) then
                    Begin
                    L_PERIODS = L_PERIODS + 1
                    End
            End

          l_hold_total_amount_paid = arsbilling:total_amount_paid +
                                   l_hold_total_amount_paid
        }
        else
         if arsbilling:lob_subline  = l_use_subline and
            ARSBILLING:TRANS_EXP = PRSTRANS:TRANS_EXP And
            ARSBILLING:TRANS_CODE One Of 16 and
            arsbilling:status not one of "C" then
            {
             if (ARSBILLING:TRANS_EXP = prstrans:TRANS_EXP And
                ARSBILLING:TRANS_CODE One Of 16 And
                L_HOLD_DUE_DATE[ARSBILLING:BILLING_CTR] = 00.00.0000 And
                L_DUE_DATE_STATUS[ARSBILLIng:biLLING_CTR] = "") Then -- annual transactions only
                   Begin
                        L_HIT = "Y"
                        L_HOLD_DUE_DATE[ARSBILLING:BILLING_CTR]    = ARSBILLING:DUE_DATE
                        L_DUE_DATE_STATUS[ARSBILLING:BILLING_CTR]  = ARSBILLING:STATUS
                        L_HOLD_PAYMENT_PLAN                        = ARSBILLING:PAYMENT_PLAN
                        L_NUMBER_OF_PAYMENTS                       = arspayplan:number_of_payments
                        l_hold_billed_date[arsbilling:billing_ctr] = arsbilling:billed_date

                        /* july 14, 2003 */
                        L_HOLD_LAST_BILLING_CTR                    = ARSBILLING:BILLING_CTR
                        L_HOLD_LAST_BILLING_STATUS                 = ARSBILLING:STATUS
                        L_HOLD_LAST_DUE_DATE                       = ARSBILLING:DUE_DATE

                        If L_HOLD_SUBLINE = "" Then
                            Begin
                            L_HOLD_SUBLINE = ARSBILLING:LOB_SUBLINE
                            End

                        If ((L_DUE_DATE_STATUS[ARSBILLING:BILLING_CTR] one of "O", "B" And
                           L_HOLD_SUBLINE  = ARSBILLING:LOB_SUBLINE)) then
                            Begin
                            L_PERIODS = L_PERIODS + 1
                            End
                   End

            l_hold_total_amount_paid = arsbilling:total_amount_paid +
                                   l_hold_total_amount_paid
            }

      Next ARSBILLING
      End

End -- end of procedure

Procedure CHECK_FOR_CX_BALANCE
Begin

L_CX_BILLED_TRANS = 25

L_NET_PREMIUMS       = 0.00
L_PREMIUMS           = 0.00
L_INSTALLMENT_AMOUNT = 0.00
L_SUR_CHARGE         = 0.00
L_CX_PREMIUMS        = 0.00
L_CX_INSTALLMENTS    = 0.00
L_CX_SUR_CHARGE      = 0.00
L_CTR                = 0
L_BILLING_CTR        = 0
L_SUB_CODE           = 0
L_NET_AMOUNT         = 0
L_CX_BALANCE_DUE_PAID_OFFSET   = 0.00

Access ARSBILLING, Set ARSBILLING:COMPANY_ID = L_HOLD_COMPANY_ID,
                       ARSBILLING:POLICY_NO  = L_HOLD_POLICY_NO, Generic

While ARSBILLING:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSBILLING:POLICY_NO  = L_HOLD_POLICY_NO
      Begin

      if arsbilling:trans_exp = prstrans:exp_date then
       {
          L_NET_AMOUNT = (ARSBILLING:INSTALLMENT_AMOUNT - ARSBILLING:TOTAL_AMOUNT_PAID
                         - ARSBILLING:WRITE_OFF_AMOUNT + ARSBILLING:DISBURSEMENT_AMOUNT)

--write ("<014>")
--write ("%c%s%n",2001,"ARSBILLING:TRANS_CODE   = ",ARSBILLING:TRANS_CODE)
--write ("%c%s%n",3001,"l_net_amount            = ",l_net_amount)
--Read (23,1," at l net amount calc -- Press Enter to Continue ",L_ENTER,1)

              Switch(ARSBILLING:TRANS_CODE)
              Case 10,12,13,14,15,16,17,25,26,60,62,63,64 : L_PREMIUMS = L_PREMIUMS + L_NET_AMOUNT
              Case 11                   : begin
--                                           if arsbilling:trans_eff = l_hold_trans_eff and
                                             if arsbilling:trans_exp = l_hold_trans_exp then
                                           {
                                            L_CX_PREMIUMS = L_CX_PREMIUMS + L_NET_AMOUNT
                                           }
                                          end
              Case 18,68,50                   : L_INSTALLMENT_AMOUNT = L_INSTALLMENT_AMOUNT + L_NET_AMOUNT
              Case 19,22,23,69             : L_SUR_CHARGE = L_SUR_CHARGE + L_NET_AMOUNT
              Case 28                      : L_CX_INSTALLMENTS = L_CX_INSTALLMENTS + L_NET_AMOUNT
              Case 29                      : L_CX_SUR_CHARGE = L_CX_SUR_CHARGE + L_NET_AMOUNT
              End

          L_CX_BALANCE_DUE_PAID_OFFSET = L_CX_BALANCE_DUE_PAID_OFFSET + ARSBILLING:TOTAL_AMOUNT_PAID
          L_BILLING_CTR = L_BILLING_CTR + 1
          L_SUB_CODE = ARSBILLING:SUB_CODE
       }
      Next ARSBILLING
      End

L_INSTALLMENT_CHARGE = L_INSTALLMENT_AMOUNT
/*
write ("<014>")
write ("%c%s%n",2001,"L_PREMIUMS            = ",L_PREMIUMS)
write ("%c%s%n",3001,"L_CX_PREMIUMS         = ",L_CX_PREMIUMS)
write ("%c%s%n",4001,"L_INSTALLMENT_CHARGE  = ",L_INSTALLMENT_CHARGE)
write ("%c%s%n",5001," L_SUR_CHARGE         = ", L_SUR_CHARGE)
write ("%c%s%n",6001," L_CX_INSTALLMENTS    = ",L_CX_INSTALLMENTS)
write ("%c%s%n",7001,"L_CX_SUR_CHARGE       = ",L_CX_SUR_CHARGE)
write ("%c%s%n",8001,"L_NET_PREMIUMS        = ",L_NET_PREMIUMS)
Read (23,1,"at cx balance Press Enter to Continue ",L_ENTER,1)
*/

L_NET_PREMIUMS = L_PREMIUMS + L_CX_PREMIUMS + L_INSTALLMENT_CHARGE +
                 L_SUR_CHARGE + L_CX_INSTALLMENTS + L_CX_SUR_CHARGE

If L_NET_PREMIUMS > 0 Then
Begin

L_SUB_CODE = L_SUB_CODE  + 10

Access ARSBILLING, Set ARSBILLING:COMPANY_ID       = PRSTRANS:COMPANY_ID,
                       ARSBILLING:POLICY_NO        = PRSTRANS:POLICY_NO,
                       ARSBILLING:TRANS_DATE       = PRSTRANS:TRANS_DATE,
                       ARSBILLING:TRANS_EFF        = PRSTRANS:TRANS_EFF,
                       ARSBILLING:TRANS_EXP        = PRSTRANS:TRANS_EXP,
                       ARSBILLING:TRANS_CODE       = L_CX_BILLED_TRANS,
                       ARSBILLING:LINE_OF_BUSINESS = PRSTRANS:LINE_OF_BUSINESS,
                       ARSBILLING:COMM_RATE        = PRSTRANS:COMM_RATE,
                       ARSBILLING:SUB_CODE         = L_SUB_CODE,
                       ARSBILLING:BILLING_CTR      = L_CTR,
                       ARSBILLING:RETURN_CHECK_CTR  = L_RETURN_CHECK_CTR,Approximate

If ARSBILLING:COMPANY_ID       <> PRSTRANS:COMPANY_ID Or
   ARSBILLING:POLICY_NO        <> PRSTRANS:POLICY_NO Or
   ARSBILLING:TRANS_DATE       <> PRSTRANS:TRANS_DATE Or
   ARSBILLING:TRANS_EFF        <> PRSTRANS:TRANS_EFF Or
   ARSBILLING:TRANS_EXP        <> PRSTRANS:TRANS_EXP Or
   ARSBILLING:TRANS_CODE       <> L_CX_BILLED_TRANS Or
   ARSBILLING:LINE_OF_BUSINESS <> PRSTRANS:LINE_OF_BUSINESS Or
   ARSBILLING:COMM_RATE        <> PRSTRANS:COMM_RATE Or
   ARSBILLING:SUB_CODE         <> L_SUB_CODE Or
   ARSBILLING:BILLING_CTR      <> L_CTR Or
   ARSBILLING:RETURN_CHECK_CTR <> L_RETURN_CHECK_CTR Then -- record does not exist
   Begin
   Add ARSBILLING
       Begin
            ARSBILLING:COMPANY_ID           =    PRSTRANS:COMPANY_ID
            ARSBILLING:POLICY_NO            =    PRSTRANS:POLICY_NO
            ARSBILLING:TRANS_DATE           =    PRSTRANS:TRANS_DATE
            ARSBILLING:TRANS_EFF            =    PRSTRANS:TRANS_EFF
            ARSBILLING:TRANS_EXP            =    PRSTRANS:TRANS_EXP
            ARSBILLING:TRANS_CODE           =    L_CX_BILLED_TRANS
            ARSBILLING:LINE_OF_BUSINESS     =    PRSTRANS:LINE_OF_BUSINESS
            ARSBILLING:AGENT_NO             =    PRSTRANS:AGENT_NO
            ARSBILLING:COMM_RATE            =    PRSTRANS:COMM_RATE
            ARSBILLING:SUB_CODE             =    L_SUB_CODE
            ARSBILLING:BILLING_CTR          =    999
            ARSBILLING:RETURN_CHECK_CTR     =    L_RETURN_CHECK_CTR
            ARSBILLING:LOB_SUBLINE          =    PRSTRANS:LOB_SUBLINE

/* July 2007 - set due date to 00.00.0000 for Account current new policy or cancellation  */
            If (ARSMASTER:TRANS_CODE One Of 10, 11 and
               arsmaster:bill_plan = "AC") Then
                Begin
                  arsbilling:due_date   = 00.00.0000
                end
            else
                begin
                  ARSBILLING:DUE_DATE       = L_DUE_DATE[1]
                end

--            ARSBILLING:DUE_DATE             =    L_DUE_DATE[1]
            ARSBILLING:BILL_PLAN            =    PRSTRANS:BILL_PLAN
            ARSBILLING:PAYMENT_PLAN         =    1
            ARSBILLING:STATUS               =    "B" -- billed
            ARSBILLING:STATUS_DATE          =    PRSTRANS:TRANS_DATE
            ARSBILLING:BILLED_DATE          =    PRSTRANS:TRANS_DATE
            ARSBILLING:INSTALLMENT_AMOUNT   =    L_NET_PREMIUMS
            ARSBILLING:TOTAL_AMOUNT_PAID    =    0.00
            ARSBILLING:PAYMENT_OFFSET       =    L_CX_BALANCE_DUE_PAID_OFFSET -- added 10/17/2003
            ARSBILLING:WRITE_OFF            =    0
            ARSBILLING:WRITE_OFF_AMOUNT     =    0.00
            ARSBILLING:WRITE_OFF_DATE       =    00.00.0000
            ARSBILLING:PRIOR_STATUS         =    ARSBILLING:STATUS
            ARSBILLING:PRIOR_STATUS_DATE    =    ARSBILLING:STATUS_DATE
            ARSBILLING:USER                 =    USERNAME
            ARSBILLING:REINSTATED           =    "N"
            ARSBILLING:POL_YEAR             =    PRSTRANS:POL_YEAR
            ARSBILLING:END_SEQUENCE         =    PRSTRANS:END_SEQUENCE
            End
        End

End

End

Procedure CHECK_FOR_CX_REINSTATEMENT
Begin

/* procedure offsets cx balance due transactions only */

L_CX_BALANCE_DUE_PAID = 0.00 -- house cleaning
L_CX_BILLED_TRANS     = 26   -- reversal of the cx balance due transaction

Access ARSBILLING, Set ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID,
                       ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID And
      ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO
      Begin
          If (ARSBILLING:TRANS_CODE = 25 And
              ARSBILLING:STATUS Not One Of  "X", "R") Or
              L_OFFSET_PAYMENT One Of "Y" Then
      Begin

/* add the 26 trans code to offset the 25 - do not reverse sign the 25 */
Access ARSBILLING_ALIAS, Set ARSBILLING_ALIAS:COMPANY_ID = ARSBILLING:COMPANY_ID,
                             ARSBILLING_ALIAS:POLICY_NO  = ARSBILLING:POLICY_NO,
                             ARSBILLING_ALIAS:TRANS_DATE = ARSBILLING:TRANS_DATE,
                             ARSBILLING_ALIAS:TRANS_EFF = ARSBILLING:TRANS_EFF,
                             ARSBILLING_ALIAS:TRANS_EXP = ARSBILLING:TRANS_EXP,
                             ARSBILLING_ALIAS:TRANS_CODE = ARSBILLING:TRANS_CODE,
                             ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS,
                             ARSBILLING_ALIAS:COMM_RATE = ARSBILLING:COMM_RATE,
                             ARSBILLING_ALIAS:SUB_CODE = ARSBILLING:SUB_CODE,
                             ARSBILLING_ALIAS:BILLING_CTR = ARSBILLING:BILLING_CTR,
                             ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR

If ARSBILLING_ALIAS:COMPANY_ID = ARSBILLING:COMPANY_ID And
   ARSBILLING_ALIAS:POLICY_NO  = ARSBILLING:POLICY_NO And
   ARSBILLING_ALIAS:TRANS_DATE = ARSBILLING:TRANS_DATE And
   ARSBILLING_ALIAS:TRANS_EFF = ARSBILLING:TRANS_EFF And
   ARSBILLING_ALIAS:TRANS_EXP = ARSBILLING:TRANS_EXP And
   ARSBILLING_ALIAS:TRANS_CODE = ARSBILLING:TRANS_CODE And
   ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS And
   ARSBILLING_ALIAS:COMM_RATE = ARSBILLING:COMM_RATE And
   ARSBILLING_ALIAS:SUB_CODE = ARSBILLING:SUB_CODE And
   ARSBILLING_ALIAS:BILLING_CTR = ARSBILLING:BILLING_CTR And
   ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR
   Then
   Begin
   Add ARSBILLING_ALIAS
   Begin
       ARSBILLING_ALIAS:COMPANY_ID           =    ARSBILLING:COMPANY_ID
       ARSBILLING_ALIAS:POLICY_NO            =    ARSBILLING:POLICY_NO
       ARSBILLING_ALIAS:TRANS_DATE           =    ARSBILLING:TRANS_DATE
       ARSBILLING_ALIAS:TRANS_EFF            =    ARSBILLING:TRANS_EFF
       ARSBILLING_ALIAS:TRANS_EXP            =    ARSBILLING:TRANS_EXP
       ARSBILLING_ALIAS:TRANS_CODE           =    L_CX_BILLED_TRANS
       ARSBILLING_ALIAS:LINE_OF_BUSINESS     =    ARSBILLING:LINE_OF_BUSINESS
       ARSBILLING_ALIAS:AGENT_NO             =    ARSBILLING:AGENT_NO
       ARSBILLING_ALIAS:COMM_RATE            =    ARSBILLING:COMM_RATE
       ARSBILLING_ALIAS:SUB_CODE             =    ARSBILLING:SUB_CODE
       ARSBILLING_ALIAS:BILLING_CTR          =    ARSBILLING:BILLING_CTR
       ARSBILLING_ALIAS:RETURN_CHECK_CTR     =    ARSBILLING:RETURN_CHECK_CTR
       ARSBILLING_ALIAS:LOB_SUBLINE          =    ARSBILLING:LOB_SUBLINE
       ARSBILLING_ALIAS:DUE_DATE             =    ARSBILLING:DUE_DATE
       ARSBILLING_ALIAS:BILL_PLAN            =    ARSBILLING:BILL_PLAN
       ARSBILLING_ALIAS:PAYMENT_PLAN         =    ARSBILLING:PAYMENT_PLAN
       ARSBILLING_ALIAS:STATUS               =    "Z" -- billed
       ARSBILLING_ALIAS:STATUS_DATE          =    ARSBILLING:TRANS_DATE
       ARSBILLING_ALIAS:BILLED_DATE          =    ARSBILLING:TRANS_DATE
--       ARSBILLING_ALIAS:INSTALLMENT_AMOUNT   =    (ARSBILLING:INSTALLMENT_AMOUNT + ARSBILLING:PAYMENT_OFFSET) * -1
       ARSBILLING_ALIAS:INSTALLMENT_AMOUNT   = ARSBILLING:INSTALLMENT_AMOUNT * -1
       ARSBILLING_ALIAS:TOTAL_AMOUNT_PAID    =    ARSBILLING:TOTAL_AMOUNT_PAID
       ARSBILLING_ALIAS:PAYMENT_OFFSET       =    ARSBILLING:PAYMENT_OFFSET
       ARSBILLING_ALIAS:WRITE_OFF            =    ARSBILLING:WRITE_OFF
       ARSBILLING_ALIAS:WRITE_OFF_AMOUNT     =    ARSBILLING:WRITE_OFF_AMOUNT
       ARSBILLING_ALIAS:WRITE_OFF_DATE       =    ARSBILLING:WRITE_OFF_DATE
       ARSBILLING_ALIAS:PRIOR_STATUS         =    ARSBILLING:STATUS
       ARSBILLING_ALIAS:PRIOR_STATUS_DATE    =    ARSBILLING:STATUS_DATE
       ARSBILLING_ALIAS:REINSTATED           =    ARSBILLING:REINSTATED
   -- only do this if the record is trying to offset payment amount for reinstated premiums -- 10/17/2003
       End -- end of add

       End -- end of record does not exist

Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID       = ARSBILLING:COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO        = ARSBILLING:POLICY_NO,
                           ARSBILLING_ALT:TRANS_DATE       = ARSBILLING:TRANS_DATE,
                           ARSBILLING_ALT:TRANS_EFF        = ARSBILLING:TRANS_EFF,
                           ARSBILLING_ALT:TRANS_EXP        = ARSBILLING:TRANS_EXP,
                           ARSBILLING_ALT:TRANS_CODE       = ARSBILLING:TRANS_CODE,
                           ARSBILLING_ALT:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS,
                           ARSBILLING_ALT:COMM_RATE        = ARSBILLING:COMM_RATE,
                           ARSBILLING_ALT:SUB_CODE         = ARSBILLING:SUB_CODE,
                           ARSBILLING_ALT:BILLING_CTR      = ARSBILLING:BILLING_CTR,
                           ARSBILLING_ALT:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR

If ARSBILLING_ALT:COMPANY_ID       = ARSBILLING:COMPANY_ID And
   ARSBILLING_ALT:POLICY_NO        = ARSBILLING:POLICY_NO And
   ARSBILLING_ALT:TRANS_DATE       = ARSBILLING:TRANS_DATE And
   ARSBILLING_ALT:TRANS_EFF        = ARSBILLING:TRANS_EFF And
   ARSBILLING_ALT:TRANS_EXP        = ARSBILLING:TRANS_EXP And
   ARSBILLING_ALT:TRANS_CODE       = ARSBILLING:TRANS_CODE And
   ARSBILLING_ALT:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS And
   ARSBILLING_ALT:COMM_RATE        = ARSBILLING:COMM_RATE And
   ARSBILLING_ALT:SUB_CODE         = ARSBILLING:SUB_CODE And
   ARSBILLING_ALT:BILLING_CTR      = ARSBILLING:BILLING_CTR And
   ARSBILLING_ALT:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR Then
   {
    Change ARSBILLING_ALT
     {
       L_TEMP_REINSTATEMENT_AMOUNT = ARSBILLING_ALT:INSTALLMENT_AMOUNT
       ARSBILLING_ALT:STATUS            = "B" -- reinstated billing
     }
   }
 End

 Next ARSBILLING

End -- end of while

End

Procedure CREATE_INSTALLMENT_CHARGE
Begin

L_TRANS_CODE = 18 -- installment charge trans code
L_HIT_BILLING = "N"

Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = L_HOLD_COMPANY_ID,
                       ARSPAYPLAN:LINE_OF_BUSINESS = L_HOLD_LINE_OF_BUSINESS,
                       ARSPAYPLAN:PAYMENT_PLAN     = L_HOLD_PAYMENT_PLAN

Access ARSBILLING_ALIAS, Set ARSBILLING_ALIAS:COMPANY_ID = L_HOLD_COMPANY_ID,
                             ARSBILLING_ALIAS:POLICY_NO  = L_HOLD_POLICY_NO,
                             ARSBILLING_ALIAS:TRANS_DATE = L_HOLD_TRANS_DATE,
                             ARSBILLING_ALIAS:TRANS_EFF  = L_HOLD_TRANS_EFF,
                             ARSBILLING_ALIAS:TRANS_EXP  = L_HOLD_TRANS_EXP, Approximate

While ARSBILLING_ALIAS:COMPANY_ID = L_HOLD_COMPANY_ID And
      ARSBILLING_ALIAS:POLICY_NO  = L_HOLD_POLICY_NO And
      ARSBILLING_ALIAS:TRANS_DATE = L_HOLD_TRANS_DATE And
      ARSBILLING_ALIAS:TRANS_EFF  = L_HOLD_TRANS_EFF And
      ARSBILLING_ALIAS:TRANS_EXP  = L_HOLD_TRANS_EXP And
      L_HIT_BILLING              <> "Y"
      Begin

      Add ARSBILLING_ALT
      Begin
       ARSBILLING_ALT:COMPANY_ID              = ARSBILLING_ALIAS:COMPANY_ID
       ARSBILLING_ALT:POLICY_NO               = ARSBILLING_ALIAS:POLICY_NO
       ARSBILLING_ALT:TRANS_DATE              = TODAYSDATE
       ARSBILLING_ALT:TRANS_EFF               = ARSBILLING_ALIAS:TRANS_EFF
       ARSBILLING_ALT:TRANS_EXP               = ARSBILLING_ALIAS:TRANS_EXP
       ARSBILLING_ALT:TRANS_CODE              = L_TRANS_CODE
       ARSBILLING_ALT:LINE_OF_BUSINESS        = ARSBILLING_ALIAS:LINE_OF_BUSINESS
       ARSBILLING_ALT:COMM_RATE               = 0.00
       ARSBILLING_ALT:SUB_CODE                = ARSBILLING_ALIAS:SUB_CODE
       ARSBILLING_ALT:BILLING_CTR             = ARSBILLING_ALIAS:BILLING_CTR
       ARSBILLING_ALT:RETURN_CHECK_CTR        = ARSBILLING_ALIAS:RETURN_CHECK_CTR
       ARSBILLING_ALT:AGENT_NO                = ARSBILLING_ALIAS:AGENT_NO
       ARSBILLING_ALT:BILLED_DATE             = TODAYSDATE

       ARSBILLING_ALT:DUE_DATE                = ARSBILLING_ALIAS:DUE_DATE
       ARSBILLING_ALT:INSTALLMENT_AMOUNT      = ARSPAYPLAN:INSTALLMENT_CHARGE_RATE
       ARSBILLING_ALT:STATUS                  = "B"
       ARSBILLING_ALT:STATUS_DATE             = TODAYSDATE
       ARSBILLING_ALT:TOTAL_AMOUNT_PAID       = 0.00
       ARSBILLING_ALT:BILL_PLAN               = ARSBILLING_ALIAS:BILL_PLAN
       ARSBILLING_ALT:PAYMENT_PLAN            = ARSBILLING_ALIAS:PAYMENT_PLAN
       Switch (ARSBILLING_ALIAS:BILL_PLAN)
       Case "DB" : ARSBILLING_ALT:AC_NET_AMOUNT_DUE = 0.00
       Case "AC" : ARSBILLING_ALT:AC_NET_AMOUNT_DUE = 0.00
       Default   : ARSBILLING_ALT:AC_NET_AMOUNT_DUE = 0.00
       End
       ARSBILLING_ALT:USER_CONSOLE            = TERMINAL
       ARSBILLING_ALT:USER                    = USERNAME
       ARSBILLING_ALT:PRINTED                 = 0
       ARSBILLING_ALT:WRITE_OFF               = 0
       ARSBILLING_ALT:WRITE_OFF_AMOUNT        = 0
       ARSBILLING_ALT:WRITE_OFF_DATE          = 00.00.0000
       ARSBILLING_ALT:PRIOR_STATUS            = ARSBILLING_ALT:STATUS
       ARSBILLING_ALT:PRIOR_STATUS_DATE       = ARSBILLING_ALT:STATUS_DATE
       ARSBILLING_ALT:REINSTATED              = "N"
       ARSBILLING_ALT:POL_YEAR                = ARSMASTER:POL_YEAR
      End  -- end of adding to arsbilling_alias

      L_HIT_BILLING = "Y"

      Next ARSBILLING

End  -- end of looping

End  -- end of create_installment_charge

Procedure CREATE_VOIDED_DISBURSEMENT_OFFSET
Begin

L_CX_BILLED_TRANS = 36 -- use this queryname for the voided disbursement
L_TRANS_DATE = TODAYSDATE
--l_refund_pol_year = 0000

-- must access A/P here to find the amount of the uncut check.  the only amount in A/R that
-- should be voided will be the exact amount of the uncut check in A/P.

l_disbursement_to_check_for = 0.00

ACCESS ARSCHECK, SET ARSCHECK:COMPANY_ID = PRSTRANS:COMPANY_ID,
                     ARSCHECK:POLICY_NO  = PRSTRANS:POLICY_NO, APPROXIMATE

WHILE ARSCHECK:COMPANY_ID = PRSTRANS:COMPANY_ID AND
      ARSCHECK:POLICY_NO  = PRSTRANS:POLICY_NO
      BEGIN
         IF ARSCHECK:RELEASE ONE OF "V","S" or
            val(arscheck:check_no) = 0 THEN
         BEGIN
             L_DISBURSEMENT_TO_CHECK_FOR = ARSCHECK:CHECK_AMOUNT
         END
      NEXT ARSCHECK
      END

Access ARSBILLING, Set ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID,
                       ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate

While ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID And
      ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO
      Begin
          If ARSBILLING:TRANS_CODE = 30 And
             ARSBILLING:STATUS One Of  "D" and
             ARSBILLING:DISBURSEMENT_AMOUNT = L_DISBURSEMENT_TO_CHECK_FOR Then
          Begin

/* add the 36 trans code to offset the 30  */
Access ARSBILLING_ALIAS, Set ARSBILLING_ALIAS:COMPANY_ID       = ARSBILLING:COMPANY_ID,
                             ARSBILLING_ALIAS:POLICY_NO        = ARSBILLING:POLICY_NO,
                             ARSBILLING_ALIAS:TRANS_DATE       = ARSBILLING:TRANS_DATE,
                             ARSBILLING_ALIAS:TRANS_EFF        = ARSBILLING:TRANS_EFF,
                             ARSBILLING_ALIAS:TRANS_EXP        = ARSBILLING:TRANS_EXP,
                             ARSBILLING_ALIAS:TRANS_CODE       = L_CX_BILLED_TRANS,
                             ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS,
                             ARSBILLING_ALIAS:COMM_RATE        = ARSBILLING:COMM_RATE,
                             ARSBILLING_ALIAS:SUB_CODE         = ARSBILLING:SUB_CODE,
                             ARSBILLING_ALIAS:BILLING_CTR      = ARSBILLING:BILLING_CTR,
                             ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR

If ARSBILLING_ALIAS:COMPANY_ID       <> ARSBILLING:COMPANY_ID Or
   ARSBILLING_ALIAS:POLICY_NO        <> ARSBILLING:POLICY_NO Or
   ARSBILLING_ALIAS:TRANS_DATE       <> ARSBILLING:TRANS_DATE Or
   ARSBILLING_ALIAS:TRANS_EFF        <> ARSBILLING:TRANS_EFF Or
   ARSBILLING_ALIAS:TRANS_EXP        <> ARSBILLING:TRANS_EXP Or
   ARSBILLING_ALIAS:TRANS_CODE       <> L_CX_BILLED_TRANS  Or
   ARSBILLING_ALIAS:LINE_OF_BUSINESS <> ARSBILLING:LINE_OF_BUSINESS Or
   ARSBILLING_ALIAS:COMM_RATE        <> ARSBILLING:COMM_RATE Or
   ARSBILLING_ALIAS:SUB_CODE         <> ARSBILLING:SUB_CODE Or
   ARSBILLING_ALIAS:BILLING_CTR      <> ARSBILLING:BILLING_CTR Or
   ARSBILLING_ALIAS:RETURN_CHECK_CTR <> ARSBILLING:RETURN_CHECK_CTR
   Then
   Begin
     Add ARSBILLING_ALIAS
     Begin
       ARSBILLING_ALIAS:COMPANY_ID           =    ARSBILLING:COMPANY_ID
       ARSBILLING_ALIAS:POLICY_NO            =    ARSBILLING:POLICY_NO
       ARSBILLING_ALIAS:TRANS_DATE           =    L_TRANS_DATE
       ARSBILLING_ALIAS:TRANS_EFF            =    ARSBILLING:TRANS_EFF
       ARSBILLING_ALIAS:TRANS_EXP            =    ARSBILLING:TRANS_EXP
       ARSBILLING_ALIAS:TRANS_CODE           =    L_CX_BILLED_TRANS
       ARSBILLING_ALIAS:LINE_OF_BUSINESS     =    ARSBILLING:LINE_OF_BUSINESS
       ARSBILLING_ALIAS:AGENT_NO             =    ARSBILLING:AGENT_NO
       ARSBILLING_ALIAS:COMM_RATE            =    ARSBILLING:COMM_RATE
       ARSBILLING_ALIAS:SUB_CODE             =    ARSBILLING:SUB_CODE
       ARSBILLING_ALIAS:BILLING_CTR          =    ARSBILLING:BILLING_CTR
       ARSBILLING_ALIAS:RETURN_CHECK_CTR     =    ARSBILLING:RETURN_CHECK_CTR
       ARSBILLING_ALIAS:LOB_SUBLINE          =    ARSBILLING:LOB_SUBLINE
       ARSBILLING_ALIAS:DUE_DATE             =    ARSBILLING:DUE_DATE
       ARSBILLING_ALIAS:BILL_PLAN            =    ARSBILLING:BILL_PLAN
       ARSBILLING_ALIAS:PAYMENT_PLAN         =    ARSBILLING:PAYMENT_PLAN
       ARSBILLING_ALIAS:STATUS               =    "T" -- billed
       ARSBILLING_ALIAS:STATUS_DATE          =    L_TRANS_DATE
       ARSBILLING_ALIAS:BILLED_DATE          =    L_TRANS_DATE
--       ARSBILLING_alias:INSTALLMENT_AMOUNT   =    l_unissued_check * -1
       ARSBILLING_ALIAS:DISBURSEMENT_AMOUNT  =    ARSBILLING:DISBURSEMENT_AMOUNT * -1
       ARSBILLING_ALIAS:TOTAL_AMOUNT_PAID    =    ARSBILLING:DISBURSEMENT_AMOUNT * -1
       ARSBILLING_ALIAS:PAYMENT_OFFSET       =    ARSBILLING:PAYMENT_OFFSET
       ARSBILLING_ALIAS:WRITE_OFF            =    0
       ARSBILLING_ALIAS:WRITE_OFF_AMOUNT     =    0
       ARSBILLING_ALIAS:WRITE_OFF_DATE       =    00.00.0000
       ARSBILLING_ALIAS:PRIOR_STATUS         =    ""
       ARSBILLING_ALIAS:PRIOR_STATUS_DATE    =    00.00.0000
       ARSBILLING_ALIAS:REINSTATED           =    ""
       ARSBILLING_ALIAS:EXPANSION = "Status of T entered"
       arsbilling_alias:pol_year             = arsbilling:pol_year
       L_PENDING_DISBURSEMENTS = ARSBILLING:DISBURSEMENT_AMOUNT
       l_refund_pol_year                     = arsbilling:pol_year
       l_refund_trans_eff                    = dateadd(arsbilling:trans_exp,-12)

     End -- end of add

   End -- end of record does not exist

   Change ARSBILLING
      Begin
        ARSBILLING:STATUS = "V"

        if l_aps_trans_code = "CANCEL" then
           ARSBILLING:TOTAL_AMOUNT_PAID    = 0
        else
           ARSBILLING:TOTAL_AMOUNT_PAID    = ARSBILLING:DISBURSEMENT_AMOUNT

      End

   End

   Next ARSBILLING
 End

End -- end of procedure

Procedure CONFIRM_TRANS_CODE
Begin

L_USE_RECORD          = 0 -- initial the variable
L_ORIGINAL_TRANS_CODE = 0

Access PRSTRANS_ALT2, Set PRSTRANS_ALT2:COMPANY_ID = L_HOLD_COMPANY_ID,
                          PRSTRANS_ALT2:POLICY_NO  = L_HOLD_POLICY_NO, Approximate

While PRSTRANS_ALT2:COMPANY_ID = L_HOLD_COMPANY_ID And
      PRSTRANS_ALT2:POLICY_NO  = L_HOLD_POLICY_NO And
      L_USE_RECORD             = 0
      Begin
      Switch(PRSTRANS_ALT2:TRANS_CODE)
      Case 19,22,23,29 : L_ORIGINAL_TRANS_CODE = 19
      Case 18, 28      : L_ORIGINAL_TRANS_CODE = 18
      case 70          : l_original_trans_code = 70
      Default          : L_ORIGINAL_TRANS_CODE = 99
      End

      If L_ORIGINAL_TRANS_CODE = ARSBILLING_ALT:TRANS_CODE And
         PRSTRANS_ALT2:PREMIUM  <> 0 Then
      --    If PRSTRANS_ALT2:TRANS_CODE = ARSBILLING_ALT:TRANS_CODE Then
          Begin
              L_USE_RECORD = 1
          End

      Next PRSTRANS_ALT2

      End


End -- end of procedure

Procedure GET_BILLING_SUB_CODE
Begin

    Access ARSBILLING_ALT2, Set ARSBILLING_ALT2:COMPANY_ID       = ARSBILLING_ALT:COMPANY_ID,
                                ARSBILLING_ALT2:POLICY_NO        = ARSBILLING_ALT:POLICY_NO,
                                ARSBILLING_ALT2:TRANS_DATE       = ARSBILLING_ALT:TRANS_DATE,
                                ARSBILLING_ALT2:TRANS_EFF        = ARSBILLING_ALT:TRANS_EFF,
                                ARSBILLING_ALT2:TRANS_EXP        = ARSBILLING_ALT:TRANS_EXP,
                                ARSBILLING_ALT2:TRANS_CODE       = ARSBILLING_ALT:TRANS_CODE, Approximate

    While ARSBILLING_ALT2:COMPANY_ID    = ARSBILLING_ALT:COMPANY_ID And
          ARSBILLING_ALT2:POLICY_NO     = ARSBILLING_ALT:POLICY_NO And
          ARSBILLING_ALT2:TRANS_DATE    = ARSBILLING_ALT:TRANS_DATE And
          ARSBILLING_ALT2:TRANS_EFF     = ARSBILLING_ALT:TRANS_EFF And
          ARSBILLING_ALT2:TRANS_EXP     = ARSBILLING_ALT:TRANS_EXP And
          ARSBILLING_ALT2:TRANS_CODE    = ARSBILLING_ALT:TRANS_CODE
    Begin
          L_SUB_CODE = ARSBILLING_ALT:SUB_CODE
          Next ARSBILLING_ALT
    End

    L_SUB_CODE = L_SUB_CODE + 10

End -- end of procedure

Procedure update_arscancel
begin

access arschksu, set arschksu:policy_no = prstrans:policy_no, using fourth index, approximate

while arschksu:policy_no = prstrans:policy_no
 {
  if arschksu:check_hold = "Y" then
    {

      access arscancel, set arscancel:company_id = l_hold_company_id,
                            arscancel:policy_no  = l_hold_policy_no, approximate

      while arscancel:company_id = l_hold_company_id and
            arscancel:policy_no  = l_hold_policy_no
           begin
             if arscancel:cx_status one of "P" then
               begin
               change arscancel
                 begin
                   arscancel:cx_status           = "R"
                   arscancel:trans_date          = todaysdate
                   arscancel:automatic_cx_remove = 1
                   arscancel:check_reference     = arschksu:check_reference
                 end
               end
           next arscancel
           end

    }
 }
--end

end -- end of procedure

procedure check_for_premium_financed
begin

l_premium_financed = 0

access SFPSUPP, set SFPSUPP:POLICY_NO     = l_hold_POLICY_NO,
                    SFPSUPP:POL_YEAR      = l_hold_POL_YEAR,
                    SFPSUPP:END_SEQUENCE  = l_hold_END_SEQUENCE, APPROXIMATE

WHILE SFPSUPP:POLICY_NO    = l_hold_POLICY_NO AND
      SFPSUPP:POL_YEAR     = l_hold_POL_YEAR AND
      SFPSUPP:END_SEQUENCE = l_hold_END_SEQUENCE AND
      L_PREMIUM_FINANCED   = 0
      BEGIN
          IF SFPSUPP:MORTGAGE_TYPE_1 ONE OF "F" THEN
          BEGIN
              L_PREMIUM_FINANCED = 1
          END
      NEXT SFPSUPP
      END

end -- end of procedure

PROCEDURE GET_TOTAL_CANCELLATION_PREMIUM
BEGIN

L_TOTAL_CX_PREMIUM = 0.00

ACCESS PRSTRANS_ALT2, SET PRSTRANS_ALT2:COMPANY_ID = L_HOLD_COMPANY_ID,
                          PRSTRANS_ALT2:POLICY_NO  = L_HOLD_POLICY_NO, APPROXIMATE

WHILE PRSTRANS_ALT2:COMPANY_ID = L_HOLD_COMPANY_ID AND
      PRSTRANS_ALT2:POLICY_NO  = L_HOLD_POLICY_NO
      BEGIN
      IF PRSTRANS_ALT2:TRANS_CODE < 18 THEN
      BEGIN
          L_TOTAL_CX_PREMIUM = L_TOTAL_CX_PREMIUM + PRSTRANS_ALT2:PREMIUM
      END -- END OF TRANS CODE CHECKING
          NEXT PRSTRANS_ALT2
      END -- END OF WHILE

END -- END OF PROCEDURE

PROCEDURE CREATE_PREMIUM_FINANCED_RETURN
BEGIN
-- the sfpsupp values should be in tact at this point still

L_PF_SUB_CODE = 0

Access APSMORTCK, Set APSMORTCK:COMPANY_ID  = l_hold_COMPANY_ID,
                      APSMORTCK:MORTGAGE_ID = sfpsupp:MORTGAGE_ID, Approximate

While APSMORTCK:COMPANY_ID  = l_hold_COMPANY_ID And
      APSMORTCK:MORTGAGE_ID = sfpsupp:MORTGAGE_ID
      Begin
         If APSMORTCK:SUB_CODE > L_PF_SUB_CODE Then
         Begin
             L_PF_SUB_CODE = APSMORTCK:SUB_CODE
         End
      Next APSMORTCK
      End

L_PF_SUB_CODE = L_PF_SUB_CODE + 10

    Add APSMORTCK
    Begin
        APSMORTCK:COMPANY_ID          = l_hold_COMPANY_ID
        APSMORTCK:MORTGAGE_ID         = sfpsupp:MORTGAGE_ID
        APSMORTCK:SUB_CODE            = L_PF_SUB_CODE
        APSMORTCK:ACCOUNT             = SFSCOMPANY:CHECKING_ACCOUNT_NO[2]
        APSMORTCK:APS_TRANS_CODE      = "RETURN"
        APSMORTCK:TEN99               = 0
        APSMORTCK:LOSS_PAYEE          = 0
        APSMORTCK:PAYEE_NAME[1]       = sfpsupp:name[1]/RAW
        APSMORTCK:PAYEE_NAME[2]       = sfpsupp:name[2]/RAW
        APSMORTCK:PAYEE_NAME[3]       = sfpsupp:name[3]/raw
        APSMORTCK:PAYEE_NAME[4]       = " "
        APSMORTCK:PAYEE_NAME[5]       = " "
        APSMORTCK:PAYEE_NAME[6]       = " "
        APSMORTCK:MAILTO_NAME[1]      = sfpsupp:name[1]/raw
        APSMORTCK:MAILTO_NAME[2]      = sfpsupp:name[2]/raw
        APSMORTCK:MAILTO_NAME[3]      = sfpsupp:name[3]/raw
        APSMORTCK:ADDRESS[1]          = sfpsupp:ADDRESS[1]/RAW
        APSMORTCK:ADDRESS[2]          = sfpsupp:address[2]
        APSMORTCK:ADDRESS[3]          = sfpsupp:address[3]
        APSMORTCK:CITY                = SFPSUPP:CITY
        APSMORTCK:STR_STATE           = SFPSUPP:STR_STATE
        APSMORTCK:STR_ZIPCODE         = SFPSUPP:STR_ZIPCODE/RAW
        APSMORTCK:CHECK_DRAFT         = "C"
        APSMORTCK:COMMENTS            = "Check Created by arsup001 - PF"
        APSMORTCK:PAYMENT_MESSAGE     = "Return Premium Financed "
        APSMORTCK:CHECK_AMOUNT        = L_TOTAL_CX_PREMIUM * -1
        APSMORTCK:CHECK_NO            = " "
        APSMORTCK:CHECK_DATE          = 00.00.0000
        APSMORTCK:RELEASE             = " "
        APSMORTCK:RELEASE_DATE        = 00.00.0000
        APSMORTCK:CHECK_CLEARED       = 0
        APSMORTCK:CHECK_CLEARED_DATE  = 00.00.0000
        APSMORTCK:ENTERING_USER_NAME  = USERNAME
        APSMORTCK:CLEARING_USER_NAME  = " "
        APSMORTCK:RELEASE_USER_NAME   = " "
        APSMORTCK:PAYEE_TYPE[1]       = "M"
        APSMORTCK:PAYEE_TYPE[2]       = "M"
        APSMORTCK:AGENT_NO[1]         = 00
        APSMORTCK:EFF_DATE            = 000
        APSMORTCK:TIN                 = " "
        APSMORTCK:STATUS_AFTER_CHECK  = " "
        APSMORTCK:MORTGAGE_SUB_CODE   = 0
End

end

Procedure update_arsbilling_payments
begin

l_total_13_paid  = 0.00

access arsbilling_alt2, set arsbilling_alt2:company_id = prstrans:company_id,
                            arsbilling_alt2:policy_no  = prstrans:policy_no, approximate

while arsbilling_alt2:company_id = prstrans:company_id and
      arsbilling_alt2:policy_no  = prstrans:policy_no
      begin
      if arsbilling_alt2:pol_year = prstrans:pol_year then
      begin
          l_total_13_paid = l_total_13_paid + arsbilling_alt2:total_amount_paid
          change arsbilling_alt2
          begin
              arsbilling_alt2:total_amount_paid = 0.00
          end
      end
      next arsbilling_alt2
      end

end -- end of procedure

Procedure create_arschksu
begin

I_CSEXEC_APPLICATION = "CHECK_REFERENCE"
Include "sfscsexec.pro"
L_UPDATE_FILE = "check_for_cx_return_premiums 2"
L_CHECK_REFERENCE = I_CSEXEC_NUMBER

Access ARSCHKSU, Set ARSCHKSU:COMPANY_ID      = PRSTRANS:COMPANY_ID,
                     ARSCHKSU:CHECK_REFERENCE = L_CHECK_REFERENCE, Exact

If ARSCHKSU:COMPANY_ID      <> PRSTRANS:COMPANY_ID And
   ARSCHKSU:CHECK_REFERENCE <> L_CHECK_REFERENCE Then -- new record
   Begin
   Add ARSCHKSU
   Begin
       ARSCHKSU:COMPANY_ID          = PRSTRANS:COMPANY_ID
       ARSCHKSU:CHECK_REFERENCE     = L_CHECK_REFERENCE
       ARSCHKSU:POLICY_NO           = L_HOLD_POLICY_NO
       ARSCHKSU:AGENT_NO            = SFSAGENT:AGENT_NO
       ARSCHKSU:BANK_NO             = "DO NOT DEPOSIT"
       ARSCHKSU:TRANS_DATE          = TODAYSDATE
       ARSCHKSU:POSTED_DATE         = 00.00.0000
       ARSCHKSU:CHECK_NO            = "xxxxxxx"
       ARSCHKSU:CHECK_AMOUNT        = L_TOTAL_13_PAID
       ARSCHKSU:COMMENTS            = "Not A check - Credit End payment"
       ARSCHKSU:PAYOR_NAME          = SFSCOMPANY:NAME[1]
       ARSCHKSU:PAYOR_CARE_OF       = SFSCOMPANY:NAME[2]
       ARSCHKSU:PAYOR_ADDRESS       = SFSCOMPANY:ADDRESS[1]
       ARSCHKSU:PAYOR_CITY          = SFSCOMPANY:CITY
       ARSCHKSU:PAYOR_STR_STATE     = SFSCOMPANY:STR_STATE
       ARSCHKSU:PAYOR_ZIP_CODE_STR  = SFSCOMPANY:STR_ZIPCODE
       ARSCHKSU:PAYOR_TYPE          = "O" -- other
       ARSCHKSU:DEPOSIT_DATE        = 00.00.0000
       ARSCHKSU:DISPOSITION         = "OPEN"
       ARSCHKSU:MONEY_ORDER         = "N"
       ARSCHKSU:BALANCE             = L_TOTAL_13_PAID
       ARSCHKSU:CHECK_HOLD          = "N"
       ARSCHKSU:USER                = USERNAME
       ARSCHKSU:USER_CONSOLE        = CONSOLE
       ARSCHKSU:ENTER_TIME          = SYSTEMTIME
       ARSCHKSU:ENTER_DATE          = SYSTEMDATE
       ARSCHKSU:QUOTE_NO            = 0
       ARSCHKSU:DEPOSIT_PREMIUM     = 0
       ARSCHKSU:MORTGAGE_ID         = " "
       ARSCHKSU:CREDIT_INSTALLMENT_CHAGE = 0
       ARSCHKSU:CHECK_PAYS_TOTAL    = 0
       ARSCHKSU:INTERNAL_CHECK      = 1 -- this is done so no deposit slip is created
   End -- end of add
   End -- end of checking for record exists

end -- end of procedure

Procedure change_payment_plan
begin
l_total_installment2           = 0.00
l_total_paid2                  = 0.00
l_total_write_off2             = 0.00
l_total_surcharge_installment2 = 0.00
l_total_surcharge_paid2        = 0.00
l_total_surcharge_write_off2   = 0.00
l_hold_old_due_date            = 00.00.0000
l_total_bucket                 = 0
l_diff_installment             = 0
l_total_installment_fee2       = 0
l_trans_code                   = 0
l_total_amount_paid            = 0.00

for l_ctr = 1 to 20
{
    l_installment_no_cents[l_ctr] = 0.00
    l_due_date[l_ctr]             = 00.00.0000
}

/*  step one - accumulate totals to be used to recreate the buckets */

if arscontrol2:status_on_pay_plan_change one of "O" then
{
    l_billed_date = 00.00.0000
}
else
{
    l_billed_date = todaysdate
}

access prsmaster_alias, set prsmaster_alias:company_id = prstrans:company_id,
                            prsmaster_alias:policy_no  = prstrans:policy_no, generic

l_hold_prstrans_comm_rate = 99.99
l_prsmaster_total         = 0
while prsmaster_alias:company_id = prstrans:company_id and
      prsmaster_alias:policy_no  = prstrans:policy_no
        begin
        if prsmaster_alias:pol_year = prstrans:pol_year then
            begin
            if l_hold_prstrans_comm_rate <> prsmaster_alias:comm_rate then
                begin
                l_total_installment2               = 0
                l_total_paid2                      = 0
                l_total_write_off2                 = 0
                l_total_installment_fee2           = 0
                l_total_installment_fee_paid2      = 0
                l_total_installment_fee_write_off2 = 0
                l_total_surcharge_installment2     = 0
                l_total_surcharge_paid2            = 0
                l_total_surcharge_write_off2       = 0
                l_ctr                              = 0
                l_hold_prstrans_comm_rate = prsmaster_alias:comm_rate
                do accummulate_totals_per_comm
                do write_ar_payment_out
                end
            end

        if prsmaster_alias:trans_code < 17 then
            l_prsmaster_total = prsmaster_alias:premium +
                                l_prsmaster_total

        next prsmaster_alias
        end

access arsbilling_alt, set arsbilling_alt:company_id = prstrans:company_id,
                           arsbilling_alt:policy_no  = prstrans:policy_no, generic

l_total_bucket = 0
while arsbilling_alt:company_id = prstrans:company_id and
      arsbilling_alt:policy_no  = prstrans:policy_no --and
    {
    if arsbilling_alt:pol_year = prstrans:pol_year and
       arsbilling_alt:record_updated = 0 and
       arsbilling_alt:trans_code < 18 then
        l_total_bucket = l_total_bucket + arsbilling_alt:installment_amount

    next arsbilling_alt
    }

if l_total_bucket <> l_prsmaster_total then
    {
    l_diff_installment = l_prsmaster_total - l_total_bucket
    }

/*write("<014>")
write("%c%s%n",1005,"l total bucket    = ",l_total_bucket)
write("%c%s%n",2005,"l_prsmaster_total = ",l_prsmaster_total)
write("%c%s%n",3005,"l_diff_inst       = ",l_diff_installment)
read(10,01,"press enter",l_enter,1)*/
access arsbilling_alt, set arsbilling_alt:company_id = prstrans:company_id,
                           arsbilling_alt:policy_no  = prstrans:policy_no, approximate

l_first_record = "Y"
while arsbilling_alt:company_id = prstrans:company_id and
      arsbilling_alt:policy_no  = prstrans:policy_no
        begin
        if arsbilling_alt:trans_date = todaysdate and
           arsbilling_alt:trans_code < 17 and
           arsbilling_alt:pol_year = prstrans:pol_year and
           arsbilling_alt:record_updated = 0 and
           l_first_record = "Y" then
            begin
            l_first_record = "N"
            change arsbilling_alt
                begin
                arsbilling_alt:installment_amount = arsbilling_alt:installment_amount +
                                                    l_diff_installment
                end
            end

        next arsbilling_alt
        end
end

procedure accummulate_totals_per_comm
begin
access arsbilling_alt, set arsbilling_alt:company_id = prsmaster_alias:company_id,
                           arsbilling_alt:policy_no  = prsmaster_alias:policy_no, generic

while arsbilling_alt:company_id = prsmaster_alias:company_id and
      arsbilling_alt:policy_no  = prsmaster_alias:policy_no --and
--      arsbilling_alt:pol_year   = prstrans:pol_year
      {
/*      write("<014>")
      write("%c%s%n",1050,"arsbilling comm rate =",arsbilling_alt:comm_rate)
      write("%c%s%n",2050,"l hold prstrans comm =",l_hold_prstrans_comm_rate)
      write("%c%s%n",3050,"arsbilling alt install =",arsbilling_alt:installment_amount)
      write("%c%s%n",4050,"record updated         =",arsbilling_alt:record_updated)
      write("%c%s%n",5050,"billing pol year       =",arsbilling_alt:pol_year)
      write("%c%s%n",6050,"prs pol year           =",prsmaster_alias:pol_year)
      write("%c%s%n",7050,"billing pay plan       =",arsbilling_alt:payment_plan)
      write("%c%s%n",8050,"prs pay plan           =",prstrans:payment_plan)
      read(10,01,"press before if enter",l_enter,1)*/
      if arsbilling_alt:record_updated one of 0 and
         arsbilling_alt:pol_year = prsmaster_alias:pol_year and
         arsbilling_alt:comm_rate = l_hold_prstrans_comm_rate and
         arsbilling_alt:payment_plan <> prstrans:payment_plan then
      {
/*      write("<014>")
      write("%c%s%n",1050,"arsbilling comm rate =",arsbilling_alt:comm_rate)
      write("%c%s%n",2050,"l hold prstrans comm =",l_hold_prstrans_comm_rate)
      write("%c%s%n",3050,"arsbilling alt install =",arsbilling_alt:installment_amount)
      read(10,01,"press after if enter",l_enter,1)*/
        if arsbilling_alt:trans_code one of 10,11,12,13,14,15,16 and
           arsbilling_alt:comm_rate = l_hold_prstrans_comm_rate then
        {
             l_total_installment2 = l_total_installment2 + arsbilling_alt:installment_amount
             l_total_paid2        = l_total_paid2 + arsbilling_alt:total_amount_paid
             l_total_write_off2   = l_total_write_off2 + arsbilling_alt:write_off_amount
        }
        else if arsbilling_alt:trans_code one of 18 and
                arsbilling_alt:comm_rate = l_hold_prstrans_comm_rate then
        {
             l_total_installment_fee2             = l_total_installment_fee2 + arsbilling_alt:installment_amount
             l_total_installment_fee_paid2        = l_total_installment_fee_paid2 + arsbilling_alt:total_amount_paid
             l_total_installment_fee_write_off2   = l_total_installment_fee_write_off2 + arsbilling_alt:write_off_amount
        }
        else if arsbilling_alt:trans_code one of 19,22,23,29 and
                arsbilling_alt:comm_rate = l_hold_prstrans_comm_rate then
        {
             l_total_surcharge_installment2 = l_total_surcharge_installment2 + arsbilling_alt:installment_amount
             l_total_surcharge_paid2        = l_total_surcharge_paid2 + arsbilling_alt:total_amount_paid
             l_total_surcharge_write_off2   = l_total_surcharge_write_off2 + arsbilling_alt:write_off_amount
        }
      }
      next arsbilling_alt

} -- end of while loop

end

procedure write_ar_payment_out
begin

--write("<014>")
--write("%c%s%n",1005,"total installment fee2 = ",l_total_installment2)
--write("%c%s%n",2005,"l_holdprstrans comm    = ",l_hold_prstrans_comm_rate)
--read(10,01,"press enter",l_enter,1)
l_total_amount_paid = l_total_paid2 + l_total_installment_fee_paid2 + l_total_surcharge_paid2


/* step two - apply the correct new status to the existing buckets */

access arsbilling_alt, set arsbilling_alt:company_id = prstrans:company_id,
                           arsbilling_alt:policy_no  = prstrans:policy_no, approximate

while arsbilling_alt:company_id = prstrans:company_id and
      arsbilling_alt:policy_no  = prstrans:policy_no --and
--      arsbilling_alt:pol_year   = prstrans:pol_year
      {
      if arsbilling_alt:pol_year = prstrans:pol_year then
          {
      access arsbilling_alt2, set arsbilling_alt2:company_id      = arsbilling_alt:company_id,
                                  arsbilling_alt2:policy_no       = arsbilling_alt:policy_no,
                                  arsbilling_alt2:trans_date      = arsbilling_alt:trans_date,
                                  arsbilling_alt2:trans_eff       = arsbilling_alt:trans_eff,
                                  arsbilling_alt2:trans_exp       = arsbilling_alt:trans_exp,
                                  arsbilling_alt2:trans_code      = arsbilling_alt:trans_code,
                                  arsbilling_alt2:line_of_business= arsbilling_alt:line_of_business,
                                  arsbilling_alt2:comm_rate       = arsbilling_alt:comm_rate,
                                  arsbilling_alt2:sub_code        = arsbilling_alt:sub_code,
                                  arsbilling_alt2:billing_ctr     = arsbilling_alt:billing_ctr,
                                  arsbilling_alt2:return_check_ctr= arsbilling_alt:return_check_ctr, exact

      if arsbilling_alt2:company_id       = arsbilling_alt:company_id and
         arsbilling_alt2:policy_no       = arsbilling_alt:policy_no and
         arsbilling_alt2:trans_date      = arsbilling_alt:trans_date and
         arsbilling_alt2:trans_eff       = arsbilling_alt:trans_eff and
         arsbilling_alt2:trans_exp       = arsbilling_alt:trans_exp and
         arsbilling_alt2:trans_code      = arsbilling_alt:trans_code and
         arsbilling_alt2:line_of_business= arsbilling_alt:line_of_business and
         arsbilling_alt2:comm_rate       = arsbilling_alt:comm_rate and
         arsbilling_alt2:sub_code        = arsbilling_alt:sub_code and
         arsbilling_alt2:billing_ctr     = arsbilling_alt:billing_ctr and
         arsbilling_alt2:return_check_ctr= arsbilling_alt:return_check_ctr then
         {
             if arsbilling_alt2:payment_plan <> prstrans:payment_plan and
                arsbilling_alt2:comm_rate = l_hold_prstrans_comm_rate then
                 begin
                 change arsbilling_alt2
                     {
                     if l_hold_old_due_date = 00.00.0000 then
                        {
                        l_hold_old_due_date = arsbilling_alt2:due_date
                        }
                     arsbilling_alt2:status  = "W"
                     arsbilling_alt2:record_updated = 1
                     arsbilling_alt2:status_date    = todaysdate
                     if l_trans_code = 0 then
                        {
                        l_trans_code = arsbilling_alt:trans_code
                        }
                    }
                 end
         }

        }
         next arsbilling_alt

         }

-- adding installment fee (-) here to backout what was originally added

access arsbilling_alt, set arsbilling_alt:company_id = prstrans:company_id,
                           arsbilling_alt:policy_no  = prstrans:policy_no, approximate

while arsbilling_alt:company_id = prstrans:company_id and
      arsbilling_alt:policy_no  = prstrans:policy_no --and
--      arsbilling_alt:pol_year   = prstrans:pol_year
      {
      if arsbilling_alt:trans_code one of 18 and
         arsbilling_alt:status     one of "W" and
         l_total_installment_fee2  <> 0.00 and
         arsbilling_alt:pol_year = prstrans:pol_year then
         begin


access arsbilling_alt3, set arsbilling_alt3:company_id = arsbilling_alt:company_id,
                            arsbilling_alt3:policy_no  = arsbilling_alt:policy_no, approximate

while arsbilling_alt3:company_id = arsbilling_alt:company_id and
      arsbilling_alt3:policy_no  = arsbilling_alt:policy_no
      {
          if arsbilling_alt3:sub_code > l_sub_code then
          {
              L_sub_code = arsbilling_alt3:sub_code
          }
          next arsbilling_alt3
      }

l_sub_code = l_sub_code + 3

         access arsbilling_alt2, set arsbilling_alt2:company_id      = arsbilling_alt:company_id,
                                  arsbilling_alt2:policy_no       = arsbilling_alt:policy_no,
                                  arsbilling_alt2:trans_date      = arsbilling_alt:trans_date,
                                  arsbilling_alt2:trans_eff       = arsbilling_alt:trans_eff,
                                  arsbilling_alt2:trans_exp       = arsbilling_alt:trans_exp,
                                  arsbilling_alt2:trans_code      = arsbilling_alt:trans_code,
                                  arsbilling_alt2:line_of_business= arsbilling_alt:line_of_business,
                                  arsbilling_alt2:comm_rate       = arsbilling_alt:comm_rate,
                                  arsbilling_alt2:sub_code        = l_sub_code,
                                  arsbilling_alt2:billing_ctr     = arsbilling_alt:billing_ctr,
                                  arsbilling_alt2:return_check_ctr= arsbilling_alt:return_check_ctr, exact

      if arsbilling_alt2:company_id      <> arsbilling_alt:company_id or
         arsbilling_alt2:policy_no       <> arsbilling_alt:policy_no or
         arsbilling_alt2:trans_date      <> arsbilling_alt:trans_date or
         arsbilling_alt2:trans_eff       <> arsbilling_alt:trans_eff or
         arsbilling_alt2:trans_exp       <> arsbilling_alt:trans_exp or
         arsbilling_alt2:trans_code      <> arsbilling_alt:trans_code or
         arsbilling_alt2:line_of_business<> arsbilling_alt:line_of_business or
         arsbilling_alt2:comm_rate       <> arsbilling_alt:comm_rate or
         arsbilling_alt2:sub_code        <> l_sub_code or
         arsbilling_alt2:billing_ctr     <> arsbilling_alt:billing_ctr or
         arsbilling_alt2:return_check_ctr<> arsbilling_alt:return_check_ctr then
         {
         if arsbilling_alt2:payment_plan <> prstrans:payment_plan and
            arsbilling_alt2:comm_rate = l_hold_prstrans_comm_rate then
             begin
             add arsbilling_alt2
                 {
                 arsbilling_alt2:record             = arsbilling_alt:record/raw
                 arsbilling_alt2:sub_code           = l_sub_code
                 arsbilling_alt2:status             = "W"
                 arsbilling_alt2:record_updated     = 1
                 arsbilling_alt2:prior_status_date  = arsbilling_alt2:billed_date
                 arsbilling_alt2:status_date        = todaysdate
                 arsbilling_alt2:billed_date        = todaysdate
                 arsbilling_alt2:installment_amount = l_total_installment_fee2 * -1
                 arsbilling_alt2:total_amount_paid  = l_total_installment_fee_paid2 * -1
                 arsbilling_alt2:write_off_amount   = l_total_installment_fee_write_off2 * -1
                 if arsbilling_alt2:write_off_amount <> 0.00 then
                     {
                     arsbilling_alt2:write_off = 1
                     arsbilling_alt2:write_off_date = todaysdate
                     }
                 }
             end

             l_total_installment_fee2 = 0.00
         }
         }

         next arsbilling_alt

         }

-- end of adding installment fee

if arscontrol2:new_due_date_on_pay_plan_change one of 1 then
    {
    if prstrans:payment_plan = 18 then
        {
        l_hold_old_due_date = sfpname:eff_date
        }
    else
    if todaysdate + 30 > l_hold_old_due_date then
       {
       l_hold_old_due_date = todaysdate + 30
       }
    }

/* step 3 create the new buckets using the new payment plan */

access arspayplan, set arspayplan:company_id        = prstrans:company_id,
                       arspayplan:line_of_business  = prstrans:line_of_business,
                       arspayplan:payment_plan      = prstrans:payment_plan

l_record_added = "N"

-- now add the record

for l_ctr = 1 to arspayplan:number_of_payments
{
   l_installment_no_cents[l_ctr] = l_total_installment2 * arspayplan:distribution[l_ctr]

   if l_ctr = 1 then
   {
       l_due_date[l_ctr]        = l_hold_old_due_date
       l_total_installment_fee2 = arspayplan:installment_charge_rate
   }

   if l_ctr <> 1 then
   {
       if arspayplan:installment_months_between <> 0 then
       {
           l_due_date[l_ctr] = dateadd(l_due_date[l_ctr -1],arspayplan:installment_months_between)
       }

       if arspayplan:invoice_days_between <> 0 then
       {
           l_due_date[l_ctr] = l_due_date[l_ctr -1] + arspayplan:invoice_days_between
       }

   } -- end of l_ctr = 1


} -- end of for loop

if arscontrol2:fee_on_pay_plan_change not one of 1 then
{
    l_total_installment_fee2 = 0.00
}


for l_ctr = 1 to arspayplan:number_of_payments
{
   l_total_bucket = l_total_bucket + l_installment_no_cents[l_ctr]


}

/*if l_total_bucket <> l_total_installment2 then
{
   l_diff_installment = l_total_bucket - l_total_installment2
   l_installment_no_cents[1] = l_installment_no_cents[1] - l_diff_installment
}    */

--   write ("<014>")
--   write ("%c%s%n",01001,"l_total_bucket        = ",l_total_bucket)
--   write ("%c%s%n",03001,"l_total_installment2  = ",l_total_installment2)
--   write ("%c%s%n",05001,"l_diff_installment    = ",l_diff_installment)
--   write ("%c%s%n",07001,"l_installment_no_cents= ",l_installment_no_cents[1])
--   Read (10,01,"press enter",l_enter,1)
access arsbilling_alt, set arsbilling_alt:company_id = prstrans:company_id,
                           arsbilling_alt:policy_no  = prstrans:policy_no, approximate


l_record_added = "N"

while arsbilling_alt:company_id    = prstrans:company_id and
      arsbilling_alt:policy_no     = prstrans:policy_no and
      l_record_added               = "N"
      {


if arsbilling_alt:status one of "W" then -- get the first one and base the rest on this record
{

-- setup subcode

for l_ctr = 1 to arspayplan:number_of_payments
{

access arsbilling_alt2, set arsbilling_alt2:company_id = arsbilling_alt:company_id,
                            arsbilling_alt2:policy_no  = arsbilling_alt:policy_no, approximate

while arsbilling_alt2:company_id = arsbilling_alt:company_id and
      arsbilling_alt2:policy_no  = arsbilling_alt:policy_no
      {
          if arsbilling_alt2:sub_code > l_sub_code then
          {
              L_sub_code = arsbilling_alt2:sub_code
          }
          next arsbilling_alt2
      }

      l_sub_code = l_sub_code + 3

-- need to calculate due dates and amounts now

      access arsbilling_alt3, set arsbilling_alt3:company_id      = arsbilling_alt:company_id,
                                  arsbilling_alt3:policy_no       = arsbilling_alt:policy_no,
                                  arsbilling_alt3:trans_date      = arsbilling_alt:trans_date,
                                  arsbilling_alt3:trans_eff       = arsbilling_alt:trans_eff,
                                  arsbilling_alt3:trans_exp       = arsbilling_alt:trans_exp,
                                  arsbilling_alt3:trans_code      = arsbilling_alt:trans_code,
                                  arsbilling_alt3:line_of_business= arsbilling_alt:line_of_business,
                                  arsbilling_alt3:comm_rate       = arsbilling_alt:comm_rate,
                                  arsbilling_alt3:sub_code        = l_sub_code, approximate

      if    arsbilling_alt3:company_id      <> arsbilling_alt:company_id or
            arsbilling_alt3:policy_no       <> arsbilling_alt:policy_no or
            arsbilling_alt3:trans_date      <> arsbilling_alt:trans_date or
            arsbilling_alt3:trans_eff       <> arsbilling_alt:trans_eff or
            arsbilling_alt3:trans_exp       <> arsbilling_alt:trans_exp or
            arsbilling_alt3:trans_code      <> arsbilling_alt:trans_code or
            arsbilling_alt3:line_of_business<> arsbilling_alt:line_of_business or
            arsbilling_alt3:comm_rate       <> arsbilling_alt:comm_rate or
            arsbilling_alt3:sub_code        <> l_sub_code then
--            arsbilling_alt3:billing_ctr     <> arsbilling_alt:billing_ctr or
--            arsbilling_alt3:return_check_ctr<> arsbilling_alt:return_check_ctr then
            {
            if l_installment_no_cents[l_ctr] <> 0 and
               arsbilling_alt:comm_rate = l_hold_prstrans_comm_rate then
                begin
                add arsbilling_alt3
                    {
                    arsbilling_alt3:record             = arsbilling_alt:record/raw
                    arsbilling_alt3:sub_code           = l_sub_code
                    if l_due_date[l_ctr] < todaysdate + 22 then
--                    if l_ctr one of 1 then
                    {
                        arsbilling_alt3:status             = arscontrol2:status_on_pay_plan_change
                        arsbilling_alt3:billed_date        = l_billed_date
                    }
                    else
                    {
                        arsbilling_alt3:status             = "O"
                        arsbilling_alt3:billed_date        = 00.00.0000
                    }
                    arsbilling_alt3:installment_amount = l_installment_no_cents[l_ctr]
                    arsbilling_alt3:due_date           = l_due_date[l_ctr]
                    arsbilling_alt3:billing_ctr        = l_ctr
                    arsbilling_alt3:comm_rate          = l_hold_prstrans_comm_rate
                    arsbilling_alt3:total_amount_paid  = 0.00
                    arsbilling_alt3:write_off_amount   = l_total_write_off2
                    arsbilling_alt3:record_updated     = 0
                    arsbilling_alt3:payment_plan       = prstrans:payment_plan
                    arsbilling_alt3:trans_code         = arsbilling_alt:trans_code
                    arsbilling_alt3:trans_date         = todaysdate

                    }
                end


            }

      }  -- end of ctr

      l_record_added = "Y"

-- adding installment charge record here
if l_total_installment_fee2 <> 0 then
{
l_trans_code = 18

access arsbilling_alt2, set arsbilling_alt2:company_id = arsbilling_alt:company_id,
                            arsbilling_alt2:policy_no  = arsbilling_alt:policy_no, approximate

while arsbilling_alt2:company_id = arsbilling_alt:company_id and
      arsbilling_alt2:policy_no  = arsbilling_alt:policy_no
      {
          if arsbilling_alt2:sub_code > l_sub_code then
          {
              L_sub_code = arsbilling_alt2:sub_code
          }
          next arsbilling_alt2
      }

      l_sub_code = l_sub_code + 3

-- need to calculate due dates and amounts now

      access arsbilling_alt3, set arsbilling_alt3:company_id      = arsbilling_alt:company_id,
                                  arsbilling_alt3:policy_no       = arsbilling_alt:policy_no,
                                  arsbilling_alt3:trans_date      = arsbilling_alt:trans_date,
                                  arsbilling_alt3:trans_eff       = arsbilling_alt:trans_eff,
                                  arsbilling_alt3:trans_exp       = arsbilling_alt:trans_exp,
                                  arsbilling_alt3:trans_code      = l_trans_code,
                                  arsbilling_alt3:line_of_business= arsbilling_alt:line_of_business,
                                  arsbilling_alt3:comm_rate       = arsbilling_alt:comm_rate,
                                  arsbilling_alt3:sub_code        = l_sub_code, approximate

      if    arsbilling_alt3:company_id      <> arsbilling_alt:company_id or
            arsbilling_alt3:policy_no       <> arsbilling_alt:policy_no or
            arsbilling_alt3:trans_date      <> arsbilling_alt:trans_date or
            arsbilling_alt3:trans_eff       <> arsbilling_alt:trans_eff or
            arsbilling_alt3:trans_exp       <> arsbilling_alt:trans_exp or
            arsbilling_alt3:trans_code      <> l_trans_code or
            arsbilling_alt3:line_of_business<> arsbilling_alt:line_of_business or
            arsbilling_alt3:comm_rate       <> arsbilling_alt:comm_rate or
            arsbilling_alt3:sub_code        <> l_sub_code then
--            arsbilling_alt3:billing_ctr     <> arsbilling_alt:billing_ctr or
--            arsbilling_alt3:return_check_ctr<> arsbilling_alt:return_check_ctr then
            {
            if arsbilling_alt3:comm_rate = l_hold_prstrans_comm_rate then
                begin
                add arsbilling_alt3
                    {
                     arsbilling_alt3:record             = arsbilling_alt:record/raw
                     arsbilling_alt3:sub_code           = l_sub_code
                     arsbilling_alt3:status             = "B"
                     arsbilling_alt3:installment_amount = l_total_installment_fee2
                     arsbilling_alt3:due_date           = l_due_date[1]
                     arsbilling_alt3:billed_date        = l_billed_date
                     arsbilling_alt3:billing_ctr        = 1
                     arsbilling_alt3:comm_rate          = l_hold_prstrans_comm_rate
                     arsbilling_alt3:total_amount_paid  = 0.00
                     arsbilling_alt3:write_off_amount   = 0.00
                     arsbilling_alt3:record_updated     = 0
                     arsbilling_alt3:payment_plan       = prstrans:payment_plan
                     arsbilling_alt3:trans_code         = l_trans_code
                     arsbilling_alt3:trans_date         = todaysdate
                     }
                end


            }

} -- end of checking for $0.00 installment fee amount

-- adding sur charge here

if l_total_surcharge_installment2 <> 0.00 then
{

l_trans_code = 19

access arsbilling_alt2, set arsbilling_alt2:company_id = arsbilling_alt:company_id,
                            arsbilling_alt2:policy_no  = arsbilling_alt:policy_no, approximate

while arsbilling_alt2:company_id = arsbilling_alt:company_id and
      arsbilling_alt2:policy_no  = arsbilling_alt:policy_no
      {
          if arsbilling_alt2:sub_code > l_sub_code then
          {
              L_sub_code = arsbilling_alt2:sub_code
          }
          next arsbilling_alt2
      }

      l_sub_code = l_sub_code + 3

-- need to calculate due dates and amounts now

      access arsbilling_alt3, set arsbilling_alt3:company_id      = arsbilling_alt:company_id,
                                  arsbilling_alt3:policy_no       = arsbilling_alt:policy_no,
                                  arsbilling_alt3:trans_date      = arsbilling_alt:trans_date,
                                  arsbilling_alt3:trans_eff       = arsbilling_alt:trans_eff,
                                  arsbilling_alt3:trans_exp       = arsbilling_alt:trans_exp,
                                  arsbilling_alt3:trans_code      = l_trans_code,
                                  arsbilling_alt3:line_of_business= arsbilling_alt:line_of_business,
                                  arsbilling_alt3:comm_rate       = arsbilling_alt:comm_rate,
                                  arsbilling_alt3:sub_code        = l_sub_code, approximate

      if    arsbilling_alt3:company_id      <> arsbilling_alt:company_id or
            arsbilling_alt3:policy_no       <> arsbilling_alt:policy_no or
            arsbilling_alt3:trans_date      <> arsbilling_alt:trans_date or
            arsbilling_alt3:trans_eff       <> arsbilling_alt:trans_eff or
            arsbilling_alt3:trans_exp       <> arsbilling_alt:trans_exp or
            arsbilling_alt3:trans_code      <> l_trans_code or
            arsbilling_alt3:line_of_business<> arsbilling_alt:line_of_business or
            arsbilling_alt3:comm_rate       <> arsbilling_alt:comm_rate or
            arsbilling_alt3:sub_code        <> l_sub_code then
--            arsbilling_alt3:billing_ctr     <> arsbilling_alt:billing_ctr or
--            arsbilling_alt3:return_check_ctr<> arsbilling_alt:return_check_ctr then
            {
            add arsbilling_alt3
            {
                arsbilling_alt3:record             = arsbilling_alt:record/raw
                arsbilling_alt3:sub_code           = l_sub_code
                arsbilling_alt3:status             = arscontrol2:status_on_pay_plan_change
                arsbilling_alt3:installment_amount = l_total_surcharge_installment2
                arsbilling_alt3:due_date           = l_due_date[1]
                arsbilling_alt3:billed_date        = l_billed_date
                arsbilling_alt3:comm_rate          = l_hold_prstrans_comm_rate
                arsbilling_alt3:billing_ctr        = 1
                arsbilling_alt3:total_amount_paid  = 0.00
                arsbilling_alt3:write_off_amount   = 0.00
                arsbilling_alt3:record_updated     = 0
                arsbilling_alt3:payment_plan       = prstrans:payment_plan
                arsbilling_alt3:trans_code         = l_trans_code
                arsbilling_alt3:trans_date         = todaysdate

            }


            }

} -- end of checking for $0.00 surcharge amount

if arscontrol2:rescind_on_pay_plan_change one of 1 then
{
    access arscancel, set arscancel:company_id     = prstrans:company_id,
                          arscancel:policy_no      = prstrans:policy_no, approximate

    while arscancel:company_id   = prstrans:company_id and
          arscancel:policy_no    = prstrans:policy_no
          {
             if arscancel:cx_status one of "P" then
             {
                 access arscancel_alt, set arscancel_alt:company_id = arscancel:company_id,
                                           arscancel_alt:policy_no  = arscancel:policy_no,
                                           arscancel_alt:sub_code   = arscancel:sub_code, exact

                 if arscancel_alt:company_id = arscancel:company_id and
                    arscancel_alt:policy_no  = arscancel:policy_no and
                    arscancel_alt:sub_code   = arscancel:sub_code then
                    {
                    change arscancel_alt
                    {
                        arscancel_alt:cx_status           = "R"
                        arscancel_alt:trans_date          = todaysdate
                        arscancel_alt:automatic_cx_remove = 1
                        arscancel_alt:expansion           = "PP"
                    }
                    }
             }
             next arscancel
      } -- end of while loop

} -- end of rescind on pay plan change checking

      }  -- end of checking for "W" status

      next arsbilling_alt

      }

if l_total_amount_paid <> 0.00 then
{
   do create_arschksu_change_payment_plan
   l_total_amount_paid = 0.00
}

end -- end of change payment plan

procedure calculate_credit_buckets
 begin

 access prstrans_alias, set prstrans_alias:company_id = prstrans:company_id,
                            prstrans_alias:policy_no  = prstrans:policy_no, generic

 l_total_prstrans_credit           = 0.00
 l_total_prstrans_surcharge_credit = 0.00
 l_distro_remaining                = 0.00

 while prstrans_alias:company_id = prstrans:company_id and
       prstrans_alias:policy_no  = prstrans:policy_no
         begin
           if prstrans_alias:trans_code not one of 12 then
            {
             if prstrans_alias:trans_code one of 19,23 then
              {
               l_total_prstrans_surcharge_credit = l_total_prstrans_surcharge_credit +
                                                    prstrans_alias:premium
              }
             else
              {
               l_total_prstrans_credit = prstrans_alias:premium +
                                         l_total_prstrans_credit
              }
            } -- end of transaction code checking for 12
         next prstrans_alias
         end

--write ("<014>")
--write ("%c%s%n",2001,"l_total_prstrans_credit      = ",l_total_prstrans_credit)
--Read (23,1,"very important    Press Enter to Continue ",L_ENTER,1)

 For L_CTR = 1 To 20
     Begin
     l_net_amount_due_1[l_ctr] = 0
     l_net_amount_due_2[l_ctr] = 0
     end

access arspayplan, set arspayplan:company_id       = prstrans:company_id,
                       arspayplan:line_of_business  = sfpname:line_of_business,
--                       arspayplan:line_of_business = prstrans:line_of_business,
                       arspayplan:payment_plan     = prstrans:payment_plan

l_number_of_payments = arspayplan:number_of_payments

 Access ARSBILLING_alt, Set ARSBILLING_alt:COMPANY_ID = PRSTRANS:COMPANY_ID,
                            ARSBILLING_alt:POLICY_NO  = PRSTRANS:POLICY_NO, approximate

 l_hold_total_amount_paid = 0
 While ARSBILLING_alt:COMPANY_ID = PRSTRANS:COMPANY_ID And
       ARSBILLING_alt:POLICY_NO  = PRSTRANS:POLICY_NO

    Begin
         if arsbilling_alt:trans_code one of 10,14 and
            arsbilling_alt:status one of "B", "O"  then
           {

         if arsbilling_alt:trans_code one of 18,28,68 then
         {
             L_NET_AMOUNT_DUE_2[arsbilling_alt:billing_ctr] = (l_net_amount_due_2[arsbilling_alt:billing_ctr] +
                                                              (ARSBILLING_alt:INSTALLMENT_AMOUNT -
                                                              (ARSBILLING_alt:TOTAL_AMOUNT_PAID +
                                                               ARSBILLING_alt:WRITE_OFF_AMOUNT)))
         }
         else if arsbilling_alt:trans_code one of 19,23,69 then
         {
             L_NET_AMOUNT_DUE_3[arsbilling_alt:billing_ctr] = (l_net_amount_due_2[arsbilling_alt:billing_ctr] +
                                                              (ARSBILLING_alt:INSTALLMENT_AMOUNT -
                                                              (ARSBILLING_alt:TOTAL_AMOUNT_PAID +
                                                               ARSBILLING_alt:WRITE_OFF_AMOUNT)))
         }
         else
         {
             L_NET_AMOUNT_DUE_1[arsbilling_alt:billing_ctr] = (l_net_amount_due_1[arsbilling_alt:billing_ctr] +
                                                              (ARSBILLING_alt:INSTALLMENT_AMOUNT -
                                                              (ARSBILLING_alt:TOTAL_AMOUNT_PAID +
                                                               ARSBILLING_alt:WRITE_OFF_AMOUNT)))
         }

         L_HOLD_DUE_DATE[ARSBILLING_alt:BILLING_CTR]    = ARSBILLING_alt:DUE_DATE

         L_DUE_DATE_STATUS[ARSBILLING_alt:BILLING_CTR]  = ARSBILLING_alt:STATUS
         l_hold_billed_date[arsbilling_alt:billing_ctr] = arsbilling_alt:billed_date
         L_HOLD_PAYMENT_PLAN                            = ARSBILLING_alt:PAYMENT_PLAN

         if arsbilling_alt:billing_ctr > l_hold_last_billing_ctr then
             L_HOLD_LAST_BILLING_CTR                = ARSBILLING_alt:BILLING_CTR

         L_HOLD_LAST_BILLING_STATUS                 = ARSBILLING_alt:STATUS
         L_HOLD_LAST_DUE_DATE                       = ARSBILLING_alt:DUE_DATE
         l_bill_plan                                = arsbilling_alt:bill_plan
         If L_HOLD_SUBLINE = "" Then
             Begin
             L_HOLD_SUBLINE = ARSBILLING_alt:LOB_SUBLINE
             End


         if arsbilling_alt:trans_code one of 18, 68 then
         {
             L_hold_total_installment_due           = (l_hold_total_installment_due +
                                                      (ARSBILLING_alt:INSTALLMENT_AMOUNT -
                                                      (ARSBILLING_alt:TOTAL_AMOUNT_PAID +
                                                      ARSBILLING_alt:WRITE_OFF_AMOUNT)))
         }
         if arsbilling_alt:trans_code one of 19,23,69 then
         {
             L_hold_total_surcharge_due            = (l_hold_total_installment_due +
                                                      (ARSBILLING_alt:INSTALLMENT_AMOUNT -
                                                      (ARSBILLING_alt:TOTAL_AMOUNT_PAID +
                                                      ARSBILLING_alt:WRITE_OFF_AMOUNT)))
         }
         else
         {
             L_hold_total_AMOUNT_DUE                = (l_hold_total_amount_due +
                                                      (ARSBILLING_alt:INSTALLMENT_AMOUNT -
                                                      (ARSBILLING_alt:TOTAL_AMOUNT_PAID +
                                                      ARSBILLING_alt:WRITE_OFF_AMOUNT)))
         }
         l_hold_total_amount_paid                   = arsbilling_alt:total_amount_paid +
                                                      l_hold_total_amount_paid
     }
     Next ARSBILLING_alt
     End

 if (l_total_prstrans_credit * -1) = l_hold_total_amount_due then
     begin
     l_hold_total_installment_due = 0
     For L_CTR = 1 To 20
         Begin
         l_net_amount_due_2[l_ctr] = 0
         end
     end

 l_credit_remaining = l_total_prstrans_credit * -1

for l_ctr = 1 to l_hold_last_billing_ctr -- to 1 -- step -1
     Begin
       l_total_due = l_net_amount_due_1[l_ctr] +
                     l_net_amount_due_2[l_ctr]

       l_rounded_amount    = round((l_total_prstrans_credit * arspayplan:distribution[l_ctr]))
       l_total_credit[l_ctr] = l_rounded_amount

       l_total_credit_returned = l_total_credit_returned + l_total_credit[l_ctr]

        if l_distro_remaining <> 0.00 then
        {
            l_total_credit[l_ctr] = l_total_credit[l_ctr] + l_distro_remaining
            l_distro_remaining    = 0.00
        }

        if (l_total_credit[l_ctr] * -1) => l_total_due then
        {
            l_distro_remaining       = (((l_total_credit[l_ctr] * -1) - l_total_due) * -1)
            l_total_credit[l_ctr]    = l_total_due * -1
        }
        l_total_credit_returned_switch = l_total_credit_returned * -1
/*
write ("<014>")
write ("%c%s%n",2001,"l_ctr                     = ",l_ctr)
write ("%c%s%n",3001,"l_hold_last_billing_ctr   = ",l_hold_last_billing_ctr)
write ("%c%s%n",4001,"l_credit_remaining        = ",l_credit_remaining)
write ("%c%s%n",5001,"l_total_credit_returned_switch   = ",l_total_credit_returned_switch)
Read (23,1,"rounding     Press Enter to Continue ",L_ENTER,1)
*/
        if l_ctr = l_hold_last_billing_ctr then
           {
            if l_credit_remaining < l_total_credit_returned_switch then
               {
                 l_sub = l_total_credit_returned_switch - l_credit_remaining
/*
write ("<014>")
write ("%c%s%n",2001,"l_sub     = ",l_sub)
Read (23,1,"subtracting Press Enter to Continue ",L_ENTER,1)
*/
                 l_sub = l_sub * -1
                 l_total_credit[l_ctr] = l_total_credit[l_ctr] - l_sub
               }
            else
            if l_credit_remaining > l_total_credit_returned_switch then
               {
                l_add = l_credit_remaining  - l_total_credit_returned_switch
                l_add = l_add * -1
/*
write ("<014>")
write ("%c%s%n",2001,"l_add     = ",l_add)
Read (23,1,"adding Press Enter to Continue ",L_ENTER,1)
*/
                l_total_credit[l_ctr] = l_total_credit[l_ctr] + l_add
               }
           }
/*
write ("<014>")
write ("%c%s%n",2001,"l_total_credit[l_ctr]  = ",l_total_credit[l_ctr])
write ("%c%s%n",3001,"l_ctr                  = ",l_ctr)
Read (23,1,"above update arsbilling    Press Enter to Continue ",L_ENTER,1)
*/
        if l_total_credit[l_ctr] <> 0 then
           begin

              if l_bill_plan = "AC" then
                begin
                  l_commission_rate        = prstrans:comm_rate * 0.01
                  l_commission_amount      = l_total_credit[l_ctr] * l_commission_rate
                  l_temp_premium           = l_total_credit[l_ctr] - l_commission_amount
                  l_total_credit[l_ctr]    = l_temp_premium
                end

            do update_arsbilling
           end
     end

 For L_CTR = 1 To 20
     Begin
     l_net_amount_due_1[l_ctr] = 0
     end

 Access ARSBILLING, Set ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID,
                        ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO, generic

 While ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID And
       ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO
         Begin
         L_NET_AMOUNT_DUE_1[arsbilling:billing_ctr] = (l_net_amount_due_1[arsbilling:billing_ctr] +
                                                      (ARSBILLING:INSTALLMENT_AMOUNT -
                                                      (ARSBILLING:TOTAL_AMOUNT_PAID +
                                                      ARSBILLING:WRITE_OFF_AMOUNT)))
         Next ARSBILLING
         End

 Access ARSBILLING, Set ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID,
                        ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO, Approximate


 While ARSBILLING:COMPANY_ID = PRSTRANS:COMPANY_ID And
       ARSBILLING:POLICY_NO  = PRSTRANS:POLICY_NO
     Begin
     Access ARSBILLING_ALIAS, Set ARSBILLING_ALIAS:COMPANY_ID       = ARSBILLING:COMPANY_ID,
                                  ARSBILLING_ALIAS:POLICY_NO        = ARSBILLING:POLICY_NO,
                                  ARSBILLING_ALIAS:TRANS_DATE       = ARSBILLING:TRANS_DATE,
                                  ARSBILLING_ALIAS:TRANS_EFF        = ARSBILLING:TRANS_EFF,
                                  ARSBILLING_ALIAS:TRANS_EXP        = ARSBILLING:TRANS_EXP,
                                  ARSBILLING_ALIAS:TRANS_CODE       = ARSBILLING:TRANS_CODE,
                                  ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS,
                                  ARSBILLING_ALIAS:COMM_RATE        = ARSBILLING:COMM_RATE,
                                  ARSBILLING_ALIAS:SUB_CODE         = ARSBILLING:SUB_CODE,
                                  ARSBILLING_ALIAS:BILLING_CTR      = ARSBILLING:BILLING_CTR,
                                  ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR

     If ARSBILLING_ALIAS:COMPANY_ID       = ARSBILLING:COMPANY_ID And
        ARSBILLING_ALIAS:POLICY_NO        = ARSBILLING:POLICY_NO And
        ARSBILLING_ALIAS:TRANS_DATE       = ARSBILLING:TRANS_DATE And
        ARSBILLING_ALIAS:TRANS_EFF        = ARSBILLING:TRANS_EFF And
        ARSBILLING_ALIAS:TRANS_EXP        = ARSBILLING:TRANS_EXP And
        ARSBILLING_ALIAS:TRANS_CODE       = ARSBILLING:TRANS_CODE And
        ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING:LINE_OF_BUSINESS And
        ARSBILLING_ALIAS:COMM_RATE        = ARSBILLING:COMM_RATE And
        ARSBILLING_ALIAS:SUB_CODE         = ARSBILLING:SUB_CODE And
        ARSBILLING_ALIAS:BILLING_CTR      = ARSBILLING:BILLING_CTR And
        ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING:RETURN_CHECK_CTR Then
         Begin
-- CHANGED
--         if arsbilling:trans_code not one of 13,23 then
  --        {
    ---       if l_net_amount_due_1[arsbilling:billing_ctr] = 0.00 then
       --      begin
         --    Change ARSBILLING_ALIAS
           --      Begin
             --    if arsbilling:bill_plan <> "AC" then
               --       ARSBILLING_ALIAS:STATUS = "P"
--                 end
  --           End
    --      }

        if arsbilling_alias:trans_code one of 19, 23 and
           (arsbilling_alias:installment_amount - (arsbilling_alias:total_amount_paid + arsbilling_alias:write_off_amount)) =>
           (l_total_prstrans_surcharge_credit * -1) then
           {
           add arsbilling_alias
           begin
               arsbilling_alias:total_amount_paid = arsbilling_alias:total_amount_paid + (L_total_prstrans_surcharge_credit * -1)
           end
           }

         End

     Next ARSBILLING
     End


 Do CHECK_FOR_RETURN_PREMIUMS
 l_net_payments = l_distro_remaining * -1
--Write ("<014>")
--Write ("%c%s%n",01001,"L Net Payments           = ",L_NET_PAYMENTS)
--Read (23,1,"in calculate credit buckets ---- Press Enter to Continue ",L_ENTER,1)
 If L_NET_PAYMENTS > ARSCONTROL:WAIVE_AMOUNT_CREDIT And
    L_NET_PAYMENTS > 0 and
    prstrans:bill_plan one of "DB" Then
     Begin
     Do CREATE_ACCOUNTS_PAYABLE
     End

 end

Procedure create_arschksu_change_payment_plan
begin

I_CSEXEC_APPLICATION = "CHECK_REFERENCE"
Include "sfscsexec.pro"
L_UPDATE_FILE = "check_for_cx_return_premiums pmt plan change"
L_CHECK_REFERENCE = I_CSEXEC_NUMBER

Access ARSCHKSU, Set ARSCHKSU:COMPANY_ID      = PRSTRANS:COMPANY_ID,
                     ARSCHKSU:CHECK_REFERENCE = L_CHECK_REFERENCE, Exact

If ARSCHKSU:COMPANY_ID      <> PRSTRANS:COMPANY_ID And
   ARSCHKSU:CHECK_REFERENCE <> L_CHECK_REFERENCE Then -- new record
   Begin
   Add ARSCHKSU
   Begin
       ARSCHKSU:COMPANY_ID          = PRSTRANS:COMPANY_ID
       ARSCHKSU:CHECK_REFERENCE     = L_CHECK_REFERENCE
       ARSCHKSU:POLICY_NO           = L_HOLD_POLICY_NO
       ARSCHKSU:AGENT_NO            = SFSAGENT:AGENT_NO
       ARSCHKSU:BANK_NO             = "DO NOT DEPOSIT"
       ARSCHKSU:TRANS_DATE          = TODAYSDATE
       ARSCHKSU:POSTED_DATE         = 00.00.0000
       ARSCHKSU:CHECK_NO            = "PMT CHG"
       ARSCHKSU:CHECK_AMOUNT        = L_total_amount_paid
       ARSCHKSU:COMMENTS            = "Not a Check - Payment Change"
       ARSCHKSU:PAYOR_NAME          = SFSCOMPANY:NAME[1]
       ARSCHKSU:PAYOR_CARE_OF       = SFSCOMPANY:NAME[2]
       ARSCHKSU:PAYOR_ADDRESS       = SFSCOMPANY:ADDRESS[1]
       ARSCHKSU:PAYOR_CITY          = SFSCOMPANY:CITY
       ARSCHKSU:PAYOR_STR_STATE     = SFSCOMPANY:STR_STATE
       ARSCHKSU:PAYOR_ZIP_CODE_STR  = SFSCOMPANY:STR_ZIPCODE
       ARSCHKSU:PAYOR_TYPE          = "O" -- other
       ARSCHKSU:DEPOSIT_DATE        = 00.00.0000
       ARSCHKSU:DISPOSITION         = "OPEN"
       ARSCHKSU:MONEY_ORDER         = "N"
       ARSCHKSU:BALANCE             = L_TOTAL_AMOUNT_PAID
       ARSCHKSU:CHECK_HOLD          = "N"
       ARSCHKSU:USER                = USERNAME
       ARSCHKSU:USER_CONSOLE        = CONSOLE
       ARSCHKSU:ENTER_TIME          = SYSTEMTIME
       ARSCHKSU:ENTER_DATE          = SYSTEMDATE
       ARSCHKSU:QUOTE_NO            = 0
       ARSCHKSU:DEPOSIT_PREMIUM     = 0
       ARSCHKSU:MORTGAGE_ID         = " "
       ARSCHKSU:CREDIT_INSTALLMENT_CHAGE = 0
       ARSCHKSU:CHECK_PAYS_TOTAL    = 0
       ARSCHKSU:INTERNAL_CHECK      = 1 -- this is done so no deposit slip is created
   End -- end of add
   End -- end of checking for record exists

end -- end of procedure


--cindyc
procedure check_for_credit_endorsement
{
l_already_paid = 0

access arsbilling_alt2, set arsbilling_alt2:company_id = l_hold_company_id,
                            arsbilling_alt2:policy_no  = l_hold_policy_no, approximate

while arsbilling_alt2:company_id = l_hold_company_id and
      arsbilling_alt2:policy_no  = l_hold_policy_no
      {
         if arsbilling_alt2:trans_date one of todaysdate and
            arsbilling_alt2:status one of "B","O" and
            arsbilling_alt2:trans_code one of 13, 23, 15 and
            arsbilling_alt2:installment_amount < 0.00 then
            {

     Access ARSBILLING_ALIAS, Set ARSBILLING_ALIAS:COMPANY_ID       = ARSBILLING_alt2:COMPANY_ID,
                                  ARSBILLING_ALIAS:POLICY_NO        = ARSBILLING_alt2:POLICY_NO,
                                  ARSBILLING_ALIAS:TRANS_DATE       = ARSBILLING_alt2:TRANS_DATE,
                                  ARSBILLING_ALIAS:TRANS_EFF        = ARSBILLING_alt2:TRANS_EFF,
                                  ARSBILLING_ALIAS:TRANS_EXP        = ARSBILLING_alt2:TRANS_EXP,
                                  ARSBILLING_ALIAS:TRANS_CODE       = ARSBILLING_alt2:TRANS_CODE,
                                  ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING_alt2:LINE_OF_BUSINESS,
                                  ARSBILLING_ALIAS:COMM_RATE        = ARSBILLING_alt2:COMM_RATE,
                                  ARSBILLING_ALIAS:SUB_CODE         = ARSBILLING_alt2:SUB_CODE,
                                  ARSBILLING_ALIAS:BILLING_CTR      = ARSBILLING_alt2:BILLING_CTR,
                                  ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING_alt2:RETURN_CHECK_CTR

     If ARSBILLING_ALIAS:COMPANY_ID       = ARSBILLING_alt2:COMPANY_ID And
        ARSBILLING_ALIAS:POLICY_NO        = ARSBILLING_alt2:POLICY_NO And
        ARSBILLING_ALIAS:TRANS_DATE       = ARSBILLING_alt2:TRANS_DATE And
        ARSBILLING_ALIAS:TRANS_EFF        = ARSBILLING_alt2:TRANS_EFF And
        ARSBILLING_ALIAS:TRANS_EXP        = ARSBILLING_alt2:TRANS_EXP And
        ARSBILLING_ALIAS:TRANS_CODE       = ARSBILLING_alt2:TRANS_CODE And
        ARSBILLING_ALIAS:LINE_OF_BUSINESS = ARSBILLING_alt2:LINE_OF_BUSINESS And
        ARSBILLING_ALIAS:COMM_RATE        = ARSBILLING_alt2:COMM_RATE And
        ARSBILLING_ALIAS:SUB_CODE         = ARSBILLING_alt2:SUB_CODE And
        ARSBILLING_ALIAS:BILLING_CTR      = ARSBILLING_alt2:BILLING_CTR And
        ARSBILLING_ALIAS:RETURN_CHECK_CTR = ARSBILLING_alt2:RETURN_CHECK_CTR Then
         {
         change arsbilling_alias
         {
            arsbilling_alias:status            = "P"

   -- if two credit endorsements are done on the same day. need to accumulate the first amount applied
   -- so it doesnt duplicate the amount when appling the second credit
            if arsbilling_alias:trans_code = 13 and
               arsbilling_alias:total_amount_paid < 0 then
                {
                  l_already_paid = 0
                  l_already_paid = arsbilling_alias:total_amount_paid
                }

            if prstrans:trans_code = 15 then
              l_total_amount_paid = l_total_amount_paid + (arsbilling_alias:total_amount_paid * -1)

            -- total amount to reverse
            l_total_amount_paid       = ((l_total_amount_paid + (arsbilling_alias:total_amount_paid * -1)) + l_already_paid)
            l_reverse                 = "Y"

            if l_reverse = "Y" then
            {
              do create_payment_offsets
              arsbilling_alias:total_amount_paid = arsbilling_alias:installment_amount
            }
         }
         }
         }  -- end of trans code and trans date checking
         next arsbilling_alt2
         }

do apply_payment_offsets

}  -- end of procedure

Procedure Create_payment_offsets
{

access arsoffsetwrk, set arsoffsetwrk:policy_no = arsbilling_alias:policy_no,
                         arsoffsetwrk:due_date  = arsbilling_alias:due_date

if arsoffsetwrk:policy_no = arsbilling_alias:policy_no and
   arsoffsetwrk:due_date  = arsbilling_alias:due_date then
   {
    change arsoffsetwrk
    {

    if (arsbilling_alias:trans_code one of 13, 23 or
       (arsbilling_alias:trans_code one of 15 and
        arsbilling_alias:installment_amount < 0)) or
       (arsbilling_alt2:trans_code one of 16 and
       arsbilling_alt2:prior_trans_code one of 13)  then
        {
          arsoffsetwrk:pol_year = arsbilling_alias:pol_year
          arsoffsetwrk:payment_amount =
          arsoffsetwrk:payment_amount + (arsbilling_alias:installment_amount - l_already_paid)

          l_credit_amount_remaining   = l_credit_amount_remaining + (arsbilling_alias:installment_amount  - arsbilling_alias:total_amount_paid)
        }
    }
   }

   if arsoffsetwrk:policy_no <> arsbilling_alias:policy_no or
   arsoffsetwrk:due_date  <> arsbilling_alias:due_date then
    {
     add arsoffsetwrk
      {

         if (arsbilling_alias:trans_code one of 13, 23 or
            (arsbilling_alias:trans_code one of 15 and
             arsbilling_alias:installment_amount < 0)) or
            (arsbilling_alt2:trans_code one of 16 and
             arsbilling_alt2:prior_trans_code one of 13) and
             arsbilling_alias:record_updated not one of 1 then
              {
                arsoffsetwrk:pol_year         = arsbilling_alias:pol_year
                arsoffsetwrk:policy_no        = arsbilling_alias:policy_no
                arsoffsetwrk:due_date         = arsbilling_alias:due_date

                arsoffsetwrk:payment_amount   = (arsbilling_alias:installment_amount - l_already_paid)

                l_credit_amount_remaining   = l_credit_amount_remaining +
                                (arsbilling_alias:installment_amount - arsbilling_alias:total_amount_paid)
              }
     }
   }


} -- end of Procedure

Procedure Apply_payment_offsets
BEGIN

access arsoffsetwrk, set arsoffsetwrk:policy_no = l_hold_policy_no, approximate

while arsoffsetwrk:policy_no = l_hold_policy_no
{

  if l_amount_to_use = 0 then
     l_amount_to_use = arsoffsetwrk:payment_amount

   access arsbilling_alias, set arsbilling_alias:company_id = l_hold_company_id,
                                arsbilling_alias:policy_no  = l_hold_policy_no, approximate

   while arsbilling_alias:company_id = l_hold_company_id and
         arsbilling_alias:policy_no  = l_hold_policy_no
     {

         if arsbilling_alias:pol_year = arsoffsetwrk:pol_year and
            arsbilling_alias:due_date = arsoffsetwrk:due_date and
            arsbilling_alias:status one of "O", "B" and
            arsbilling_alias:installment_amount > 0.00 then
       {
       Access ARSBILLING_ALt1, Set ARSBILLING_ALt1:COMPANY_ID       = ARSBILLING_alias:COMPANY_ID,
                                   ARSBILLING_ALt1:POLICY_NO        = ARSBILLING_alias:POLICY_NO, generic

        while ARSBILLING_ALt1:COMPANY_ID       = ARSBILLING_alias:COMPANY_ID and
              ARSBILLING_ALt1:POLICY_NO        = ARSBILLING_alias:POLICY_NO
          {

           if arsbilling_alt1:due_date = arsoffsetwrk:due_date then
           {

            if l_amount_to_use <> 0 then
            {
            change arsbilling_alt1
              {
               if arsbilling_alt1:status one of "O","B" then
                 {
                  if arsbilling_alt1:installment_amount - (arsbilling_alt1:total_amount_paid +
                                                  arsbilling_alt1:write_off_amount) < ( l_amount_to_use * -1 ) then
                   {
                     l_hold_amount_paid = 0.00
                     if arsbilling_alt1:trans_code not one of 13 then
                       {
                         l_hold_amount_paid = (arsbilling_alt1:total_amount_paid +
                                               (arsbilling_alt1:installment_amount -
                                               (arsbilling_alt1:total_amount_paid + arsbilling_alt1:write_off_amount)))

                       }
                     else
                       {
                        l_hold_amount_paid = arsbilling_alt1:installment_amount - arsbilling_alt1:total_amount_paid +
                                       arsbilling_alt1:write_off_amount

                       }

                    l_balance = (arsbilling_alt1:installment_amount -
                                                (arsbilling_alt1:total_amount_paid +
                                                arsbilling_alt1:write_off_amount))
                    l_amount_to_use = ((l_amount_to_use * -1) - l_balance)
                    l_amount_to_use = l_amount_to_use * -1

                    l_credit_amount_remaining = (l_credit_amount_remaining + (arsbilling_alt1:installment_amount -
                                                (arsbilling_alt1:total_amount_paid + arsbilling_alt1:write_off_amount)))

                    arsbilling_alt1:total_amount_paid = (arsbilling_alt1:total_amount_paid +
                                                 (arsbilling_alt1:installment_amount -
                                                 (arsbilling_alt1:total_amount_paid + arsbilling_alt1:write_off_amount)))

                   if arsbilling_alt1:installment_amount = (arsbilling_alt1:total_amount_paid + arsbilling_alt1:write_off_amount) then
                    {
                      arsbilling_alt1:status            = "P"
                    }

                   }
                  else
                   if arsbilling_alt1:installment_amount - (arsbilling_alt1:total_amount_paid +
                                                       arsbilling_alt1:write_off_amount) => (l_amount_to_use * -1) then
                    {
                     arsbilling_alt1:total_amount_paid = arsbilling_alt1:total_amount_paid + (l_amount_to_use * -1)

                     if arsbilling_alt1:installment_amount = (arsbilling_alt1:total_amount_paid + arsbilling_alt1:write_off_amount) then
                      {
                       arsbilling_alt1:status = "P"
                      }
                     l_credit_amount_remaining = l_credit_amount_remaining - l_amount_to_use
                     l_amount_to_use = 0

                    }

                 }  -- "O","B" status check
              }  -- change of arsbilling_alt
            } -- if l amount to use <> 0

           } -- if due dates <>
         next arsbilling_alt1
         }

       } -- end of status and installment amount checking

     next arsbilling_alias
     }

next arsoffsetwrk
}

if l_credit_amount_remaining < 0 then
 {
  l_credit_amount_remaining = (l_credit_amount_remaining * -1) --reverse sign for final step
 }
access arsoffsetwrk, set arsoffsetwrk:policy_no = l_hold_policy_no, approximate

while arsoffsetwrk:policy_no = l_hold_policy_no
{

-- then do first do "O" then do "B"
 if l_credit_amount_remaining > 0.00 then
 {

   access arsbilling_alias, set arsbilling_alias:company_id = l_hold_company_id,
                                arsbilling_alias:policy_no  = l_hold_policy_no, approximate

   while arsbilling_alias:company_id = l_hold_company_id and
         arsbilling_alias:policy_no  = l_hold_policy_no
       {
         if arsbilling_alias:pol_year = arsoffsetwrk:pol_year and
            arsbilling_alias:status one of "O" and
            (arsbilling_alias:installment_amount - (arsbilling_alias:total_amount_paid +
                                                    arsbilling_alias:write_off_amount)) > 0.00 then
            {

             Access ARSBILLING_ALt1, Set ARSBILLING_ALt1:COMPANY_ID       = ARSBILLING_alias:COMPANY_ID,
                                         ARSBILLING_ALt1:POLICY_NO        = ARSBILLING_alias:POLICY_NO,
                                         ARSBILLING_ALt1:TRANS_DATE       = ARSBILLING_alias:TRANS_DATE,
                                         ARSBILLING_ALt1:TRANS_EFF        = ARSBILLING_alias:TRANS_EFF,
                                         ARSBILLING_ALt1:TRANS_EXP        = ARSBILLING_alias:TRANS_EXP,
                                         ARSBILLING_ALt1:TRANS_CODE       = ARSBILLING_alias:TRANS_CODE,
                                         ARSBILLING_ALt1:LINE_OF_BUSINESS = ARSBILLING_alias:LINE_OF_BUSINESS,
                                         ARSBILLING_ALt1:COMM_RATE        = ARSBILLING_alias:COMM_RATE,
                                         ARSBILLING_Alt1:SUB_CODE         = ARSBILLING_alias:SUB_CODE,
                                         ARSBILLING_Alt1:BILLING_CTR      = ARSBILLING_alias:BILLING_CTR,
                                         ARSBILLING_Alt1:RETURN_CHECK_CTR = ARSBILLING_alias:RETURN_CHECK_CTR

            If ARSBILLING_Alt1:COMPANY_ID       = ARSBILLING_alias:COMPANY_ID And
               ARSBILLING_Alt1:POLICY_NO        = ARSBILLING_alias:POLICY_NO And
               ARSBILLING_Alt1:TRANS_DATE       = ARSBILLING_alias:TRANS_DATE And
               ARSBILLING_Alt1:TRANS_EFF        = ARSBILLING_alias:TRANS_EFF And
               ARSBILLING_Alt1:TRANS_EXP        = ARSBILLING_alias:TRANS_EXP And
               ARSBILLING_Alt1:TRANS_CODE       = ARSBILLING_alias:TRANS_CODE And
               ARSBILLING_Alt1:LINE_OF_BUSINESS = ARSBILLING_alias:LINE_OF_BUSINESS And
               ARSBILLING_Alt1:COMM_RATE        = ARSBILLING_alias:COMM_RATE And
               ARSBILLING_Alt1:SUB_CODE         = ARSBILLING_alias:SUB_CODE And
               ARSBILLING_Alt1:BILLING_CTR      = ARSBILLING_alias:BILLING_CTR And
               ARSBILLING_Alt1:RETURN_CHECK_CTR = ARSBILLING_alias:RETURN_CHECK_CTR Then
              {
              change arsbilling_alt1
                {
                 if arsbilling_alt1:status one of "O" then
                   {
                     if arsbilling_alt1:installment_amount - (arsbilling_alt1:total_amount_paid +
                                                arsbilling_alt1:write_off_amount) => l_credit_amount_remaining then
                       {
                        arsbilling_alt1:total_amount_paid = arsbilling_alt1:total_amount_paid + l_credit_amount_remaining
                        l_credit_amount_remaining = 0.00
                        if arsbilling_alt1:installment_amount = arsbilling_alt1:total_amount_paid then
                         {
                          arsbilling_alt1:status  = "P"
                         }
                       }
                     else
                       {
                        if arsbilling_alt1:installment_amount - (arsbilling_alt1:total_amount_paid +
                                                       arsbilling_alt1:write_off_amount) < l_credit_amount_remaining then
                         {
                          l_credit_amount_remaining  = (l_credit_amount_remaining - (arsbilling_alt1:installment_amount -
                              (arsbilling_alt1:total_amount_paid + arsbilling_alt1:write_off_amount)))

                          arsbilling_alt1:total_amount_paid = arsbilling_alt1:installment_amount -
                                                 arsbilling_alt1:write_off_amount


                          if arsbilling_alt1:installment_amount = arsbilling_alt1:total_amount_paid then
                           {
                             arsbilling_alt1:status             = "P"
                           }
                         }
                       }

                   } -- end of "O" checking

                } -- end of Change

              } -- end of record exit

            } -- trans code 12 and O status

           next arsbilling_alias

       } -- end of while
   }
next arsoffsetwrk
}

access arsoffsetwrk, set arsoffsetwrk:policy_no = l_hold_policy_no, approximate

while arsoffsetwrk:policy_no = l_hold_policy_no
{

-- then do first do "O" then do "B"
 if l_credit_amount_remaining > 0.00 then
 {

   access arsbilling_alias2, set arsbilling_alias2:company_id = l_hold_company_id,
                                arsbilling_alias2:policy_no  = l_hold_policy_no, approximate

   while arsbilling_alias2:company_id = l_hold_company_id and
         arsbilling_alias2:policy_no  = l_hold_policy_no
       {
         if arsbilling_alias2:pol_year = arsoffsetwrk:pol_year and
            arsbilling_alias2:status one of "B" and
            (arsbilling_alias2:installment_amount - (arsbilling_alias2:total_amount_paid +
                                                    arsbilling_alias2:write_off_amount)) > 0.00 then
            {

             Access ARSBILLING_ALt3, Set ARSBILLING_ALt3:COMPANY_ID       = ARSBILLING_alias2:COMPANY_ID,
                                         ARSBILLING_ALt3:POLICY_NO        = ARSBILLING_alias2:POLICY_NO,
                                         ARSBILLING_ALt3:TRANS_DATE       = ARSBILLING_alias2:TRANS_DATE,
                                         ARSBILLING_ALt3:TRANS_EFF        = ARSBILLING_alias2:TRANS_EFF,
                                         ARSBILLING_ALt3:TRANS_EXP        = ARSBILLING_alias2:TRANS_EXP,
                                         ARSBILLING_ALt3:TRANS_CODE       = ARSBILLING_alias2:TRANS_CODE,
                                         ARSBILLING_ALt3:LINE_OF_BUSINESS = ARSBILLING_alias2:LINE_OF_BUSINESS,
                                         ARSBILLING_ALt3:COMM_RATE        = ARSBILLING_alias2:COMM_RATE,
                                         ARSBILLING_Alt3:SUB_CODE         = ARSBILLING_alias2:SUB_CODE,
                                         ARSBILLING_Alt3:BILLING_CTR      = ARSBILLING_alias2:BILLING_CTR,
                                         ARSBILLING_Alt3:RETURN_CHECK_CTR = ARSBILLING_alias2:RETURN_CHECK_CTR

            If ARSBILLING_Alt3:COMPANY_ID       = ARSBILLING_alias2:COMPANY_ID And
               ARSBILLING_Alt3:POLICY_NO        = ARSBILLING_alias2:POLICY_NO And
               ARSBILLING_Alt3:TRANS_DATE       = ARSBILLING_alias2:TRANS_DATE And
               ARSBILLING_Alt3:TRANS_EFF        = ARSBILLING_alias2:TRANS_EFF And
               ARSBILLING_Alt3:TRANS_EXP        = ARSBILLING_alias2:TRANS_EXP And
               ARSBILLING_Alt3:TRANS_CODE       = ARSBILLING_alias2:TRANS_CODE And
               ARSBILLING_Alt3:LINE_OF_BUSINESS = ARSBILLING_alias2:LINE_OF_BUSINESS And
               ARSBILLING_Alt3:COMM_RATE        = ARSBILLING_alias2:COMM_RATE And
               ARSBILLING_Alt3:SUB_CODE         = ARSBILLING_alias2:SUB_CODE And
               ARSBILLING_Alt3:BILLING_CTR      = ARSBILLING_alias2:BILLING_CTR And
               ARSBILLING_Alt3:RETURN_CHECK_CTR = ARSBILLING_alias2:RETURN_CHECK_CTR Then
              {
              change arsbilling_alt3
                {
                 if arsbilling_alt3:status one of "B" then
                   {
                     if arsbilling_alt3:installment_amount - (arsbilling_alt3:total_amount_paid +
                                                arsbilling_alt3:write_off_amount) => l_credit_amount_remaining then
                       {
                        arsbilling_alt3:total_amount_paid = arsbilling_alt3:total_amount_paid + l_credit_amount_remaining
                        l_credit_amount_remaining = 0.00
                        if arsbilling_alt3:installment_amount = arsbilling_alt3:total_amount_paid then
                         {
                          arsbilling_alt3:status  = "P"
                         }
                       }
                     else
                       {
                        if arsbilling_alt3:installment_amount - (arsbilling_alt3:total_amount_paid +
                                                       arsbilling_alt3:write_off_amount) < l_credit_amount_remaining then
                         {
                          l_credit_amount_remaining  = (l_credit_amount_remaining - (arsbilling_alt3:installment_amount -
                              (arsbilling_alt3:total_amount_paid + arsbilling_alt3:write_off_amount)))

--                          arsbilling_alt3:total_amount_paid = arsbilling_alt3:installment_amount -
--                                                (arsbilling_alt3:write_off_amount + arsbilling_alt3:total_amount_paid)
                          arsbilling_alt3:total_amount_paid = arsbilling_alt3:installment_amount -
                                                arsbilling_alt3:write_off_amount

                          arsbilling_alt3:status             = "P"
                         }
                       }

                   } -- end of "O" checking

                } -- end of Change

              } -- end of record exit

            } -- trans code 12 and B status

           next arsbilling_alias2

       } -- end of while
    }
next arsoffsetwrk
}

END -- end of Procedure

End -- end of program
