%%                              

/*   arsup900.sd


     SCIPS.com

     December 1, 2001

     Direct bill Non Pay notices
*/
/*

 * Licensed Material - Property of SCIPS.com, Inc.

 * Copyright 2009. All Rights Reserved.

 * This source code represents valuable proprietary information and must

 * not be disclosed to any third party without explicit prior written

 * authorization signed by the Management of SCIPS.com, Inc.

*/
Program
        Name = "Arsup900" ;
        Type="File" ;
        Domain="FLAT";
        Padcharacter = Space ;

        Global String G_COMPANY_ID[10] ;
        Global Unsigned Ascii Number G_POLICY_NO[9] ,
                                     g_image_array_position[1],
                                     g_scan[1] ;

        Global Wdate G_TRANS_DATE ;
        Global Wdate G_TRANS_EFF ;
        Global Wdate G_TRANS_EXP ;

        Global MMDDYYYY date G_STARTING_DATE,
                             G_ENDING_DATE;

        Global Unsigned Ascii Number G_TRANS_CODE[4] ;
        Global Unsigned Ascii Number G_LINE_OF_BUSINESS[4] ;
        Global Unsigned Ascii Number G_COMM_RATE[4]/decimals=2 ;
        Global Unsigned Ascii Number G_SUB_CODE[4] ;
        Global Unsigned Ascii Number G_BILLING_CTR[4] ;
        Global Unsigned Ascii Number G_RETURN_CHECK_CTR[4] ;
        Global String G_REPORT_DEVICE[10];

        String L_OPTION[1]="",
               l_get_late_fee[1];

        string l_cancel_lit[40] ;
        String L_UNDERWRITING_CX[1]="N";
        array [2] of string l_non_pay_name[50] ;
        String L_OUTFILE[15]="arsup900.out";
        Unsigned Ascii Number L_LINE_CTR[3]=0;
        String L_ENTER[1];
        String L_FIRST_TIME[1]="Y";
        Unsigned Ascii Number L_SUB[2],
                              l_zero[1] ;
        Unsigned Ascii Number L_V_POSITION[5]=0/decimals=0;
        String L_ZIPCODE[10]="";
        Unsigned Ascii Number L_LOOP_CTR[2]=0;
        Unsigned Ascii Number L_LINES_PRINTED[2]=0;
        Unsigned Ascii Number L_COPY_CTR[2]=0;

        Unsigned Ascii Number L_PAGES_CTR[4]=0;
        String L_COMPANY[10]="";
        Unsigned Ascii Number L_SUB_CODE[4]=0/decimals=0;

        wdate l_run_date ;
        String L_TRANSACTION[20]="";
        String L_LOGFILE[15]="arsup900.log";
        String L_TOTALS_PAGE[1]="N";
        Unsigned Ascii Number L_ERRORS[4]=0;
        Unsigned Ascii Number L_HOLD_POLICY_NO[9]=0/decimals=0;
        String                l_hold_company_id[10];
        wdate l_hold_cx_eff_date;
        Unsigned Ascii Number L_COPIES_REQUIRED[2]=0;
        Unsigned Ascii Number L_POL_YEAR[4]=0;
        Unsigned Ascii Number L_END_SEQUENCE[4]=0;
        Unsigned Ascii Number L_POLICY_NO[9]=0,
                              l_policy_no1[9]=0,
                              l_dd[2]=0,
                              l_mm[2]=0,
                              l_yy[4]=0 ;

        String L_COPY_LIT[20]="",
               l_invoice_pdf_1[20]="",
               l_header_name[50],
               l_policy_str[15],
               l_file_number[80]="",
               l_file_name[70]="",
               l_file_type[150],
               l_drawer[45]="",
               l_folder_type[80]="",
               l_doc_type[45]="",
               l_doc_date[70]="",
               L_py_policy_year[150],
               l_policy[9] ;

        Unsigned Ascii Number L_HOLD_COPY_CTR[4]=0;
        Unsigned Ascii Number L_H_POSITION[4]=0;
        String L_MANUAL_RUN[1]="N";
        String L_COMPANY_ID[10];
        string l_dec[15];
        Signed Ascii Number L_TOTAL_AMT_DUE[9]=0/decimals=2;
        signed ascii number l_amount_past_due[9]=0.00/decimals=2,
                            l_pay_full_amount[9]=0.00/decimals=2,
                            l_total_cancel[9],
                            l_total_for_due_date[9];

/* buidling the array to hold sfpname keys */
Array [200] Of Unsigned Ascii Number L_SFPNAME_POLICY_NO[9],
                                     L_SFPNAME_POL_YEAR[4],
                                     L_SFPNAME_END_SEQUENCE[4],
                                     L_SFPNAME_PREM_NO[4],
                                     L_SFPNAME_BUILD_NO[4],
                                     L_SFPNAME_SUB_CODE[4];

Unsigned Ascii Number L_SFPNAME_LOOP_CTR[4]=0;
Unsigned Ascii Number L_TEMP_POLICY_NO[9]=0;
Unsigned Ascii Number L_TEMP_POL_YEAR[4]=0;
Unsigned Ascii Number L_TEMP_END_SEQUENCE[4]=0;
Unsigned Ascii Number L_TEMP_PREM_NO[4]=0;
Unsigned Ascii Number L_TEMP_BUILD_NO[4]=0;
Unsigned Ascii Number L_TEMP_SUB_CODE[4]=0;
Unsigned Ascii Number L_ERROR[4]=0;
Unsigned Ascii Number L_NON_PAY_RUN_DAYS[3]=0;
Unsigned Ascii Number L_MAIL_BOOK_CTR[3]=0/decimals=0;
String L_LOB_SUBLINE[2]="00";
String L_RERUN_NOTICES[1]="N";
String L_REPORT_DEVICE[10]="";
String L_LINE_PRINTED[1]="N";
Signed Ascii Number L_TOTAL_AMOUNT_DUE[9]=0/decimals=2;
String L_POLICY_PRINTED[1]="N";
Unsigned Ascii Number L_CTR[4]=0;
unsigned ascii number l_trans_code[2];
String L_LINE_FIELD[250],
       L_LINE_FIELD_1[250],
       L_LINE_FIELD_2[250],
       L_NOTICE_TYPE[5]="CX",
       L_SFS[3]="SFS",
       L_SFS_CODE[3]="SFS",
       L_MORT_ACCOUNT[25] = "",
       L_VALID_AMOUNT[1]="N";

Unsigned Ascii Number L_CX_CTR[9]=0;

-- l_position = effective date of cx
Unsigned Ascii Number L_POSITION[4]=0/decimals=0;

-- l_position_1 = effective of policy
Unsigned Ascii Number L_POSITION_1[4]=0/decimals=0;

-- l_position_2 = expiration date of policy
Unsigned Ascii Number L_POSITION_2[4]=0/decimals=0;

-- l_position_3 = total amount due
Unsigned Ascii Number L_POSITION_3[4]=0/decimals=0;

-- l_position_4 = line of business
Unsigned Ascii Number L_POSITION_4[4]=0/decimals=0;

-- l_position_5 = due date of cx notice
Unsigned ascii number l_position_5[4]=0/decimals=0;

-- l_position_6 = late fee
Unsigned ascii number l_position_6[4]=0/decimals=0;

Unsigned Ascii Number L_LENGTH[4]=0;
String L_SUBSTITUTE_DATE[30]="";
String L_NON_PAY_NOTICE[1]="N";
Unsigned Ascii Number L_CURRENT_CANCEL[1]=0/decimals=0;
Unsigned Ascii Number L_COUNTER[9]=0/decimals=2;
Unsigned Ascii Number L_HOLD_POL_YEAR[4];
Wdate L_HOLD_TRANS_EXP;
String L_CONSENT_ORDER_EXISTS[1]="";
String L_WRITE_OFF[1]="";
Unsigned Ascii Number L_ARSCXWORK_SUB_CODE[4]=0/decimals=0;
Unsigned Ascii Number L_COMM_RATE[4]=0/decimals=3;
Unsigned Ascii Number L_BILLING_CTR[4]=0/decimals=0;
Unsigned Ascii Number L_RETURN_CHECK_CTR[4]=0/decimals=0;
String L_BILLING_BUCKETS[1]="N";
unsigned ascii number l_cx_sub_code[4];
string l_underwriter_name[50];
unsigned ascii number l_underwriter_code[2]/decimals=0;
unsigned ascii number l_policy_hold[9]=0,
                      l_new_trans_code[4]=70;
wdate l_hold_due_date ;
unsigned ascii number l_hold_billing_ctr[4]=0,
                      l_hold_trans_code[4]=0;
string l_company_hold[10];

signed ascii number l_total_installment_amount[9]=0/decimals=2,
                    l_total_late_fees[9]=0/decimals=2,
                    l_total_amount[9]=0/decimals=2,
                    l_total_remaining_balance[9]=0/decimals=2;

        Include "sdpqueue.var"

        Include "scipserr.var"

        Include "sfsrevname7.var"

        Include "csfonts.inc"

        Include "sfscsexec.var"

--        Include "scipserror.var"

        include "virtualdecs.var"
        Include "line_spacing1.var"

/* *****  new check scanning line variables */
string l_check_scan_policy_no[9],
       l_check_scan_due_date[8],
       l_check_scan_current_due[8],
       l_check_scan_total_due[8],
       l_check_scan_check_digit[2],
       l_check_scan_line[50],
       l_check_digit_final_str[3];

-- use this to force amount due to whole numbers without decimals
unsigned ascii number l_check_scan_amount[8]=0/decimals=0;

-- this is for check digit calculations
array [100] of unsigned ascii number l_check_digit_amount[3];
unsigned ascii number l_check_digit_weight[1],
                      l_check_digit_sub[3]=0/decimals=0,
                      l_check_digit_total[4]=0/decimals=0,
                      l_check_digit_number[4]=0/decimals=0,
                      l_check_digit_raw[4]=0/decimals=0,
                      l_check_digit_final[3]=0/decimals=0;

unsigned ascii number l_late_fee_exists[1]=0/decimals=0;

Initialization

--added 03/20/2007 - for imaging purposes
l_non_pay_name[1] = lowercase(programid) + ".pcl"
l_non_pay_name[2] = lowercase(programid) + "i.pcl"
l_header_name = programid + "_header"
deletefile(l_header_name)
Deletefile (L_NON_PAY_NAME[1])
deletefile(l_non_pay_name[2])

Access SFSDEFAULT,
   Set SFSDEFAULT:SFS_CODE = L_SFS

L_COMPANY = SFSDEFAULT:COMPANY_ID
l_company_id = SFSDEFAULT:COMPANY_ID

Access ARSCONTROL,
   Set ARSCONTROL:COMPANY_ID = L_COMPANY, Approximate

access scipsimage,
   set scipsimage:company_id = l_company_id, exact

Access SCIPSIMAGE_version5,
   Set SCIPSIMAGE_version5:COMPANY_ID = l_COMPANY_ID, exact

G_STARTING_DATE = Date(COMMANDLINE[1,8])
G_ENDING_DATE   = Date(COMMANDLINE[9,16])
L_MANUAL_RUN    = Uppercase(COMMANDLINE[17,17])
L_RERUN_NOTICES = Uppercase(COMMANDLINE[18,18]) -- if "Y" then do no update arscancel, sfsmail
G_POLICY_NO     = Val(COMMANDLINE[19,27])
g_scan          = val(commandline[28,28])
g_image_array_position  = val(commandline[29,29])
G_REPORT_DEVICE = COMMANDLINE[30,39]

if l_manual_run one of "y","Y" then
    begin
    l_manual_run = "Y"
    end
else
    begin
    l_manual_run = "N"
    end

if l_rerun_notices one of "y","Y" then
    begin
    l_rerun_notices = "Y"
    end
else
    begin
    l_rerun_notices = "N"
    end




Proc ("arscxwork.mk")/noconsole
Proc ("arscancelwrk2.mk")/noconsole

If L_MANUAL_RUN One Of "N" And
   L_RERUN_NOTICES  Not One Of "Y" Then
    Begin
    G_STARTING_DATE = TODAYSDATE - ARSCONTROL:NON_PAY_RUN_DAYS
    G_ENDING_DATE   = TODAYSDATE - ARSCONTROL:NON_PAY_RUN_DAYS
    L_NON_PAY_RUN_DAYS = 0 -- ARSCONTROL:NON_PAY_RUN_DAYS
    End
Else
    Begin
    L_NON_PAY_RUN_DAYS = 0
    End

Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = L_COMPANY

If ARSCONTROL2:AS_OF_NON_PAYS One Of 1 Then
    Begin
    G_STARTING_DATE = 01.01.1900
    End

Write ("<014>")
Write ("%c%s",09001,"Running ARSUP900 -- Version 7.04   ")
Write ("%c%s%d",10001,"G Starting date  = ",G_STARTING_DATE)
Write ("%c%s%d",11001,"G ending date    = ",G_ENDING_DATE)
Write ("%c%s%s",12001,"L Manual Run     = ",L_MANUAL_RUN )
Write ("%c%s%s",13001,"L rerun notices  = ",L_RERUN_NOTICES)
Write ("%c%s%n",14001,"G Policy No      = ",G_POLICY_NO)
Write ("%c%s%n",15001,"g_scan           = ",g_scan)
Write ("%c%s%n",16001,"g_image_array_position   = ",g_image_array_position)
Write ("%c%s%s",17001,"G report Device  = ", G_REPORT_DEVICE )
Write ("%c%s%s",18001,"command line = ",COMMANDLINE)
Write ("%c%s%s",20001,"Company ID       = ",ARSCONTROL:COMPANY_ID)
Write ("%c%s%n",22001,"ARSCONTROL2:AS_OF_NON_PAYS       = ",ARSCONTROL2:AS_OF_NON_PAYS)

Read (21,1,"here we are in this program ---- Press Enter to Continue ",L_ENTER,1)

If L_RERUN_NOTICES <> "Y" And
   G_POLICY_NO = 0 Then
    Begin
    Do BUILD_CANCEL_FILE

    Do get_late_fee
    Do ARSCANCELWRK2_CLEANUP_MINIMUM_AMOUNTS
    Do ADD_ARSCANCEL
    End
Else
If L_RERUN_NOTICES <> "Y" And
   G_POLICY_NO     <> 0 Then
    Begin
      l_current_cancel = 0
      l_policy_no1  = g_policy_no
      do check_arscancel_nonpay_cx
      if l_current_cancel = 0 then
         do check_sfscancel_nonpay_cx

      if l_current_cancel = 0 then
       {
        Do BUILD_CANCEL_FILE_POLICY_NO
        Do get_late_fee
        do arscancelwrk2_cleanup_minimum_amounts
        Do ADD_ARSCANCEL
       }
    End
else
if l_rerun_notices = "Y" and
   g_policy_no <> 0 then
    begin
    do build_cancel_file_policy_no
    end

--write ("<014>")
--write ("%c%s%s",2001,"l_company   = ",l_company)
--write ("%c%s%s",3001,"l_company_id  = ",l_company_id)
--pause (2000)

Do BUILD_CANCEL_WORK_FILE

--do check_for_correct_amounts

l_sfs = "SFS"
access sfsdefault, set sfsdefault:sfs_code = l_sfs

access arscontrol2, set arscontrol2:company_id = sfsdefault:company_id

if arscontrol2:long_form_non_pay_notice one of 1 then
    begin
    do check_for_lapse
    end
--*******************************************
Do NEW_NOTICES

--Closefile(l_non_pay_name[1])
--*****************************************

Update

Screen Exit

/* since the last record would force the program to exit the loop for
   arscxwork the last policy number would not have its accumulator
   incremented on sfpname, this will allow that record to be updated */

Do GET_CURRENT_SFPNAME1

Access SFPNAME,
   Set SFPNAME:POLICY_NO    = L_POLICY_NO,
       SFPNAME:POL_YEAR     = L_POL_YEAR,
       SFPNAME:END_SEQUENCE = L_END_SEQUENCE

If L_RERUN_NOTICES <> "Y" Then
    Begin
    Do UPDATE_SFPNAME
    End

L_COPY_CTR = 3 -- start at 3 since this is a fixed number
--Do GET_NUMBER_OF_COPIES
Do GET_NUMBER_OF_COPIES1


For L_SUB = 1 To L_COPY_CTR
  {
    /* loop here for the number of copies needed */
    L_PAGES_CTR = 1
    L_HOLD_COPY_CTR = L_SUB
    Do EJECT_PAGE

    if scipsimage:items_as_image[6] one of "1" or               --all other client will get this one
       scipsimage_version5:items_as_image[6] one of "1" then    --delos will use this version5
      {
        if g_scan one of 1 then
          {
            if l_hold_copy_ctr one of 3 then
              {
               l_non_pay_name[1] = lowercase(programid) + "i.pcl"
               l_non_pay_name[2] = lowercase(programid) + ".pcl"
              }
          }
      }

    Do PRINT_FORM
    L_LINES_PRINTED = 0
    L_V_POSITION    = 1800

    do print_detail_line

    if scipsimage:items_as_image[6] one of "1" or
       scipsimage_version5:items_as_image[6] one of "1" then
      {
        if g_scan one of 1 then
          {
            if l_hold_copy_ctr one of 3 then
              {
                Closefile(l_non_pay_name[1])
--                write("%c%S%x",01001,"scipsimage_version5:items_as_image[6]",scipsimage_version5:items_as_image[6])
--                read(10,1,"Press enter to continue",l_enter,1)
                if scipsimage_version5:items_as_image[6] one of "1" then
                  {
                    do add_image_header_version5
                  }
                else
                  {
                    do add_image_header
                  }
                l_non_pay_name[1] = lowercase(programid) + ".pcl"
                l_non_pay_name[2] = lowercase(programid) + "i.pcl"
              }
          }
       }
    else
      {
        closefile(l_non_pay_name[1])
        closefile(l_non_pay_name[2])
      }
  }  -- } end of FOR LOOP

If L_RERUN_NOTICES <> "Y" Then
    Begin
    Do UPDATE_MAIL_BOOK
    End

Closefile( L_LOGFILE )
If G_STARTING_DATE <> 00.00.0000 And
   G_ENDING_DATE   <> 00.00.0000 Then
    Begin
    Deletefile (L_OUTFILE)
    Writefile (L_OUTFILE,"<NL>")
    Writefile (L_OUTFILE,"%s%s","==========| Automatic Non-Pay Processing Version 7.04 |=========", "<NL><NL>")
    Writefile (L_OUTFILE,"%s%d%s","Starting Date =====| ",G_STARTING_DATE,             "<NL>")
    Writefile (L_OUTFILE,"%s%d%s","Ending Date   =====| ",G_ENDING_DATE,               "<NL>")
    Writefile (L_OUTFILE,"%s%s%s","Username      =====| ",USERNAME,                    "<NL>")
    Writefile (L_OUTFILE,"%s%d%s","Rundate       =====| ",TODAYSDATE,                  "<NL>")
    Writefile (L_OUTFILE,"%s%t%s","System Time   =====| ",SYSTEMTIME,                  "<NL>")
    Writefile (L_OUTFILE,"%s%s%s","Manual Run    =====| ",L_MANUAL_RUN,                "<NL>")
    Writefile (L_OUTFILE,"%s%n%s","Days Since Due=====| ",L_NON_PAY_RUN_DAYS,          "<NL>")
    Writefile (L_OUTFILE,"%s%n%s","Completed with ====| ",L_ERRORS," number of errors   <NL>")
    Writefile (L_OUTFILE,"%s","<NL>If Manual Run is 'Y' then Days Since Due will be zero.<NL>")
    Writefile (L_OUTFILE,"%s","<NL>NOTE: if the number of errors reported on the line above <NL>")
    Writefile (L_OUTFILE,"%s","is greater than 0 (ZERO) then there was a problem with the <NL>")
    Writefile (L_OUTFILE,"%s","automatic invoicing procedure.  Please contact SCIPS at 1-877-724-7799 or<NL>")
    Writefile (L_OUTFILE,"%s%s","email ",Trun(ARSCONTROL:COMPANY_ID))
    Writefile (L_OUTFILE,"%s","@scips.com for immediate help<NL><NL>")
    Writefile (L_OUTFILE,"%s%s","==========| Automatic Non-Pay Processing Completed |=========","<NL><NL>")
    Closefile (L_OUTFILE)
--    Proc (":cli mail -s arsup900 davep@scips.com < %s",Trun(L_OUTFILE))/noconsole
    End
pause (50000)
--Include "scipserror.pro"

do print_output_file

Errors
--Include "scipserror.inc"

If ERRORNUMBER <> 0 Then
    Begin
    L_ERRORS = L_ERRORS + 1
    Writefile (L_LOGFILE,"arsmt900 had errors<NL>")
    Writefile (L_LOGFILE,"Date of run: %d<NL> ",TODAYSDATE )
    Writefile (L_LOGFILE,"Policy No  : %n<NL> ",ARSBILLING:POLICY_NO )
    Writefile (L_LOGFILE,"Error        %n %s<NL><NL> ",ERRORNUMBER,ERRORTEXT)
    Writefile (L_LOGFILE,"========================================<NL><NL>")
    End

Procedure Definition

procedure print_output_file

begin
  l_non_pay_name[1] = lowercase(programid) + ".pcl"
  l_non_pay_name[2] = lowercase(programid) + "i.pcl"
/*   --this can not be here because it is in a batch program it need to be in a screen program to call showdocument.
If G_REPORT_DEVICE = "visual" Then
  Begin
    l_dec     = lowercase(programid) + ".pcl"          --which is arsup900.pcl
    l_dec_pdf = lowercase(programid) + ".pdf"          --which is arsup900.pdf
    write("%c<014>%x",01001,l_non_pay_name[1])
    write("%c%x",02001,l_non_pay_name[2])
    --read(10,1,"Press enter to continue",l_enter,1)
    Proc("pcl2pdf -letter -csize -nowin -ra %s /www/%s",Trun(l_dec),Trun(l_dec_pdf)) --/noconsole
    -- read(10,1,"Press enter to continue",l_enter,1)
    L_USERNAME = Trun(USERNAME)

    Access SFSPROFILE, Set SFSPROFILE:USER_ID = L_USERNAME, Exact

    If SFSPROFILE:USER_ID <> L_USERNAME Then
        Begin
        L_USERNAME = "default"
        Access SFSPROFILE,
           Set SFSPROFILE:USER_ID = L_USERNAME, Exact
        End

    L_UNIX_PATH   = SFSPROFILE:UNIX_PATH/raw
    L_UNIX_SERVER = SFSPROFILE:UNIX_SERVER/raw

    showdocument (trun(l_unix_server),trun(l_dec_pdf))

  End

Else
*/
  Begin
    Proc("lp -d %s -oraw %s",Trun(G_REPORT_DEVICE), l_non_pay_name[1])
  End

-- these need to be assigned prior to the include file
I_INVOICE_NAME  = l_non_pay_name[1]
I_COMPANY_ID    = SFSDEFAULT:COMPANY_ID
I_REPORT_DEVICE = G_REPORT_DEVICE
I_STARTING_DATE = G_STARTING_DATE
I_ENDING_DATE   = G_ENDING_DATE
I_RUN_MODE      = 99

--Include "sdpqueue.pro"

end

Procedure BUILD_CANCEL_FILE
Begin
--Write ("%c%s",06001," ---- Build Cancel File ---- ")
L_FIRST_TIME               = "Y"
L_HOLD_POLICY_NO           = 0
L_UNDERWRITING_CX          = "N"
L_NON_PAY_NOTICE           = "N"
L_COUNTER                  = 0
--L_COMPANY = ""
l_valid_amount = "Y"

Access ARSBILLING,
   Set ARSBILLING:COMPANY_ID = "", Approximate

Access ARSCONTROL, Set ARSCONTROL:COMPANY_ID = ARSBILLING:COMPANY_ID

Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = ARSBILLING:COMPANY_ID

While ARSBILLING:ERRORNUMBER = 0  -- read until eof
    Begin
    /* house cleaning */
    l_valid_amount= "Y"
    L_CURRENT_CANCEL = 0
--    l_company_id = arsbilling:company_id
    l_policy_no1  = arsbilling:policy_no
    do check_arscancel_nonpay_cx
    if l_current_cancel = 0 then
       do check_sfscancel_nonpay_cx


    If ARSCONTROL:PRINT_CX_NOTICE_ON_OPEN_STATUS One Of 1 Then
        Begin
        If G_POLICY_NO = 0 And
           ARSBILLING:DUE_DATE >= G_STARTING_DATE And
           ARSBILLING:DUE_DATE <= G_ENDING_DATE And
           ARSBILLING:BILL_PLAN = "DB" And
           L_CURRENT_CANCEL   = 0 And
   -- P = paid
   -- C = Cancelled
   -- X = CX Balance due
   -- D = Disbursement
   -- R = Return NSF check
   -- V = VOID A/P check
           ARSBILLING:STATUS Not One Of "T","P","C","X","D","R","V" And  -- pickup OPENS too
--           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,50,51,55,60,61,62,63,64,65,66,67,68,69,70 Then
           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,51,55,61,63,65,67,70 Then
            Begin
            Do ADD_ARSCANCELWRK2
            End
        Else
        If G_POLICY_NO <> 0 And
           G_POLICY_NO = ARSBILLING:POLICY_NO And
           ARSBILLING:BILL_PLAN = "DB" And
           L_CURRENT_CANCEL = 0 And
           ARSBILLING:STATUS Not One Of "T","P","C","X","D","R","V" And  -- pickup OPENS too
--           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,50,51,55,60,61,62,63,64,65,66,67,68,69,70 and
           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,51,55,61,63,65,67,70 and
--         ARSBILLING:STATUS One Of "O","B"  -- pickup OPENS too
           ARSBILLING:DUE_DATE >= G_STARTING_DATE And
           ARSBILLING:DUE_DATE <= G_ENDING_DATE Then
            Begin
            Do ADD_ARSCANCELWRK2
            End

        End -- end of print_cx_notice_on_open_status = 1 checking

    -- PUT HERE UNTIL DEBUGGUED - THEN MOVE TO CORRECT LOCATION

    If ARSCONTROL:PRINT_CX_NOTICE_ON_OPEN_STATUS One Of 0 Then
        Begin
        If G_POLICY_NO = 0 And
           ARSBILLING:DUE_DATE >= G_STARTING_DATE And
           ARSBILLING:DUE_DATE <= G_ENDING_DATE And
           ARSBILLING:BILL_PLAN = "DB" And
           L_CURRENT_CANCEL     = 0 And
           L_VALID_AMOUNT       = "Y" AND
   -- P = paid
   -- C = Cancelled
   -- X = CX Balance due
   -- D = Disbursement
   -- R = Return NSF check
   -- V = VOID A/P check
           ARSBILLING:STATUS Not One Of "T","O","P","C","X","D","R","V" And
--           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,50,51,55,60,61,62,63,64,65,66,67,68,69,70 Then
           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,51,55,61,63,65,67,70 Then
            Begin
            Do ADD_ARSCANCELWRK2
            End
        Else
        If G_POLICY_NO <> 0 And
           G_POLICY_NO = ARSBILLING:POLICY_NO And
           ARSBILLING:BILL_PLAN = "DB" And
           L_CURRENT_CANCEL = 0 And
           ARSBILLING:STATUS Not One Of "T","P","C","X","D","R","V" And  -- pickup OPENS too
--           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,36,35,50,51,55,60,61,62,63,64,65,66,67,68,69,70 And
           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,36,35,51,55,61,63,65,67,70 And
--         ARSBILLING:STATUS Not One Of "O","P","C"
           ARSBILLING:DUE_DATE >= G_STARTING_DATE And
           ARSBILLING:DUE_DATE <= G_ENDING_DATE Then
            Begin
            Do ADD_ARSCANCELWRK2
            End
        End -- end of print_cx_notice_on_open_status = 1 checking

    Next ARSBILLING
    End

--DO CHECK_FOR_VALID_AMOUNT

End

Procedure BUILD_CANCEL_FILE_POLICY_NO
-- create work file for specific policy number requested
Begin
L_FIRST_TIME      = "Y"
L_HOLD_POLICY_NO  = 0
L_UNDERWRITING_CX = "N"
L_NON_PAY_NOTICE  = "N"

L_COMPANY = ARSCONTROL:COMPANY_ID

-- this procedure will zero out the agents commission balance for current month

Access ARSBILLING, Set ARSBILLING:COMPANY_ID = L_COMPANY,
                       ARSBILLING:POLICY_NO  = G_POLICY_NO, Approximate

Access ARSCONTROL, Set ARSCONTROL:COMPANY_ID = ARSBILLING:COMPANY_ID

While ARSBILLING:COMPANY_ID = L_COMPANY And
      ARSBILLING:POLICY_NO  = G_POLICY_NO and
      l_current_cancel = 0 -- read until eof
    Begin
    If ARSCONTROL:PRINT_CX_NOTICE_ON_OPEN_STATUS One Of 1 Then
        Begin
        If G_POLICY_NO = 0 And
           ARSBILLING:DUE_DATE >= G_STARTING_DATE And
           ARSBILLING:DUE_DATE <= G_ENDING_DATE And
           ARSBILLING:BILL_PLAN = "DB" And
   -- P = paid
   -- C = Cancelled
   -- X = CX Balance due
   -- D = Disbursement
   -- R = Return NSF check
   -- V = VOID A/P check
           ARSBILLING:STATUS Not One Of "T","P","C","X","D","R","V" And  -- pickup OPENS too
--           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,50,51,55,60,61,62,63,64,65,66,67,68,69,70 Then
           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,51,55,61,63,65,67,70 Then
            Begin
            Do ADD_ARSCANCELWRK2
            End
        Else
        If G_POLICY_NO <> 0 And
           G_POLICY_NO = ARSBILLING:POLICY_NO And
           ARSBILLING:BILL_PLAN = "DB" And
           ARSBILLING:STATUS Not One Of "T","P","C","X","D","R","V" And  -- pickup OPENS too
--           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,50,51,55,60,61,62,63,64,65,66,67,68,69,70 And
           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,51,55,61,63,65,67,70 And
--         ARSBILLING:STATUS One Of "O","B"  -- pickup OPENS too
           ARSBILLING:DUE_DATE >= G_STARTING_DATE And
           ARSBILLING:DUE_DATE <= G_ENDING_DATE Then
            Begin
            Do ADD_ARSCANCELWRK2
            End

        End -- end of print_cx_notice_on_open_status = 0 checking

    If ARSCONTROL:PRINT_CX_NOTICE_ON_OPEN_STATUS One Of 0 Then
        Begin
        If G_POLICY_NO = 0 And
           ARSBILLING:DUE_DATE >= G_STARTING_DATE And
           ARSBILLING:DUE_DATE <= G_ENDING_DATE And
           ARSBILLING:BILL_PLAN = "DB" And
   -- P = paid
   -- C = Cancelled
   -- X = CX Balance due
   -- D = Disbursement
   -- R = Return NSF check
   -- V = VOID A/P check
           ARSBILLING:STATUS Not One Of "O","P","C","X","D","R","V" And
--           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,50,51,55,60,61,62,63,64,65,66,67,68,69,70 Then
           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,51,55,61,63,65,67,70 Then
            Begin
            Do ADD_ARSCANCELWRK2
            End
        Else
        begin
        If G_POLICY_NO <> 0 And
           G_POLICY_NO = ARSBILLING:POLICY_NO And
           ARSBILLING:BILL_PLAN = "DB" And
           ARSBILLING:STATUS Not One Of "T","P","X","C","D","R","V" And  -- pickup OPENS too
--           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,50,51,55,60,61,62,63,64,65,66,67,68,69,70 And
           ARSBILLING:TRANS_CODE Not One Of 21,25,26,30,35,36,51,55,61,63,65,67,70 And
           ARSBILLING:DUE_DATE >= G_STARTING_DATE And
           ARSBILLING:DUE_DATE <= G_ENDING_DATE Then
            Begin
            Do ADD_ARSCANCELWRK2
            End
        end

        End -- end of print_cx_notice_on_open_status = 1 checking

   Next ARSBILLING
   End

End

Procedure ADD_ARSCANCELWRK2
Begin
Access SFPMASTER, Set SFPMASTER:POLICY_NO    = arsbilling:POLICY_NO,
                      SFPMASTER:POL_YEAR     = arsbilling:POL_YEAR,
                      SFPMASTER:END_SEQUENCE = arsbilling:END_SEQUENCE

if (sfpmaster:trans_code = 15 and
    arscontrol2:print_cancel_on_audit = 1) or
    sfpmaster:trans_code <> 15 then
   {

    Access ARSCANCELWRK2_ALIAS, Set ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSBILLING:COMPANY_ID,
                                    ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSBILLING:POLICY_NO,
                                    ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSBILLING:DUE_DATE

/*  record does not exist in arscancelwrk2 file */
    If ARSCANCELWRK2_ALIAS:COMPANY_ID <> ARSBILLING:COMPANY_ID Or
       ARSCANCELWRK2_ALIAS:POLICY_NO  <> ARSBILLING:POLICY_NO Or
       ARSCANCELWRK2_ALIAS:DUE_DATE   <> ARSBILLING:DUE_DATE Then
        Begin

        L_COUNTER = L_COUNTER + 1

        if l_counter = 1 then
          begin
            write ("<014>")
          end

        If L_COUNTER Mod 1000 = 0 Then
          Begin

          End

        Add ARSCANCELWRK2_ALIAS
            Begin
            ARSCANCELWRK2_ALIAS:RECORD  = ""/raw
            ARSCANCELWRK2_ALIAS:COMPANY_ID           = ARSBILLING:COMPANY_ID/raw
            ARSCANCELWRK2_ALIAS:POLICY_NO            = ARSBILLING:POLICY_NO
            ARSCANCELWRK2_ALIAS:DUE_DATE             = ARSBILLING:DUE_DATE
            ARSCANCELWRK2_ALIAS:TRANS_CODE           = ARSBILLING:TRANS_CODE
--        arscancelwrk2_alias:trans_code           = sfpmaster:trans_code
            ARSCANCELWRK2_ALIAS:TRANS_DATE           = TODAYSDATE
            ARSCANCELWRK2_ALIAS:TRANS_EFF            = ARSBILLING:TRANS_EFF
            ARSCANCELWRK2_ALIAS:EXP_DATE             = ARSBILLING:TRANS_EXP
            ARSCANCELWRK2_ALIAS:LINE_OF_BUSINESS     = ARSBILLING:LINE_OF_BUSINESS
            ARSCANCELWRK2_ALIAS:PAYMENT_PLAN         = ARSBILLING:PAYMENT_PLAN
            arscancelwrk2_alias:bill_plan            = arsbilling:bill_plan
    /* changed 12/05/2001 DLP - this way if a date range is run the eff date is always
       15 days from the run date */
    --      ARSCANCELWRK2_ALIAS:CX_EFF_DATE          = TODAYSDATE + ARSCONTROL:NON_PAY_DAYS
    --      arscancelwrk2_alias:cx_eff_date          = todaysdate + sfsline:lapse_days_to_cancel
    --access sfsline, set sfsline:company_id   = arsbilling:company_id,
    --                    sfsline:line_of_business = arsbilling:line_of_business,
    --                    sfsline:lob_subline      = "0000"

            if arscontrol2:long_form_non_pay_notice one of 1 then
                begin
                if arsbilling:trans_code one of 14 and
                   arsbilling:billing_ctr one of 1 then
                    begin
                    arscancelwrk2_alias:cx_eff_date = todaysdate +
                                                      (sfsline:lapse_days_to_cancel +
                                                       sfsline:lapse_mailing_days)
                    end
                else
                    begin
                    arscancelwrk2_alias:cx_eff_date = todaysdate +
                                                      (sfsline:cx_days_to_cancel +
                                                       sfsline:cx_mailing_days)
                    end
                end
            else
                begin
                arscancelwrk2_alias:cx_eff_date          = todaysdate + arscontrol:non_pay_days
                end
            ARSCANCELWRK2_ALIAS:CX_STATUS            = "P"
            ARSCANCELWRK2_ALIAS:AGENT_NO             = ARSBILLING:AGENT_NO
            ARSCANCELWRK2_ALIAS:CX_DATE              = TODAYSDATE

    --  to separate past due amount  from fees - 04/08/2008
            if arsbilling:trans_code one of 18,70,28,50,68 then
              {
               arscancelwrk2_alias:fee_amount        = arsbilling:installment_amount -
                                                       arsbilling:total_amount_paid -
                                                       arsbilling:write_off_amount
              }
            else
              {
               ARSCANCELWRK2_ALIAS:AMOUNT_PAST_DUE      = ARSBILLING:INSTALLMENT_AMOUNT -
                                                          ARSBILLING:TOTAL_AMOUNT_PAID -
                                                          ARSBILLING:WRITE_OFF_amount
              }


            ARSCANCELWRK2_ALIAS:CHECK_REFERENCE      = 0000
            ARSCANCELWRK2_ALIAS:REASON_CODE          = 100
            ARSCANCELWRK2_ALIAS:ITEM_NUMBER          = L_CX_CTR
            ARSCANCELWRK2_ALIAS:POL_YEAR             = ARSBILLING:POL_YEAR
            ARSCANCELWRK2_ALIAS:END_SEQUENCE         = ARSBILLING:END_SEQUENCE
            ARSCANCELWRK2_ALIAS:BILLING_CTR          = ARSBILLING:BILLING_CTR
            End -- end of add
        End
    Else
        Begin
        If ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSBILLING:COMPANY_ID or
           ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSBILLING:POLICY_NO or
           ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSBILLING:DUE_DATE Then
            Begin
            Change ARSCANCELWRK2_ALIAS
                Begin
                ARSCANCELWRK2_ALIAS:BILLING_CTR     = ARSBILLING:BILLING_CTR

    --  to separate past due amount  from fees - 04/08/2008
                if arsbilling:trans_code one of 18,70,28,68,50 then
                  {
                   arscancelwrk2_alias:fee_amount        = arscancelwrk2_alias:fee_amount +
                                                           (arsbilling:installment_amount -
                                                           arsbilling:total_amount_paid -
                                                           arsbilling:write_off_amount)
                  }
                else
                  {

                    ARSCANCELWRK2_ALIAS:AMOUNT_PAST_DUE = ARSCANCELWRK2_ALIAS:AMOUNT_PAST_DUE +
                                                          (ARSBILLING:INSTALLMENT_AMOUNT -
                                                          ARSBILLING:TOTAL_AMOUNT_PAID -
                                                          ARSBILLING:WRITE_OFF_AMOUNT)


                  }
                End -- end of change
            End
        End -- end of record exists checking

    -- june 28, 2004 moved to here
    --Do UPDATE_MAIL_BOOK
   }
End  -- end of procedure

Procedure ADD_ARSCANCEL
Begin
 /* house cleaning */

 L_CURRENT_CANCEL = 0
 L_COUNTER        = 0

--l_company_id = ""

Access ARSCANCELWRK2_alt,
   Set ARSCANCELWRK2_alt:COMPANY_ID = l_company_id, Approximate

--access sfpmaster, set sfpmaster:policy_no = arscxwork_alias:policy_no,
  --                    sfpmaster:pol_year  = arscxwork_alias:pol_year,
    --                  sfpmaster:end_sequence = 0, generic

While ARSCANCELWRK2_alt:company_id <> ""
    Begin
    L_COUNTER = L_COUNTER + 1

    If L_COUNTER Mod 1 = 0 Then
        Begin
        Write ("%c%s%n",17001,"Add ARSCancel Counter = ", L_COUNTER)
        End

    Access ARSCANCEL_ALIAS, Set ARSCANCEL_ALIAS:COMPANY_ID = ARSCANCELWRK2_alt:COMPANY_ID,
                                ARSCANCEL_ALIAS:POLICY_NO  = ARSCANCELWRK2_alt:POLICY_NO, Approximate

    L_SUB = 0
    While ARSCANCEL_ALIAS:COMPANY_ID = ARSCANCELWRK2_alt:COMPANY_ID And
          ARSCANCEL_ALIAS:POLICY_NO  = ARSCANCELWRK2_alt:POLICY_NO
        Begin
        L_SUB_CODE = ARSCANCEL_ALIAS:SUB_CODE

        Next ARSCANCEL_ALIAS
        End

    L_SUB_CODE = L_SUB_CODE + 10
    L_CX_CTR   = L_CX_CTR + 1

    Add ARSCANCEL_ALIAS
        Begin


        ARSCANCEL_ALIAS:COMPANY_ID           = ARSCANCELWRK2_alt:COMPANY_ID
        ARSCANCEL_ALIAS:POLICY_NO            = ARSCANCELWRK2_alt:POLICY_NO
        ARSCANCEL_ALIAS:SUB_CODE             = L_SUB_CODE
        ARSCANCEL_ALIAS:TRANS_CODE           = arscancelwrk2_alt:TRANS_CODE
        ARSCANCEL_ALIAS:TRANS_DATE           = TODAYSDATE
        ARSCANCEL_ALIAS:TRANS_EFF            = ARSCANCELWRK2_alt:TRANS_EFF
        ARSCANCEL_ALIAS:EXP_DATE             = ARSCANCELWRK2_alt:EXP_DATE
        ARSCANCEL_ALIAS:LINE_OF_BUSINESS     = ARSCANCELWRK2_alt:LINE_OF_BUSINESS
        ARSCANCEL_ALIAS:PAYMENT_PLAN         = ARSCANCELWRK2_alt:PAYMENT_PLAN
        ARSCANCEL_ALIAS:DUE_DATE             = ARSCANCELWRK2_alt:DUE_DATE
        arscancel_alias:billing_ctr          = arscancelwrk2_alt:billing_ctr

/* changed 06/20/2006 DLP - use the line of business to determine the number
                            of days that the insured will get to pay the
                            notice until the policy is actually cancelled */

        access sfsline, set sfsline:company_id       = arscancelwrk2_alt:company_id,
                            sfsline:line_of_business = arscancelwrk2_alt:line_of_business,
                            sfsline:lob_subline      = "0000"

        access arscontrol, set arscontrol:company_id = arscancel_alias:company_id

        access arscontrol2, set arscontrol2:company_id = arscancel_alias:company_id

-- lapse days
        if arscontrol2:long_form_non_pay_notice one of 1 then
            begin
            if arscancelwrk2_alt:billing_ctr = 1 and
               arscancelwrk2_alt:trans_code one of 14 then
                begin
                arscancel_alias:cx_eff_date = todaysdate +
                                              (sfsline:lapse_days_to_cancel +
                                              sfsline:lapse_mailing_days)
                end
            else
                begin
                if sfsline:cx_days_to_cancel <> 0 then
                    begin
                    arscancel_alias:cx_eff_date  = todaysdate +
                                                   (sfsline:cx_days_to_cancel +
                                                   sfsline:cx_mailing_days)
                    end
                end
            end

        if arscontrol2:long_form_non_pay_notice not one of 1 then
            begin
            ARScancel_alias:CX_EFF_DATE  = TODAYSDATE + ARSCONTROL:NON_PAY_DAYS
            end

        ARSCANCEL_ALIAS:CX_STATUS            = "P"
        ARSCANCEL_ALIAS:AGENT_NO             = ARSCANCELWRK2_alt:AGENT_NO
        ARSCANCEL_ALIAS:CX_DATE              = TODAYSDATE
        ARSCANCEL_ALIAS:AMOUNT_PAST_DUE      = (ARSCANCELWRK2_alt:AMOUNT_PAST_DUE + arscancelwrk2_alt:fee_amount)
        ARSCANCEL_ALIAS:CHECK_REFERENCE      = 0000
        ARSCANCEL_ALIAS:REASON_CODE          = 100
/* added record number to the file so that the notices can print the same
   "ctr" as the mail book can */
        ARSCANCEL_ALIAS:ITEM_NUMBER          = L_CX_CTR
        ARSCANCEL_ALIAS:POL_YEAR             = ARSCANCELWRK2_alt:POL_YEAR
        ARSCANCEL_ALIAS:END_SEQUENCE         = ARSCANCELWRK2_alt:END_SEQUENCE
        ARSCANCEL_ALIAS:BILLING_CTR          = ARSCANCELWRK2_alt:BILLING_CTR
        End -- end of add

    Next ARSCANCELWRK2_alt
    End

End  -- end of procedure

Procedure check_arscancel_nonpay_cx
begin
/*
checking to see if there is an outstanding non-pay notice already on
file.  If there is do not process this policy number for another
non-pay notice.
*/

      Access ARSCANCEL, Set ARSCANCEL:COMPANY_ID = l_company_ID,
                            ARSCANCEL:POLICY_NO  = l_POLICY_NO1, Approximate

      While ARSCANCEL:COMPANY_ID = l_COMPANY_ID And
            ARSCANCEL:POLICY_NO  = l_POLICY_NO1
         Begin
           If ARSCANCEL:CX_STATUS Not One Of "R" Then
            Begin
             L_CURRENT_CANCEL = 1
            End

        Next ARSCANCEL
       End
end

procedure check_sfscancel_nonpay_cx
begin
Access SFSCANCEL, Set SFSCANCEL:COMPANY_ID = l_COMPANY_ID,
                      SFSCANCEL:POLICY_NO  = l_POLICY_NO1, Approximate

While SFSCANCEL:COMPANY_ID = l_COMPANY_ID And
      SFSCANCEL:POLICY_NO  = l_POLICY_NO1
        Begin
        If SFSCANCEL:STATUS Not One Of "CURRENT", "REINSTATED","ACTIVE" and
           sfscancel:cancellation_code one of 100 Then
            Begin
            L_CURRENT_CANCEL = 1
            End

        Next SFSCANCEL
        End
end

Procedure CHECK_FOR_UNDERWRITING_CX
Begin
L_UNDERWRITING_CX = "N"

Access SFSCANCEL, Set SFSCANCEL:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID,
                      SFSCANCEL:POLICY_NO  = ARSCANCELWRK2:POLICY_NO, Approximate

While SFSCANCEL:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID And
      SFSCANCEL:POLICY_NO  = ARSCANCELWRK2:POLICY_NO And
      L_UNDERWRITING_CX    = "N"
        Begin
        If SFSCANCEL:STATUS Not One Of "CURRENT", "REINSTATED","ACTIVE" and
           sfscancel:cancellation_code not one of 100 Then
            Begin
            L_UNDERWRITING_CX = "Y"
            End

        Next SFSCANCEL
        End

If L_UNDERWRITING_CX <> "Y" Then
    Begin
    Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = ARSCANCELWRK2:POLICY_NO

    Access SFPNAME,
       Set SFPNAME:POLICY_NO    = SFPCURRENT:POLICY_NO,
           SFPNAME:POL_YEAR     = SFPCURRENT:POL_YEAR,
           SFPNAME:END_SEQUENCE = SFPCURRENT:END_SEQUENCE

    If SFPNAME:STATUS = "CANCELLED" Then
        Begin
        L_UNDERWRITING_CX = "Y"
        End

    End

End

Procedure CHECK_FOR_NON_PAY
Begin
L_NON_PAY_NOTICE = "N"

Access ARSCANCEL, Set ARSCANCEL:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID,
                      ARSCANCEL:POLICY_NO  = ARSCANCELWRK2:POLICY_NO, Approximate

While ARSCANCEL:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID And
      ARSCANCEL:POLICY_NO  = ARSCANCELWRK2:POLICY_NO
        Begin
        If ARSCANCEL:CX_STATUS <> "R" Then
            Begin
            If ARSCANCEL:DUE_DATE <= G_ENDING_DATE Then
                Begin
                L_NON_PAY_NOTICE = "Y"
                End
            End

        Next ARSCANCEL
        End

End

Procedure GET_NEXT_ITEMNUMBER
Begin
I_CSEXEC_APPLICATION = "ARSCX"

Include "SFSCSEXEC.PRO"

End

Procedure ARSCANCELWRK2_CLEANUP_MINIMUM_AMOUNTS
Begin
L_UNDERWRITING_CX = ""
L_NON_PAY_NOTICE  = ""
L_COMPANY         = ""
L_COUNTER         = 0
l_company_hold    = ""
l_policy_hold     = 0

Access ARSCANCELWRK2, Set ARSCANCELWRK2:COMPANY_ID = L_COMPANY, Approximate

While ARSCANCELWRK2:ERRORNUMBER = 0
    Begin
    L_WRITE_OFF = "N"
    L_COUNTER   = L_COUNTER + 1

    If L_COUNTER Mod 100 = 0 Then
        Begin
        Write ("%c%s%n",16001,"ARSCANCELWKR2 Cleanup Minimum Amounts = ", L_COUNTER)
        End


access arscancelwrk2_alt, set arscancelwrk2_alt:company_id = arscancelwrk2:company_id,
                                   arscancelwrk2_alt:policy_no  = arscancelwrk2:policy_no, generic

l_total_cancel = 0
l_total_for_due_date = 0

while arscancelwrk2_alt:company_id = arscancelwrk2:company_id and
      arscancelwrk2_alt:policy_no  = arscancelwrk2:policy_no
       {
         if arscancelwrk2_alt:exp_date = arscancelwrk2:exp_date then
         {
          L_total_cancel = l_total_cancel + arscancelwrk2_alt:fee_amount + arscancelwrk2_alt:amount_past_due

          if arscancelwrk2:due_date = arscancelwrk2_alt:due_date then
           {
             l_total_for_due_date = arscancelwrk2_alt:fee_amount + arscancelwrk2_alt:amount_past_due
           }
         }

       next arscancelwrk2_alt
       }


    Access ARSCONTROL, Set ARSCONTROL:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID

    Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = ARSCANCELWRK2:COMPANY_ID,
                           ARSPAYPLAN:LINE_OF_BUSINESS = ARSCANCELWRK2:LINE_OF_BUSINESS,
                           ARSPAYPLAN:PAYMENT_PLAN     = ARSCANCELWRK2:PAYMENT_PLAN

    Do CHECK_FOR_UNDERWRITING_CX

    Do CHECK_FOR_NON_PAY

    L_BILLING_BUCKETS = "Y"

    Do GET_BILLING_REMAINING_BUCKET_COUNT

-- this if is for adding the due date together
    If (l_total_cancel <= ARSCONTROL:WAIVE_AMOUNT_DEBIT And

-- this if is for looking at the due date individually
--    If (l_total_for_due_date <= ARSCONTROL:WAIVE_AMOUNT_DEBIT And
       l_total_cancel >= 0) And
       L_BILLING_BUCKETS One Of "N" then
--     ARSCANCELWRK2:BILLING_CTR = ARSPAYPLAN:NUMBER_OF_PAYMENTS Then
        Begin
        L_WRITE_OFF = "Y"
        Do WRITE_OFF_BILLING_RECORDS
        End


-- fee amounts > 0 and  amount past due = 0  making only fees due - remove record
    if (l_total_cancel <= arscancelwrk2:fee_amount And
       ARSCANCELWRK2:BILLING_CTR <= ARSPAYPLAN:NUMBER_OF_PAYMENTS) Or
       l_total_cancel <= ARSCONTROL:cancel_WAIVE_AMOUNT or
       L_UNDERWRITING_CX One Of "Y" Or
       L_NON_PAY_NOTICE One Of "Y" then

        {
          Access ARSCANCELWRK2_ALIAS, Set ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID,
                                          ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSCANCELWRK2:POLICY_NO,
                                          ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSCANCELWRK2:DUE_DATE

          If ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID And
             ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSCANCELWRK2:POLICY_NO And
             ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSCANCELWRK2:DUE_DATE Then
              Begin
              Delete ARSCANCELWRK2_ALIAS
              l_get_late_fee = "N"

              End

        }
    else
        {
--  01/02/2008 - changed < to <= for email from Lebanon - it is creating a cancallation
-- if amount past due + fees are less the cancel waive amount then remove

        l_get_late_fee = "Y"

        l_amount_past_due = arscancelwrk2:amount_past_due + arscancelwrk2:fee_amount

        If (l_total_cancel < ARSCONTROL:cancel_WAIVE_AMOUNT And
           ARSCANCELWRK2:BILLING_CTR <= ARSPAYPLAN:NUMBER_OF_PAYMENTS) then
            Begin
              Access ARSCANCELWRK2_ALIAS, Set ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID,
                                              ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSCANCELWRK2:POLICY_NO,
                                              ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSCANCELWRK2:DUE_DATE

              If ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID And
                 ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSCANCELWRK2:POLICY_NO And
                 ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSCANCELWRK2:DUE_DATE Then
                  Begin
                  Delete ARSCANCELWRK2_ALIAS
                  l_get_late_fee = "N"
--                  do delete_late_fee
                  End

            End
          else
           {
            If (arscancelwrk2:amount_past_due <> 0.00) and
               (L_UNDERWRITING_CX One Of "Y" or
               L_NON_PAY_NOTICE One Of "Y") then
                Begin
                 Access ARSCANCELWRK2_ALIAS, Set ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID,
                                                 ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSCANCELWRK2:POLICY_NO,
                                                 ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSCANCELWRK2:DUE_DATE

                 If ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID And
                    ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSCANCELWRK2:POLICY_NO And
                    ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSCANCELWRK2:DUE_DATE Then
                    Begin
                      Delete ARSCANCELWRK2_ALIAS
                      l_get_late_fee = "N"
                    End

                End
            else
             {
              If (arscancelwrk2:amount_past_due = 0.00 and
                 arscancelwrk2:fee_amount = 0)  or
                 L_UNDERWRITING_CX One Of "Y" or
                 L_NON_PAY_NOTICE One Of "Y" then
                  Begin
                    Access ARSCANCELWRK2_ALIAS, Set ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID,
                                                    ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSCANCELWRK2:POLICY_NO,
                                                    ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSCANCELWRK2:DUE_DATE


                    If ARSCANCELWRK2_ALIAS:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID And
                       ARSCANCELWRK2_ALIAS:POLICY_NO  = ARSCANCELWRK2:POLICY_NO And
                       ARSCANCELWRK2_ALIAS:DUE_DATE   = ARSCANCELWRK2:DUE_DATE Then
                        Begin
                          Delete ARSCANCELWRK2_ALIAS
                          l_get_late_fee = "N"
                        End

                        End
              }
        }
     }

     if l_get_late_fee = "Y" then
      {
       do get_late_fee
       l_get_late_fee = "N"
       }

    Next ARSCANCELWRK2
    End  -- end of file read loop

End -- end of arscancelwrk2_cleanup_minimum_amount

procedure delete_late_fee
begin

Access ARSbilling_ALIAS, Set ARSbilling_ALIAS:COMPANY_ID = ARSCANCELWRK2_alias:COMPANY_ID,
                             ARSbilling_alias:POLICY_NO  = ARSCANCELWRK2_alias:POLICY_NO, approximate

while arsbilling_alias:company_id = arscancelwrk2_alias:company_id and
      arsbilling_alias:policy_no  = arscancelwrk2_alias:policy_no
        begin
        If ARSbilling_ALIAS:COMPANY_ID  = ARSCANCELWRK2_alias:COMPANY_ID And
           ARSbilling_ALIAS:POLICY_NO   = ARSCANCELWRK2_alias:POLICY_NO And
           ARSbilling_ALIAS:due_DATE    = ARSCANCELWRK2_alias:DUE_DATE and
           arsbilling_alias:trans_code  = 70 then
            Begin
                delete arsbilling_alias
            end

        next arsbilling_alias
        end

end

Procedure GET_BILLING_REMAINING_BUCKET_COUNT
Begin
L_BILLING_BUCKETS         = "N"
l_total_remaining_balance = 0.00

Access ARSBILLING_ALT2, Set ARSBILLING_ALT2:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID,
                            ARSBILLING_ALT2:POLICY_NO  = ARSCANCELWRK2:POLICY_NO, Approximate

While ARSBILLING_ALT2:COMPANY_ID = ARSCANCELWRK2:COMPANY_ID And
      ARSBILLING_ALT2:POLICY_NO  = ARSCANCELWRK2:POLICY_NO
        Begin
        If ARSBILLING_ALT2:DUE_DATE > G_ENDING_DATE Then
            Begin
            L_BILLING_BUCKETS = "Y"
            End

        l_total_remaining_balance = l_total_remaining_balance +
        arsbilling_alt2:installment_amount - (arsbilling:total_amount_paid +
                                             arsbilling:write_off_amount)

        Next ARSBILLING_ALT2
        End

End -- end of procedure

Procedure SET_ITEM_NUMBER
Begin
L_CX_CTR     = 0

Access ARSCANCEL_ALIAS, Set ARSCANCEL_ALIAS:COMPANY_ID = L_COMPANY,
                            ARSCANCEL_ALIAS:POLICY_NO  = L_HOLD_POLICY_NO, Approximate

While (ARSCANCEL_ALIAS:COMPANY_ID = L_COMPANY And
      ARSCANCEL_ALIAS:POLICY_NO  = L_HOLD_POLICY_NO) And
      L_COMPANY <> ""
        Begin
        If ARSCANCEL_ALIAS:DUE_DATE >= G_STARTING_DATE And
           ARSCANCEL_ALIAS:DUE_DATE <= G_ENDING_DATE And
           ARSCANCEL_ALIAS:CX_STATUS  One Of "P" Then
            Begin
            Change ARSCANCEL_ALIAS
                Begin
                L_CX_CTR = L_CX_CTR + 1
                ARSCANCEL_ALIAS:ITEM_NUMBER = L_CX_CTR
                End
            End

        Next ARSCANCEL_ALIAS
        End

End -- end of set_item_number procedure

Procedure SET_ITEM_NUMBER_WORK
Begin
L_CX_CTR = 0

Access ARSCANCEL_ALIAS, Set ARSCANCEL_ALIAS:COMPANY_ID = L_COMPANY,
                            ARSCANCEL_ALIAS:POLICY_NO  = L_HOLD_POLICY_NO, Approximate

While (ARSCANCEL_ALIAS:COMPANY_ID = L_COMPANY And
      ARSCANCEL_ALIAS:POLICY_NO  = L_HOLD_POLICY_NO) And
      L_COMPANY <> ""
        Begin
        If ARSCANCEL_ALIAS:DUE_DATE >= G_STARTING_DATE And
           ARSCANCEL_ALIAS:DUE_DATE <= G_ENDING_DATE And
           ARSCANCEL_ALIAS:CX_STATUS  One Of "P" Then
            Begin
            Access ARSCXWORK, Set ARSCXWORK:COMPANY_ID = ARSCANCEL_ALIAS:COMPANY_ID,
                                  ARSCXWORK:POLICY_NO  = ARSCANCEL_ALIAS:POLICY_NO,
                                  ARSCXWORK:DUE_DATE   = ARSCANCEL_ALIAS:DUE_DATE

            If ARSCXWORK:COMPANY_ID = ARSCANCEL_ALIAS:COMPANY_ID And
               ARSCXWORK:POLICY_NO  = ARSCANCEL_ALIAS:POLICY_NO And
               ARSCXWORK:DUE_DATE   = ARSCANCEL_ALIAS:DUE_DATE Then
                Begin
                Change ARSCXWORK
                    Begin
                    ARSCXWORK:ITEM_NUMBER = ARSCANCEL_ALIAS:ITEM_NUMBER
                    End

                End

            End

        Next ARSCANCEL_ALIAS
        End

End -- end of set_item_number for work file procedure

Procedure WRITE_OFF_BILLING_RECORDS
Begin
Access ARSBILLING_ALIAS, Set ARSBILLING_ALIAS:COMPANY_ID       = ARSCANCELWRK2:COMPANY_ID,
                             ARSBILLING_ALIAS:POLICY_NO        = ARSCANCELWRK2:POLICY_NO, generic

While ARSBILLING_ALIAS:COMPANY_ID       = ARSCANCELWRK2:COMPANY_ID And
      ARSBILLING_ALIAS:POLICY_NO        = ARSCANCELWRK2:POLICY_NO
        Begin
        If arsbilling_alias:due_date = arscancelwrk2:due_date and
           ARSBILLING_ALIAS:STATUS One Of "B" Then
            Begin
            Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID       = ARSBILLING_ALIAS:COMPANY_ID,
                                       ARSBILLING_ALT:POLICY_NO        = ARSBILLING_ALIAS:POLICY_NO,
                                       ARSBILLING_ALT:TRANS_DATE       = ARSBILLING_ALIAS:TRANS_DATE,
                                       ARSBILLING_ALT:TRANS_EFF        = ARSBILLING_ALIAS:TRANS_EFF,
                                       ARSBILLING_ALT:TRANS_EXP        = ARSBILLING_ALIAS:TRANS_EXP,
                                       ARSBILLING_ALT:TRANS_CODE       = ARSBILLING_ALIAS:TRANS_CODE,
                                       ARSBILLING_ALT:LINE_OF_BUSINESS = ARSBILLING_ALIAS:LINE_OF_BUSINESS,
                                       ARSBILLING_ALT:COMM_RATE        = ARSBILLING_ALIAS:COMM_RATE,
                                       ARSBILLING_ALT:SUB_CODE         = ARSBILLING_ALIAS:SUB_CODE,
                                       ARSBILLING_ALT:BILLING_CTR      = ARSBILLING_ALIAS:BILLING_CTR,
                                       ARSBILLING_ALT:RETURN_CHECK_CTR = ARSBILLING_ALIAS:RETURN_CHECK_CTR

            If ARSBILLING_ALT:ERRORNUMBER = 0 Then
               Begin
                if arsbilling_alt:due_date = arscancelwrk2:due_date then
                {
                Change ARSBILLING_ALT
                    Begin
                    ARSBILLING_ALT:STATUS           = "P"
                    ARSBILLING_ALT:STATUS_DATE      = TODAYSDATE
                    ARSBILLING_ALT:WRITE_OFF        = 1
                    ARSBILLING_ALT:WRITE_OFF_AMOUNT = (ARSBILLING_ALT:INSTALLMENT_AMOUNT -
                                                      (ARSBILLING_ALT:TOTAL_AMOUNT_PAID +
                                                      ARSBILLING_ALT:WRITE_OFF_AMOUNT))
                    End

                }
                End

            End -- end of status "B"

        Next ARSBILLING_ALIAS
        End

End -- end of procedure

Procedure NEW_NOTICES
Begin
  L_FIRST_TIME       = "Y"
  L_COMPANY          = ""
  L_TOTALS_PAGE      = "N"
  L_COPIES_REQUIRED  =  0
  L_POLICY_PRINTED   = "N"
  l_hold_cx_eff_date = 00.00.0000

  Access SCIPSIMAGE_version5,
     Set SCIPSIMAGE_version5:COMPANY_ID = l_company_id, exact

  Deletefile(l_non_pay_name[1])
  Writefile (l_non_pay_name[1],"%s<NL>",L_RESET)  -- reset the printer
  Writefile (l_non_pay_name[1],"%s<NL>","<033>&l2A")  -- set to letter size

  L_LINES_PRINTED = 0 -- to track the lines being printed
  L_PAGES_CTR     = 0
  L_COPY_CTR      = 0 -- this is only to control the # of stmts for testing, remove for live

  Access ARSCXWORK,
     Set ARSCXWORK:COMPANY_ID = L_COMPANY, Approximate

  While ARSCXWORK:ERRORNUMBER = 0  -- not end of file
    Begin
        Access ARSCONTROL,
           Set ARSCONTROL:COMPANY_ID = ARSCXWORK:COMPANY_ID

/*  check that amount due is > arscontrol:cancel_waive_amount
      make sure this is set - if a company does not wish for this
      to be used then set this value to 0.00 in the control file

      since there is only one record per policy this
      check can be done here

      get number of payments - if the notice is on the last installment
      then ignore the amount checking - notices always go out on last
      installment no matter how much is owed
*/

        Access ARSPAYPLAN,
           Set ARSPAYPLAN:COMPANY_ID       = ARSCXWORK:COMPANY_ID,
               ARSPAYPLAN:LINE_OF_BUSINESS = ARSCXWORK:LINE_OF_BUSINESS,
               ARSPAYPLAN:PAYMENT_PLAN     = ARSCXWORK:PAYMENT_PLAN, Approximate

        If ((ARSCXWORK:AMOUNT_DUE => ARSCONTROL:CANCEL_WAIVE_AMOUNT    And
            ARSCXWORK:BILLING_CTR <> ARSPAYPLAN:NUMBER_OF_PAYMENTS ) Or
           (ARSCXWORK:BILLING_CTR =  ARSPAYPLAN:NUMBER_OF_PAYMENTS)) Then
            BEGIN
             If L_FIRST_TIME = "Y" Then
                begin
                  L_POLICY_PRINTED   = "N"
                  L_FIRST_TIME       = "N"
                  L_HOLD_POLICY_NO   = ARSCXWORK:POLICY_NO
                  L_HOLD_POL_YEAR    = ARSCXWORK:POL_YEAR
                  L_HOLD_TRANS_EXP   = ARSCXWORK:TRANS_EXP
                  l_hold_cx_eff_date = arscxwork:cx_eff_date
                  L_PAGES_CTR        = 1
                  Do GET_CURRENT_SFPNAME
                  Access SFPNAME,
                     Set SFPNAME:POLICY_NO    = L_HOLD_POLICY_NO,
                         SFPNAME:POL_YEAR     = L_HOLD_POL_YEAR,
                         SFPNAME:END_SEQUENCE = L_END_SEQUENCE


                  L_COPY_CTR         = 3 -- start at 3 since this is a fixed number
                  L_HOLD_COPY_CTR    = 1
                  L_LINES_PRINTED    = 0
                  L_V_POSITION       = 1800
                end

             If L_HOLD_POLICY_NO <> ARSCXWORK:POLICY_NO Then
                Begin
                   L_POLICY_PRINTED = "N"
                   l_line_printed   = "N"
                   L_PAGES_CTR = 1
                   If L_RERUN_NOTICES <> "Y" Then
                      Begin
                       Do UPDATE_SFPNAME
                      End
                 -- sets l_policy_no, l_pol_year and l_end_sequence values
                   Do GET_CURREnt_SFPNAME
                   Access SFPNAME,
                      Set SFPNAME:POLICY_NO    = L_POLICY_NO,
                          SFPNAME:POL_YEAR     = L_POL_YEAR,
                          SFPNAME:END_SEQUENCE = L_END_SEQUENCE
                   L_COPY_CTR = 3 -- start at 3 since this is a fixed number

                   Do GET_NUMBER_OF_COPIES1

                   L_HOLD_COPY_CTR = 1
                   Do EJECT_PAGE
                   Do PRINT_FORM
                   L_LINES_PRINTED = 0
                   L_V_POSITION    = 1800

             If L_POLICY_PRINTED = "N" Then
                Begin
                   L_POLICY_PRINTED = "Y"

                   For L_SUB = 1 To L_COPY_CTR
                      Begin
/* loop here for the number of copies needed */
                       If L_HOLD_COPY_CTR <> L_SUB Then
                        begin
                          L_PAGES_CTR = 1
                          L_HOLD_COPY_CTR = L_SUB
                          Do EJECT_PAGE

                         if scipsimage:items_as_image[6] one of "1" or
                            scipsimage_version5:items_as_image[6] one of "1" then
                           begin
                            if g_scan one of 1 then
                             begin
                              if l_hold_copy_ctr one of 3 then
                                {
                                 l_non_pay_name[1] = lowercase(programid) + "i.pcl"
                                 --I need to joinit to the file l_non_pay_name[2] so I can keep the batch of invoices in
                                 -- the same file) then add the imageing header and then my each invoice to the Unix
                                 --image directory and then i will then remove the file (the one with the i.pcl)
                                 --after every invoice this will eliminate adding more then one invoice getting imaged.
                                 --I can still use the lp command in the calling program because
                                 -- l_nonpay_name[2] will have arsup900.plc still created so the calling program can print
                                 -- while the i version of apsup214 gets deleted and recreated each time
                                 l_non_pay_name[2] = lowercase(programid) + ".pcl"
                                }
                             end
                           end
                          Do PRINT_FORM
                          L_LINES_PRINTED = 0
                          L_V_POSITION    = 1800
                        end

--                     If L_LINE_PRINTED Not One Of "Y" Then
--                       Begin

                          Do PRINT_DETAIL_LINE

--                        L_LINE_PRINTED = "Y"
--                       End
--*************************************************************
                        Closefile(l_non_pay_name[1])
                        if scipsimage:items_as_image[6] one of "1" or
                           scipsimage_version5:items_as_image[6] one of "1" then
                          begin
                            if g_scan one of 1 then
                              begin
                                if l_hold_copy_ctr one of 3 then
                                  {
                                    if scipsimage_version5:items_as_image[6] one of "1" then
                                      {
                                        do add_image_header_version5
                                      }
                                    else
                                      {
                                        do add_image_header
                                      }
                                    l_non_pay_name[1] = lowercase(programid) + ".pcl"
                                    l_non_pay_name[2] = lowercase(programid) + "i.pcl"
                                  }
                              end
                          end

                      End -- end of loop

                End -- end of l_policy_printed check

                L_HOLD_POLICY_NO = ARSCXWORK:POLICY_NO
                L_HOLD_POL_YEAR  = ARSCXWORK:POL_YEAR
                L_HOLD_TRANS_EXP = ARSCXWORK:TRANS_EXP
                l_hold_cx_eff_date = arscxwork:cx_eff_date

            end -- control break test end

            END

    Next ARSCXWORK
    End -- end of while

Closefile(l_non_pay_name[2])

End -- end of new_invoice

procedure print_credit_card_on_line_payment_wording

BEGIN
/*  Writefile(l_non_pay_name[1],"%n-->arscontrol<NL>",arscontrol2:DISPLAY_CREDIT_CW_CX_NON_PAY)
Writefile(l_non_pay_name[1],"%s","<033>&a210h+120V")
Writefile(l_non_pay_name[1],"%d-->eff_date_c<NL>",arscontrol2:eff_date_pay_by_credit_card_msg)
Writefile(l_non_pay_name[1],"%s","<033>&a210h+120V")
Writefile(l_non_pay_name[1],"%d-->arscxworkdue_date<NL>",ARScxWORK_alias:due_DATE)
Writefile(l_non_pay_name[1],"%s","<033>&a210h+120V")
Writefile(l_non_pay_name[1],"%n-->arscontrol2:CREDIT_CARD_HORIZONTAL_POSITION[1]<NL>",arscontrol2:CREDIT_CARD_HORIZONTAL_POSITION[1])
Writefile(l_non_pay_name[1],"%s","<033>&a210h+120V")
Writefile(l_non_pay_name[1],"%n-->arscontrol2:CREDIT_CARD_VERTICAL_POSITION[1]<NL>",arscontrol2:CREDIT_CARD_VERTICAL_POSITION[1])
Writefile(l_non_pay_name[1],"%s","<033>&a210h+120V")
Writefile(l_non_pay_name[1],"%s",arscontrol2:company_id)
*/
  if arscontrol2:DISPLAY_CREDIT_CW_CX_NON_PAY one of 1 and
     ARScxWORK:due_DATE >= arscontrol2:eff_date_pay_by_credit_card_msg then
  {
     l_h_position1 = str(arscontrol2:CREDIT_CARD_HORIZONTAL_POSITION[1])
     l_v_position1 = str(arscontrol2:CREDIT_CARD_VERTICAL_POSITION[1])

     if arscontrol2:company_id one of "FLEMINGTON" then
       {
         Writefile(l_non_pay_name[1],"<033>&a90h0V<033>*c5a3000b0P<NL>")

         Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1) - 125,"h")
         Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)-150,"V<033>*c10a220b0P")   --left vertical line
         Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1) + 4400,"h")
         Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)-150,"V<033>*c10a220b0P")   --right vertical

         Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1) -125,"h")
         Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)-150,"V<033>*c4530h20v0P") --top horizontal line to

         Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1)- 125,"h")
         Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)+350,"V<033>*c4530h20v0P") --bottom horizontal line

         L_FONT             = L_ARIAL_BOLD_12
         L_MAX_CHAR         = 70
         l_max_lines        = 60
         l_character_string = trun(arscontrol2:pay_by_credit_card_wording)
         Include "line_spacing3.inc"
         l_line_counter = 0
       }
     else
       {
         if arscontrol2:company_id one of "FARMERS" then
           {
             if trun(arscontrol2:pay_by_credit_card_header) <> "" then
               {
                 l_h_position1 = str(arscontrol2:CREDIT_CARD_HORIZONTAL_POSITION[2])
                 l_v_position1 = str(arscontrol2:CREDIT_CARD_VERTICAL_POSITION[2])
                 Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1) -125,"h")
                 Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)-150,"V<033>*c4225h20v0P") --top horizontal line to
                 Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1) - 125,"h")
                 Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)-150,"V<033>*c10a164b0P")   --left vertical line
                 Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1) + 4100,"h")
                 Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)-150,"V<033>*c10a164b0P")   --right vertical
                 writefile(l_non_pay_name[1],"%s",l_arial_bold_12)
                 writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(L_H_POSITION1),"h")
                 writefile(l_non_pay_name[1],"%s%s",l_v_position1,"V")
                 writefile(l_non_pay_name[1],"%s",l_underline_start)
                 writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(L_H_POSITION1),"h")
                 writefile(l_non_pay_name[1],"%s%s",l_v_position1,"V")
                 writefile(l_non_pay_name[1],"%s",trun(arscontrol2:pay_by_credit_card_header))
                 writefile(l_non_pay_name[1],"%s",l_underline_end)
               }
             l_h_position1 = str(arscontrol2:CREDIT_CARD_HORIZONTAL_POSITION[1])
             l_v_position1 = str(arscontrol2:CREDIT_CARD_VERTICAL_POSITION[1])
             Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1) - 125,"h")
             Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)-150,"V<033>*c10a164b0P")   --left vertical line
             Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1) + 4100,"h")
             Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)-150,"V<033>*c10a164b0P")   --right vertical
             Writefile(l_non_pay_name[1],"%s%n%s","<033>&a",val(l_h_position1)- 125,"h")
             Writefile(l_non_pay_name[1],"%n%s",val(l_v_position1)+223,"V<033>*c4225h20v0P") --bottom horizontal line
             L_FONT             = L_ARIAL_BOLD_12
             L_MAX_CHAR         = 45
             l_max_lines        = 60
             l_character_string = trun(arscontrol2:pay_by_credit_card_wording)
             Include "line_spacing3.inc"
             l_line_counter     = 0
           }
       }
  }
END

Procedure PRINT_FORM
Begin
L_TOTALS_PAGE = "N"

/*  setup access to all external files here */

Access SFSCOMPANY,
   Set SFSCOMPANY:COMPANY_ID = ARSCXWORK:COMPANY_ID, Approximate

Access ARSCONTROL,
   Set ARSCONTROL:COMPANY_ID = ARSCXWORK:COMPANY_ID, Approximate

Access ARSCONTROL2,
   Set ARSCONTROL2:COMPANY_ID = ARSCXWORK:COMPANY_ID

Access SFSAGENT, Set SFSAGENT:COMPANY_ID = ARSCXWORK:COMPANY_ID,
                     SFSAGENT:AGENT_NO   = ARSCXWORK:AGENT_NO, Generic

Access SFSLINE, Set SFSLINE:COMPANY_ID       = ARSCXWORK:COMPANY_ID,
                    SFSLINE:LINE_OF_BUSINESS = ARSCXWORK:LINE_OF_BUSINESS,
                    SFSLINE:LOB_SUBLINE      = L_LOB_SUBLINE, Approximate

Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = ARSCXWORK:COMPANY_ID,
                       ARSPAYPLAN:LINE_OF_BUSINESS = ARSCXWORK:LINE_OF_BUSINESS,
                       ARSPAYPLAN:PAYMENT_PLAN     = ARSCXWORK:PAYMENT_PLAN, Approximate

Access ARSCANCEL_ALIAS, Set ARSCANCEL_ALIAS:COMPANY_ID = arscxwork:company_id,
                            ARSCANCEL_ALIAS:POLICY_NO  = arscxwork:policy_no, Approximate



while arscancel_alias:company_id = arscxwork:company_id and
      arscancel_alias:policy_no  = arscxwork:policy_no
        begin
        if arscancel_alias:due_date >= g_starting_date and
           arscancel_alias:due_date <= g_ending_date then
            l_run_date = arscancel_alias:cx_date

        next arscancel_alias
        end

Do GET_CURRENT_SFPNAME

/* end of access setup */

Writefile(l_non_pay_name[1],"<033>&a90h0V") -- CAP to top
Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL)

do print_credit_card_on_line_payment_wording
/* draw the box around the form */

     -- left and right verticle lines --          2900 replaced by 3050
     -- was 2900
Writefile(l_non_pay_name[1],"<033>&a90h0V<033>*c5a3000b0P<NL>")
Writefile(l_non_pay_name[1],"<033>&a5670h0V<033>*c5a3000b0P")
Writefile(l_non_pay_name[1],"<033>&a0h0V<NL>") -- CAP

     -- top and bottom horizontal lines --
Writefile(l_non_pay_name[1],"<033>&a90h0V<033>*c5580h5v0P<NL>")
-- was 6960
Writefile(l_non_pay_name[1],"<033>&a90h7200V<033>*c5580h5v0P")
Writefile(l_non_pay_name[1],"<033>&a0h0V<NL>") -- CAP



/* draw lines within the form */
Writefile(l_non_pay_name[1],"<033>&a90h1440V<033>*c5580h5v0P<NL>") -- 1st line
Writefile(l_non_pay_name[1],"<033>&a90h1620V<033>*c5580h5v0P<NL>") -- 2nd line
Writefile(l_non_pay_name[1],"<033>&a90h1800V<033>*c5580h5v0P<NL>") -- 3rd line
-- was 5390
Writefile(l_non_pay_name[1],"<033>&a90h5040V<033>*c5580h5v0P<NL>") -- 4th line
Writefile(l_non_pay_name[1],"<033>&a90h1620V<033>*c2325a75b5g2P<NL>") -- shading

/* draw small verticle lines in headings */
Writefile(l_non_pay_name[1],"<033>&a810h1620V<033>*c5a80b0P<NL>")  -- 1st line
Writefile(l_non_pay_name[1],"<033>&a1530h1620V<033>*c5a80b0P<NL>") -- 2nd line
Writefile(l_non_pay_name[1],"<033>&a3780h1620V<033>*c5a80b0P<NL>") -- 3rd line
Writefile(l_non_pay_name[1],"<033>&a4680h1620V<033>*c5a80b0P<NL>") -- 4th line

/* draw pay this amount box */
-- was 5390
Writefile(l_non_pay_name[1],"<033>&a2800h5040V<033>*c5a150b0P<NL>") -- left side verticle line
-- was 5750
Writefile(l_non_pay_name[1],"<033>&a2800h5400V<033>*c2880h5v0P<NL>") -- bottom of box

/* draw fold tick mark */
Writefile(l_non_pay_name[1],"<033>&a90h4635V<033>*c150h5v0P<NL>")

/* print arscontrol items */
Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL)
-- was 5040
Writefile(l_non_pay_name[1],"<033>&a180h4770V<NL>")
Writefile(l_non_pay_name[1],"%s",ARSCONTROL:INVOICE_PAYTO+"<NL>")
-- was 5040
Writefile(l_non_pay_name[1],"<033>&a3240h4770V")
Writefile(l_non_pay_name[1],"%s",ARSCONTROL:INVOICE_COMPANY+"<NL>")
Writefile(l_non_pay_name[1],"<033>&a3040h5160V")
Writefile(l_non_pay_name[1],"%s",ARSCONTROL:INVOICE_SLOGAN+"<NL>")
-- was 5390
Writefile(l_non_pay_name[1],"<033>&a180h5040V")
Writefile(l_non_pay_name[1],"%s",ARSCONTROL:INVOICE_SEPERATOR+"<NL>")
Writefile(l_non_pay_name[1],"<033>&a2800h5940V<NL>")
Writefile(l_non_pay_name[1],"%s<NL>",ARSCONTROL:INVOICE_PAYMENT_OPTIONS)
Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL_ITALIC_12)
Writefile(l_non_pay_name[1],"<033>&a2800h6060V<NL>")
Writefile(l_non_pay_name[1],"%s<NL>",ARSCONTROL:INVOICE_CLOSING)
Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL)

/* print the fixed literals */
Writefile(l_non_pay_name[1],"%s",L_ARIAL)

Writefile(l_non_pay_name[1],"<033>&a3420h1155V<NL>")
Writefile(l_non_pay_name[1],"Policy Type:<NL>")
Writefile(l_non_pay_name[1],"<033>&a3420h1290V<NL>")
Writefile(l_non_pay_name[1],"%s<NL>",SFSLINE:DESCRIPTION)
Writefile(l_non_pay_name[1],"<033>&a180h1455V<NL>")
if l_rerun_notices = "Y" then
    Writefile(l_non_pay_name[1],"Run Date: %d<NL>",l_run_date)
else
    Writefile(l_non_pay_name[1],"Run Date: %d<NL>",TODAYSDATE)
Writefile(l_non_pay_name[1],"<033>&a2620h1455V<NL>")
Writefile(l_non_pay_name[1],"Payment Plan: %s<NL>",ARSPAYPLAN:DESCRIPTION)

Writefile(l_non_pay_name[1],"%s",L_ARIAL_BOLD)
L_V_POSITION = 1755

Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"Eff Date<NL>")

Writefile(l_non_pay_name[1],"%s","<033>&a910h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"Exp Date<NL>")

Writefile(l_non_pay_name[1],"%s","<033>&a2100h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"Description")

Writefile(l_non_pay_name[1],"%s","<033>&a3990h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"Due Date<NL>")

Writefile(l_non_pay_name[1],"%s","<033>&a4920h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"Amount Due<NL>")

-- print the company name and address here

Writefile(l_non_pay_name[1],"%s",L_ARIAL)
L_V_POSITION = 5330

If SFSCOMPANY:USE_OTHER_MAILING = 0 Then -- user primary name and address
Begin
Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s",Trun(SFSCOMPANY:NAME[1])+"<NL>"+"<CR>")

If SFSCOMPANY:NAME[2] <> "" Then
Begin
    L_V_POSITION = L_V_POSITION + 120
    Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
    Writefile(l_non_pay_name[1],"%s",Trun(SFSCOMPANY:NAME[2])+"<NL>"+"<CR>")
End

L_V_POSITION = L_V_POSITION + 120
Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s",Trun(SFSCOMPANY:ADDRESS[1])+"<NL>"+"<CR>")
L_V_POSITION = L_V_POSITION + 120
Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s",Trun(SFSCOMPANY:CITY)+", "+
                              Trun(SFSCOMPANY:STR_STATE) +
                              "  " + Str(Val(SFSCOMPANY:STR_ZIPCODE),"99999-9999") + "<NL>")
End
Else If SFSCOMPANY:USE_OTHER_MAILING = 1 Then -- use optional mailing address
Begin
Access SFSCOMPMAIL, Set SFSCOMPMAIL:COMPANY_ID = ARSCXWORK:COMPANY_ID
Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s",Trun(SFSCOMPMAIL:NAME[1])+"<NL>"+"<CR>")

If SFSCOMPANY:NAME[2] <> "" Then
Begin
    L_V_POSITION = L_V_POSITION + 120
    Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
    Writefile(l_non_pay_name[1],"%s",Trun(SFSCOMPMAIL:NAME[2])+"<NL>"+"<CR>")
End

L_V_POSITION = L_V_POSITION + 120
Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s",Trun(SFSCOMPMAIL:ADDRESS[1])+"<NL>"+"<CR>")
L_V_POSITION = L_V_POSITION + 120
Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s",Trun(SFSCOMPMAIL:CITY)+", "+
                              Trun(SFSCOMPMAIL:STR_STATE) +
                              "  " + Str(Val(SFSCOMPMAIL:STR_ZIPCODE),"99999-9999") + "<NL>")
End
Writefile (l_non_pay_name[1],"%s<NL>",L_ARIAL_ITALIC_BOLD_16)

L_NOTICE_TYPE = "CX"
l_sfs = "SFS"

access sfsdefault, set sfsdefault:sfs_code = l_sfs

access arscxnotice, set arscxnotice:company_id  = sfsdefault:company_id,
                        arscxnotice:notice_type = l_notice_type

If ARSCXNOTICE:COMPANY_ID <> "" Then
Begin
    L_H_POSITION = ARSCXNOTICE:HEADING_H_POSITION
    L_V_POSITION = ARSCXNOTICE:HEADING_V_POSITION
    Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION))+"V")
    Writefile(l_non_pay_name[1],"%s<NL>",Trun(ARSCXNOTICE:HEADING_WORDING))
End
Else
Begin
    Writefile (l_non_pay_name[1],"<033>&a1500h0V")
    Writefile (l_non_pay_name[1],"CONDITIONAL CANCELLATION NOTICE<nl>")
End

/* =====================  Insured =========================   */
Writefile (l_non_pay_name[1],"%s<NL>",L_ARIAL_BOLD)

Writefile(l_non_pay_name[1],"<033>&a180h90V")
Writefile(l_non_pay_name[1],"   Insured<NL>")
Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL)
Writefile (l_non_pay_name[1],"<033>&a180h210V")

if arscontrol2:no_alpha_cx_notices = 1 then
 {
  Writefile(l_non_pay_name[1],"%s", Str(Val(Str(ARSCXWORK:POLICY_NO,"ZZZZZZZZZ")))+"<NL>")
 }
else
 {
  Writefile(l_non_pay_name[1],"%s", Trun(SFSLINE:ALPHA) + Str(Val(Str(ARSCXWORK:POLICY_NO,"ZZZZZZZZZ")))+"<NL>")
 }

Do GET_CURRENT_SFPNAME

Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = ARSCXWORK:COMPANY_ID

L_LOOP_CTR = 0
L_V_POSITION = 210
For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the name
Begin
    If SFPNAME:NAME[L_LOOP_CTR] <> "" Then
    {
        L_V_POSITION = L_V_POSITION + 120
        Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
        I_NAME=SFPNAME:NAME[L_LOOP_CTR]
        Do REVERSE_NAME
        Writefile(l_non_pay_name[1],"%s",I_REV_NAME + "<NL>")
    }
End

For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the address
Begin
    If SFPNAME:ADDRESS[L_LOOP_CTR] <> "" Then
    {
        L_V_POSITION = L_V_POSITION + 120
        Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
        Writefile(l_non_pay_name[1],"%s",SFPNAME:ADDRESS[L_LOOP_CTR] + "<NL>")
    }
End

L_V_POSITION = L_V_POSITION + 120
Writefile(l_non_pay_name[1],"%s","<033>&a180h" + Trun(Str(L_V_POSITION)+"V"))
if val(sfpname:str_zipcode[6,9]) = 0 then
{
Writefile(l_non_pay_name[1],"%s",Trun(SFPNAME:CITY) + ", " +
                              Trun(SFPNAME:STR_STATE) + "  " +
                              Str(Val(SFPNAME:STR_ZIPCODE[1,5]),"99999") + "<NL>")
}
else
{
Writefile(l_non_pay_name[1],"%s",Trun(SFPNAME:CITY) + ", " +
                              Trun(SFPNAME:STR_STATE) + "  " +
                              Str(Val(SFPNAME:STR_ZIPCODE),"99999-9999") + "<NL>")
}
/* =====================   AGENT  =========================   */

Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL_BOLD)
Writefile(l_non_pay_name[1],"<033>&a3130h90V")

access arscontrol2,
   set arscontrol2:company_id = sfsdefault:company_id, approximate

if ARScontrol2:AGENT_PRODUCER <> "" then
  {
    Writefile(l_non_pay_name[1],"%s",trun(arscontrol2:AGENT_PRODUCER))
    Writefile(l_non_pay_name[1],"%s",Str(ARSCXWORK:AGENT_NO,"ZZZZ")+"<NL>")
  }
else
  {
    Writefile(l_non_pay_name[1],"%s",l_company_id)
    Writefile(l_non_pay_name[1],"  Agent: %s",Str(ARSCXWORK:AGENT_NO,"ZZZZ")+"<NL>")
  }
Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL)


L_LOOP_CTR = 0
L_V_POSITION = 90
For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the name
Begin
    If SFSAGENT:NAME[L_LOOP_CTR] <> "" Then
    {
        L_V_POSITION = L_V_POSITION + 120
        Writefile(l_non_pay_name[1],"%s","<033>&a3130h" + Trun(Str(L_V_POSITION)+"V"))
        Writefile(l_non_pay_name[1],"%s",SFSAGENT:NAME[L_LOOP_CTR] + "<NL>")
    }
End

For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the address
Begin
    If SFSAGENT:ADDRESS[L_LOOP_CTR] <> "" Then
    {
        L_V_POSITION = L_V_POSITION + 120
        Writefile(l_non_pay_name[1],"%s","<033>&a3130h" + Trun(Str(L_V_POSITION)+"V"))
        Writefile(l_non_pay_name[1],"%s",SFSAGENT:ADDRESS[L_LOOP_CTR] + "<NL>")
    }
End

L_V_POSITION = L_V_POSITION + 120
Writefile(l_non_pay_name[1],"%s","<033>&a3130h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s",Trun(SFSAGENT:CITY) + ", " +
                              Trun(SFSAGENT:STR_STATE) + "  " +
                              Str(Val(SFSAGENT:STR_ZIPCODE),"99999-9999") + "<NL>")
L_V_POSITION = L_V_POSITION + 120
Writefile (l_non_pay_name[1],"%s","<033>&a3130h" + Trun(Str(L_V_POSITION) + "V"))
Writefile (l_non_pay_name[1],"%s",Str(Val(SFSAGENT:TELEPHONE[1]),"(999) 999-9999") + "<NL>")

/* copy literal */

Switch(L_HOLD_COPY_CTR)
    Case 1  : L_COPY_LIT = "Insured Copy       "
    Case 2  : if ARScontrol2:AGENT_PRODUCER <> "" then
                {
                  L_COPY_LIT = trun((arscontrol2:AGENT_PRODUCER)+ "Copy")
                }
              Else
                {
                  L_COPY_LIT = "Agent Copy         "
                }
    Case 3  : L_COPY_LIT = "Home Office Copy   "
    Default : L_COPY_LIT = "Mortgagee Copy     "
End

L_V_POSITION = 0
Writefile (l_non_pay_name[1],"%s","<033>&a4760h" + Trun(Str(L_V_POSITION) + "V"))
Writefile (l_non_pay_name[1],"%s<NL>",Trun(L_COPY_LIT))

/* bottom of invoce name and address */

If L_HOLD_COPY_CTR <= 3 Then
Begin

L_LOOP_CTR = 0
--L_V_POSITION = 6390
L_V_POSITION = 6190
L_H_POSITION = 540

For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the name
Begin
    If SFPNAME:NAME[L_LOOP_CTR] <> "" Then
    {
        L_V_POSITION = L_V_POSITION + 120
        Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
        I_NAME=SFPNAME:NAME[L_LOOP_CTR]
        Do REVERSE_NAME
        If ARSCONTROL2:PRINT_CTR_ON_CX_NOTICES One Of 1 And
           L_LOOP_CTR = 1 Then
        Begin
            I_REV_NAME = Trun(I_REV_NAME) + "     " + Str(ARSCXWORK:ITEM_NUMBER,"ZZZZ")
        End

        Writefile(l_non_pay_name[1],"%s",I_REV_NAME + "<NL>")
    }
End

For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the address
Begin
    If SFPNAME:ADDRESS[L_LOOP_CTR] <> "" Then
    {
        L_V_POSITION = L_V_POSITION + 120
--        Writefile(l_non_pay_name[1],"%s","<033>&a540h" + Trun(Str(L_V_POSITION)+"V"))
        Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
        Writefile(l_non_pay_name[1],"%s",SFPNAME:ADDRESS[L_LOOP_CTR] + "<NL>")
    }
End

L_V_POSITION = L_V_POSITION + 120
-- Writefile(l_non_pay_name[1],"%s","<033>&a540h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
if val(sfpname:str_zipcode[6,9]) = 0 then
{
Writefile(l_non_pay_name[1],"%s",Trun(SFPNAME:CITY) + ", " +
                              Trun(SFPNAME:STR_STATE) + "  " +
--                              Str(Val(SFPNAME:STR_ZIPCODE[1,5]),"99999") + "<NL>")
                              Str(Val(SFPNAME:STR_ZIPCODE[1,5]),"99999"))
}
else
{
Writefile(l_non_pay_name[1],"%s",Trun(SFPNAME:CITY) + ", " +
                              Trun(SFPNAME:STR_STATE) + "  " +
--                              Str(Val(SFPNAME:STR_ZIPCODE),"99999-9999") + "<NL>")
                              Str(Val(SFPNAME:STR_ZIPCODE),"99999-9999"))
}
End -- end of if l_hold_copy_ctr <= 3

If L_HOLD_COPY_CTR >= 4 Then
Begin

L_V_POSITION = 6390
L_H_POSITION = 540

L_TEMP_POLICY_NO   = L_SFPNAME_POLICY_NO[L_HOLD_COPY_CTR]
L_TEMP_POL_YEAR    = L_SFPNAME_POL_YEAR[L_HOLD_COPY_CTR]
L_TEMP_END_SEQUENCE = L_SFPNAME_END_SEQUENCE[L_HOLD_COPY_CTR]
L_TEMP_PREM_NO      = L_SFPNAME_PREM_NO[L_HOLD_COPY_CTR]
L_TEMP_BUILD_NO     = L_SFPNAME_BUILD_NO[L_HOLD_COPY_CTR]
L_TEMP_SUB_CODE     = L_SFPNAME_SUB_CODE[L_HOLD_COPY_CTR]

Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = L_TEMP_POLICY_NO

Access SFPNAME,
   Set SFPNAME:POLICY_NO = SFPCURRENT:POLICY_NO,
       SFPNAME:POL_YEAR  = SFPCURRENT:POL_YEAR,
       SFPNAME:END_SEQUENCE = SFPCURRENT:END_SEQUENCE

L_TEMP_POL_YEAR     = SFPNAME:POL_YEAR
L_TEMP_END_SEQUENCE = SFPNAME:END_SEQUENCE

    Access SFPSUPP, Set SFPSUPP:POLICY_NO    = L_TEMP_POLICY_NO,
                        SFPSUPP:POL_YEAR     = L_TEMP_POL_YEAR,
                        SFPSUPP:END_SEQUENCE = L_TEMP_END_SEQUENCE,
                        SFPSUPP:PREM_NO      = L_TEMP_PREM_NO,
                        SFPSUPP:BUILD_NO     = L_TEMP_BUILD_NO,
                        SFPSUPP:SUB_CODE     = L_TEMP_SUB_CODE


    If SFPSUPP:POLICY_NO    = L_TEMP_POLICY_NO And
       SFPSUPP:POL_YEAR     = L_TEMP_POL_YEAR And
       SFPSUPP:END_SEQUENCE = L_TEMP_END_SEQUENCE And
       SFPSUPP:PREM_NO      = L_TEMP_PREM_NO And
       SFPSUPP:BUILD_NO     = L_TEMP_BUILD_NO And
       SFPSUPP:SUB_CODE     = L_TEMP_SUB_CODE Then
       Begin

L_COMPANY = SFPNAME:COMPANY_ID
Access SFSMORT, Set SFSMORT:COMPANY_ID  = L_COMPANY,
                    SFSMORT:MORTGAGE_ID = SFPSUPP:MORTGAGE_ID,Generic

L_LOOP_CTR = 0
L_V_POSITION = 6390
L_H_POSITION = 540

If SFPSUPP:MORTGAGE_ID <> "" Then
Begin
  For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the name
  Begin
    If SFSMORT:NAME[L_LOOP_CTR] <> "" Then
    {
        L_V_POSITION = L_V_POSITION + 120
        Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
        I_NAME=SFSMORT:NAME[L_LOOP_CTR]
        Do REVERSE_NAME
        If ARSCONTROL2:PRINT_CTR_ON_CX_NOTICES One Of 1 And
           L_LOOP_CTR = 1 Then
        Begin
            I_REV_NAME = Trun(I_REV_NAME) + "     " + Str(ARSCXWORK:ITEM_NUMBER,"ZZZZ")
        End

        Writefile(l_non_pay_name[1],"%s",I_REV_NAME + "<NL>")
    }
  End

  For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the address
  Begin
    If SFSMORT:ADDRESS[L_LOOP_CTR] <> "" Then
    {
        L_V_POSITION = L_V_POSITION + 120
        Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
        Writefile(l_non_pay_name[1],"%s",SFSMORT:ADDRESS[L_LOOP_CTR] + "<NL>")
    }
  End

  L_V_POSITION = L_V_POSITION + 120
  Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
  Writefile(l_non_pay_name[1],"%s",Trun(SFSMORT:CITY) + ", " +
                              Trun(SFSMORT:STR_STATE) + "  " +
                              Str(Val(SFSMORT:STR_ZIPCODE),"99999-9999") + "<NL>")
End -- end of sfsmort data


If SFPSUPP:MORTGAGE_ID = "" Then
Begin

  For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the name
  Begin
    If SFPSUPP:NAME[L_LOOP_CTR] <> "" Then
    {
--        Writefile(l_non_pay_name[1],"%s","<033>&a540h" + Trun(Str(L_V_POSITION)+"V"))
        Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
        I_NAME=SFPSUPP:NAME[L_LOOP_CTR]
        Do REVERSE_NAME
        Writefile(l_non_pay_name[1],"%s",I_REV_NAME + "<NL>")
        L_V_POSITION = L_V_POSITION + 120
    }
  End

  For L_LOOP_CTR = 1 To 3 -- there are 3 subscripts to the address
  Begin
    If SFPSUPP:ADDRESS[L_LOOP_CTR] <> "" Then
    {
        Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
        Writefile(l_non_pay_name[1],"%s",SFPSUPP:ADDRESS[L_LOOP_CTR] + "<NL>")
        L_V_POSITION = L_V_POSITION + 120
    }
  End

  Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
  Writefile(l_non_pay_name[1],"%s",Trun(SFPSUPP:CITY) + ", " +
                              Trun(SFPSUPP:STR_STATE) + "  " +
                              Str(Val(SFPSUPP:STR_ZIPCODE),"99999-9999") + "<NL>")
  L_V_POSITION = L_V_POSITION + 120


  Access ARSCONTROL2, Set ARSCONTROL2:COMPANY_ID = ARSCONTROL:COMPANY_ID, Approximate

  Writefile(l_non_pay_name[1],"%s",L_ARIAL_8)


  Writefile(l_non_pay_name[1],"%s",L_ARIAL)

End -- end of sfsupp address

If SFPSUPP:ACCOUNT_NO <> "" And ARSCONTROL2:PRINT_LOAN_NO_BOTTOM One Of 1  Then
  {
     /**** Account number information here ****/
   l_h_position = l_h_position + 40
   Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)) + "V")
   Writefile(l_non_pay_name[1],"%s","LOAN NO.: " + SFPSUPP:ACCOUNT_NO + "<nl>")
   l_h_position = l_h_position - 40
  }

End -- checking for policy_no, pol_year and end_sequence match

End -- end of l_hold_copy_ctr >= 4

/* Print policy Number on return Invoice */

L_V_POSITION = 5940
L_H_POSITION = 180

Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"Policy Number: <NL>")

L_H_POSITION = L_H_POSITION + 720
Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))

if arscontrol2:no_alpha_cx_notices = 1 then
 {
  Writefile(l_non_pay_name[1],"%s", Str(Val(Str(ARSCXWORK:POLICY_NO,"ZZZZZZZZZ")))+"<NL>")
 }
else
 {
  Writefile(l_non_pay_name[1],"%s", Trun(SFSLINE:ALPHA) + Str(Val(Str(ARSCXWORK:POLICY_NO,"ZZZZZZZZZ")))+"<NL>")
 }

Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL_BOLD_14)

L_V_POSITION = 5310
L_H_POSITION = 3060
Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))

Writefile(l_non_pay_name[1],"%s<NL>",ARSCONTROL:INVOICE_PAY_AMOUNT)

L_H_POSITION = L_H_POSITION + 1440 -- 2.0" to the right
Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
--Writefile(l_non_pay_name[1],"%s<NL>",Str(L_TOTAL_AMOUNT_DUE,"($ZZ,ZZZ,ZZZ.99)"))
--Writefile(l_non_pay_name[1],"%s<NL>",Str(ARSCXWORK:AMOUNT_DUE,"($ZZ,ZZZ,ZZZ.99)"))

-- new type of form indicator
-- always print  -  if no indicator is to print then the control
-- file value needs to be spaces

/*
L_V_POSITION = 7000
L_H_POSITION = 5000

Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s%s",arscontrol2:lapse_notice_indicator,"<NL>")
*/



If ARSCONTROL2:PRINT_RUN_DATE_ON_cx_notice One Of 1 Then
Begin
    Writefile (l_non_pay_name[1],"%s<NL>",L_ARIAL_8)
    L_V_POSITION = ARSCONTROL2:DATE_ON_INVOICE_V_POSITION
    L_H_POSITION = ARSCONTROL2:DATE_ON_INVOICE_H_POSITION
    Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
    Writefile(l_non_pay_name[1],"%s",Str(TODAYSDATE,"MM/DD/YYYY")+"-"+trun(arscontrol2:lapse_notice_indicator))
End

-- new OCR printing on the bottom of the invoice


access arscontrol2, set arscontrol2:company_id = arscontrol:company_id

-- house cleaning
l_check_scan_policy_no          = ""
l_check_scan_due_date           = ""
l_check_scan_due_date           = ""
l_check_scan_total_due          = ""
l_check_scan_check_digit        = ""
l_check_scan_line               = ""
l_check_scan_amount             = 0
l_check_digit_weight            = 0
l_check_digit_total             = 0

for l_check_digit_sub = 1 to 100
begin
   l_check_digit_amount[l_check_digit_sub] = 0
end

/*  end of house cleaning */

if arscontrol2:check_scan one of 1 then
begin
   l_v_position = arscontrol2:check_scan_v_position
   l_h_position = arscontrol2:check_scan_h_position

   if arscontrol2:check_scan_policy_no one of 1 then
   begin
       l_check_scan_policy_no = str(arscxwork:policy_no,"999999999")
   end
   else
   begin
       l_check_scan_policy_no = ""
   end

   if arscontrol2:check_scan_due_date one of 1 then
   begin
       l_check_scan_due_date = str(arscxwork:due_date,"MMDDYYYY")
   end
   else
   begin
       l_check_scan_due_date = ""
   end

   if arscontrol2:check_scan_current_due one of 1 then
   begin
       l_check_scan_amount      = arscxwork:amount_due * 100
       l_check_scan_current_due = str(l_check_scan_amount,"99999999")
       l_check_scan_amount      = 0
   end
   else
   begin
       l_check_scan_due_date = ""
   end

   if arscontrol2:check_scan_total_due one of 1 then
   begin
       l_check_scan_amount    = l_total_amount_due * 100
       l_check_scan_total_due = str(l_check_scan_amount,"99999999")
       l_check_scan_amount    = 0
   end
   else
   begin
       l_check_scan_total_due = ""
   end

l_check_scan_line = l_check_scan_policy_no   +
                    l_check_scan_due_date    +
                    l_check_scan_current_due +
                    l_check_scan_total_due

/* calculate the check digit here */
for l_check_digit_sub = 1 to len(l_check_scan_line)
begin
   l_check_digit_weight = (l_check_digit_sub mod arscontrol2:check_digit_weight) + 1
   l_check_digit_amount[l_check_digit_sub] =
   val(l_check_scan_line[l_check_digit_sub]) * l_check_digit_weight
end

for l_check_digit_sub = 1 to len(l_check_scan_line)
begin
   l_check_digit_total = l_check_digit_total +
                         l_check_digit_amount[l_check_digit_sub]
end

l_check_digit_number = (l_check_digit_total div arscontrol2:check_digit_divisor)
l_check_digit_raw  = l_check_digit_number * arscontrol2:check_digit_divisor
l_check_digit_final = l_check_digit_total - l_check_digit_raw

l_check_digit_final_str = str(l_check_digit_final,"999")
l_check_scan_line = trun(l_check_scan_line) + l_check_digit_final_str



-- removed <NL> after the %s - testing this

Writefile(l_non_pay_name[1],"%s",L_pop)
Writefile(l_non_pay_name[1],"%s",L_ocr_a)
Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s",trun(l_check_scan_line))
Writefile(l_non_pay_name[1],"%s",L_push)
--Writefile(l_non_pay_name[1],"%s<NL>",L_arial_12)

end -- end of check_scan switch

end

Procedure PRINT_DETAIL_LINE
Begin

L_TOTAL_AMOUNT_DUE = 0
I_NAME = SFPNAME:NAME[1]

Include "sfsrevname7.pro"

Switch(ARSCXWORK:TRANS_CODE)
    Case 10     : L_TRANSACTION = "New Policy     "
    Case 11     : L_TRANSACTION = "Cancellation   "
    Case 12,13  : L_TRANSACTION = "Endorsement    "
    Case 14     : L_TRANSACTION = "Renewal        "
--    Case 15     : L_TRANSACTION = "Audit Premium  "
    Case 16     : L_TRANSACTION = "Reinstatement  "
    Case 18,28,68  : L_TRANSACTION = "Installment Chg"
    Case 19,22,23,29 :
                  L_TRANSACTION = "Sur Charge     "
    Default     : L_TRANSACTION = "Transaction    "
End

L_TRANSACTION = "Amount is Past Due"

Writefile(l_non_pay_name[1],"%s<NL>",L_LETTER_GOTHIC_12)

Access ARSCXWORK_ALIAS,
   Set ARSCXWORK_ALIAS:COMPANY_ID = ARSCXWORK:COMPANY_ID,
       ARSCXWORK_ALIAS:POLICY_NO  = arscxwork:policy_no, approximate -- l_hold_POLICY_NO, Approximate

While (ARSCXWORK_ALIAS:COMPANY_ID = ARSCXWORK:COMPANY_ID And
       ARSCXWORK_ALIAS:POLICY_NO  = arscxwork:policy_no)             -- l_hold_POLICY_NO)
      and arscxwork_alias:errornumber = 0
      Begin


L_V_POSITION = L_V_POSITION + 120
L_TOTAL_AMOUNT_DUE = L_TOTAL_AMOUNT_DUE + ARSCXWORK_ALIAS:AMOUNT_DUE

Writefile(l_non_pay_name[1],"%s","<033>&a210h" + Trun(Str(L_V_POSITION) + "V"))
Writefile(l_non_pay_name[1],"%s<NL>",Trun(Str(ARSCXWORK_ALIAS:TRANS_EFF,"MM/DD/YYYY")))
Writefile(l_non_pay_name[1],"%s","<033>&a930h" + Trun(Str(L_V_POSITION) + "V"))
Writefile(l_non_pay_name[1],"%s<NL>",Trun(Str(ARSCXWORK_ALIAS:TRANS_EXP,"MM/DD/YYYY")))
Writefile(l_non_pay_name[1],"%s","<033>&a1620h" + Trun(Str(L_V_POSITION) + "V"))
Writefile(l_non_pay_name[1],"%s<NL>",Trun(L_TRANSACTION))
Writefile(l_non_pay_name[1],"%s","<033>&a4000h" + Trun(Str(L_V_POSITION) + "V"))
Writefile(l_non_pay_name[1],"%s<NL>",Trun(Str(ARSCXWORK_ALIAS:DUE_DATE,"MM/DD/YYYY")))
Writefile(l_non_pay_name[1],"%s","<033>&a4590h" + Trun(Str(L_V_POSITION) + "V"))
Writefile(l_non_pay_name[1],"%s<NL>",Trun(Str(ARSCXWORK_ALIAS:AMOUNT_DUE,"($ZZ,ZZZ,ZZZ.99)")))

L_LINES_PRINTED = L_LINES_PRINTED + 1

If L_LINES_PRINTED >= 29 Then
begin
   Do EJECT_PAGE
   Do PRINT_FORM
   L_LINES_PRINTED = 0
   L_PAGES_CTR = L_PAGES_CTR + 1
   L_V_POSITION = 1800
end

l_ctr = l_ctr + 1

Next ARSCXWORK_ALIAS

End

if arscontrol2:print_full_amount_on_cancel = 1 then
 {
  l_cancel_lit = arscontrol2:print_full_amount_on_cancel_lit
  do get_full_amount_due
  do print_full_amount_due

  L_LINES_PRINTED = L_LINES_PRINTED + 1

  If L_LINES_PRINTED >= 29 Then
   {
    Do EJECT_PAGE
    Do PRINT_FORM
    L_LINES_PRINTED = 0
    L_PAGES_CTR = L_PAGES_CTR + 1
    L_V_POSITION = 1800
   }
 }

/* print cancellation acknowledgement information */

Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL_ITALIC_12)

L_V_POSITION = 3960
L_NOTICE_TYPE = "CX"

l_sfs = "SFS"

access sfsdefault, set sfsdefault:sfs_code = l_sfs

Access ARSCXNOTICE, Set ARSCXNOTICE:COMPANY_ID  = sfsdefault:COMPANY_ID,
                        ARSCXNOTICE:NOTICE_TYPE = L_NOTICE_TYPE

If ARSCXNOTICE:COMPANY_ID <> "" Then
Begin
-- remove 3/7/2007 dap
   For L_CTR = 1 To 10
   Begin
       L_LINE_FIELD = ARSCXNOTICE:LINE_FIELD[L_CTR]
       Do SUBSTITUTE_PARAMETER
       L_H_POSITION = 450
       L_V_POSITION = L_V_POSITION + 120
       Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION))+"V")
       Writefile(l_non_pay_name[1],"%s<NL>",Trun(L_LINE_FIELD))

   End
       Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL_ITALIC_8)
       L_H_POSITION=ARSCXNOTICE:FORM_EDITION_H_POSITION
       L_V_POSITION=ARSCXNOTICE:FORM_EDITION_V_POSITION
       Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION))+"V")
       Writefile(l_non_pay_name[1],"%s<NL>",Trun(ARSCXNOTICE:FORM_EDITION))
End
Else
Begin -- no arscxnotice record found
    Writefile(l_non_pay_name[1],"<033>&a450h3960V<NL>")
    Writefile(l_non_pay_name[1],"%s<NL>","Conditional cancellation notice for non-payment of premium.  We did not receive")
    Writefile(l_non_pay_name[1],"<033>&a450h4080V<NL>")
    Writefile(l_non_pay_name[1],"%s<NL>","your payment when due.  Regretfully your policy will be cancelled at 12:01 A.M.")
    Writefile(l_non_pay_name[1],"<033>&a450h4200V<NL>")
    Writefile(l_non_pay_name[1],"%s %s %s<NL>","on",Str((l_hold_CX_EFF_DATE),"MM/DD/YYYY"),"if payment is not received before that date.")
    Writefile(l_non_pay_name[1],"<033>&a450h4440V<NL>")
    Writefile(l_non_pay_name[1],"%s<NL>","Contact your agent at the address and phone number above for assistance.")
End -- end of not finding the arscxnotice record

L_V_POSITION = 5310
L_H_POSITION = 4500
Writefile(l_non_pay_name[1],"%s<NL>",L_ARIAL_BOLD_14)
Writefile(l_non_pay_name[1],"%s","<033>&a" + Trun(Str(L_H_POSITION)) + "h" + Trun(Str(L_V_POSITION)+"V"))
Writefile(l_non_pay_name[1],"%s<NL>",Str(L_TOTAL_AMOUNT_DUE,"($ZZ,ZZZ,ZZZ.99)"))

End



Procedure SUBSTITUTE_PARAMETER
Begin

Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = ARSCXWORK:POLICY_NO

access arscontrol, set arscontrol:company_id = arscxwork:company_id

Access SFPNAME,
   Set SFPNAME:POLICY_NO    = SFPCURRENT:POLICY_NO,
       SFPNAME:POL_YEAR     = SFPCURRENT:POL_YEAR,
       SFPNAME:END_SEQUENCE = SFPCURRENT:END_SEQUENCE

Access SFSLINE,
   Set SFSLINE:COMPANY_ID       = SFPNAME:COMPANY_ID,
       SFSLINE:LINE_OF_BUSINESS = SFPNAME:LINE_OF_BUSINESS,
       SFSLINE:LOB_SUBLINE      = "00"

access arspayplan, set arspayplan:company_id       = arscxwork:company_id,
                       arspayplan:line_of_business = arscxwork:line_of_business,
                       arspayplan:payment_plan     = arscxwork:payment_plan

/* @ - is used for the effective date of the cancellation */

    L_POSITION = 0
    L_POSITION = Pos("@",L_LINE_FIELD)

    L_LENGTH   = Len(L_LINE_FIELD)

    If L_POSITION <> 0 Then
    Begin
-- build where the effective of cancellation lies
        L_LINE_FIELD_1 = Trun(L_LINE_FIELD[1,L_POSITION -1])
        L_LINE_FIELD_2 = Trun(L_LINE_FIELD[L_POSITION + 1, L_LENGTH])
        L_SUBSTITUTE_DATE = Str(l_hold_CX_EFF_DATE,"MM/DD/YYYY")
        L_LINE_FIELD = Trun(L_LINE_FIELD_1) + " " + trun(L_SUBSTITUTE_DATE) + " " + Trun(L_LINE_FIELD_2)
    End

    L_POSITION_1 = 0
    L_POSITION_1 = Pos("*",L_LINE_FIELD)
    L_LENGTH     = Len(L_LINE_FIELD)

    If L_POSITION_1 <> 0 Then
    Begin
-- build where the effective of the policy lies
        L_LINE_FIELD_1 = Trun(L_LINE_FIELD[1,L_POSITION_1 -1])
        L_LINE_FIELD_2 = Trun(L_LINE_FIELD[L_POSITION_1 + 1, L_LENGTH])
        L_SUBSTITUTE_DATE = Str(SFPNAME:EFF_DATE,"MM/DD/YYYY")
        L_LINE_FIELD = Trun(L_LINE_FIELD_1) + " " + Trun(L_SUBSTITUTE_DATE) + " " + Trun(L_LINE_FIELD_2)
    End

-- build where the expiration date of the policy lies

    L_POSITION_2 = 0
    L_POSITION_2 = Pos("&",L_LINE_FIELD)
    L_LENGTH     = Len(L_LINE_FIELD)

    If L_POSITION_2 <> 0 Then
    Begin
        L_LINE_FIELD_1 = Trun(L_LINE_FIELD[1,L_POSITION_2 -1])
        L_LINE_FIELD_2 = Trun(L_LINE_FIELD[L_POSITION_2 + 1, L_LENGTH])
        L_SUBSTITUTE_DATE = Str(SFPNAME:EXP_DATE,"MM/DD/YYYY")
        L_LINE_FIELD = Trun(L_LINE_FIELD_1) + " " + Trun(L_SUBSTITUTE_DATE) + " " + Trun(L_LINE_FIELD_2)
    End

-- build where the total amount due of the policy lies
    L_POSITION_3 = 0
    L_POSITION_3 = Pos("^",L_LINE_FIELD)
    L_LENGTH     = Len(L_LINE_FIELD)
    If L_POSITION_3 <> 0 Then
    Begin
        L_LINE_FIELD_1 = Trun(L_LINE_FIELD[1,L_POSITION_3 -1])
        L_LINE_FIELD_2 = Trun(L_LINE_FIELD[L_POSITION_3 + 1, L_LENGTH])
        L_SUBSTITUTE_DATE = Str(L_TOTAL_AMOUNT_DUE,"$$$,$$$.99-")
        L_LINE_FIELD = Trun(L_LINE_FIELD_1) + " " + Trun(L_SUBSTITUTE_DATE) + " " + Trun(L_LINE_FIELD_2)
    End

-- build where the line of business the policy lies
    L_POSITION_4 = 0
    L_POSITION_4 = Pos("`",L_LINE_FIELD)
    L_LENGTH     = Len(L_LINE_FIELD)
    If L_POSITION_4 <> 0 Then
    Begin
        L_LINE_FIELD_1 = Trun(L_LINE_FIELD[1,L_POSITION_4 -1])
        L_LINE_FIELD_2 = Trun(L_LINE_FIELD[L_POSITION_4 + 1, L_LENGTH])
        L_SUBSTITUTE_DATE = Trun(SFSLINE:DESCRIPTION)
        L_LINE_FIELD = Trun(L_LINE_FIELD_1) + " " + Trun(L_SUBSTITUTE_DATE) + " " + Trun(L_LINE_FIELD_2)
    End

-- build where the due date of the cancellation lies
    L_POSITION_5 = 0
    L_POSITION_5 = Pos("!",L_LINE_FIELD)
    L_LENGTH     = Len(L_LINE_FIELD)
    If L_POSITION_5 <> 0 Then
    Begin
        L_LINE_FIELD_1 = Trun(L_LINE_FIELD[1,L_POSITION_5 -1])
        L_LINE_FIELD_2 = Trun(L_LINE_FIELD[L_POSITION_5 + 1, L_LENGTH])
        L_SUBSTITUTE_DATE = str(todaysdate + arscontrol:non_pay_days,"MM/DD/YYYY")
        L_LINE_FIELD = Trun(L_LINE_FIELD_1) + " " + Trun(L_SUBSTITUTE_DATE) + " " + Trun(L_LINE_FIELD_2)
    End

-- build where the late fee
    L_POSITION_6 = 0
    L_POSITION_6 = Pos("+",L_LINE_FIELD)
    L_LENGTH     = Len(L_LINE_FIELD)
    If L_POSITION_6 <> 0 Then
    Begin
        L_LINE_FIELD_1 = Trun(L_LINE_FIELD[1,L_POSITION_6 -1])
        L_LINE_FIELD_2 = Trun(L_LINE_FIELD[L_POSITION_6 + 1, L_LENGTH])
        L_SUBSTITUTE_DATE = str(arspayplan:late_fee,"$$$.99")
        L_LINE_FIELD = Trun(L_LINE_FIELD_1) + " " + Trun(L_SUBSTITUTE_DATE) + " " + Trun(L_LINE_FIELD_2)
    End

End

Procedure EJECT_PAGE
Begin

    Writefile(l_non_pay_name[1],"%s",L_FORMFEED+"<NL>")
    Writefile(l_non_pay_name[1],"%s",L_RESET + "<NL>")
-- options are:
--     1 = Executive
--     2 = Letter
--     3 = Legal
--     4 = A4
--     5 = Monarch
--     6 = Commercial 10
--     7 = International DL
--     8 = International C5

Writefile(l_non_pay_name[1],"<033>&l2A")   -- set the printer to Letter, see above

    L_PAGES_CTR = L_PAGES_CTR + 1

End

Procedure UPDATE_SFPNAME
Begin

Access SFPNAME, Set SFPNAME:POLICY_NO    = L_POLICY_NO,
                    SFPNAME:POL_YEAR     = L_POL_YEAR,
                    SFPNAME:END_SEQUENCE = L_END_SEQUENCE, Approximate

If SFPNAME:POLICY_NO    = L_POLICY_NO And
   SFPNAME:POL_YEAR     = L_POL_YEAR And
   SFPNAME:END_SEQUENCE = L_END_SEQUENCE Then
   Begin
   Change SFPNAME
   Begin
       SFPNAME:NUMBER_OF_LATE_PAY = SFPNAME:NUMBER_OF_LATE_PAY + 1
   End
   End

End

Procedure REVERSE_NAME
Begin

Include "sfsrevname7.pro"

End

Procedure BUILD_CANCEL_WORK_FILE
Begin

 --L_COMPANY = ""
 L_COPY_CTR = 10
 l_hold_policy_no = 0

 Access ARSCANCELWRK2_ALIAS, Set ARSCANCELWRK2_ALIAS:COMPANY_ID = L_COMPANY_id, Approximate

 While ARSCANCELWRK2_ALIAS:Company_id = l_company_id
 Begin

--if l_hold_policy_no = 0 then
--begin
    l_hold_company_id = arscancelwrk2_alias:company_id
    l_hold_policy_no  = arscancelwrk2_alias:policy_no
    l_hold_due_date   = arscancelwrk2_alias:due_date
--end

--if l_hold_policy_no <> arscancelwrk2_alias:policy_no then
--begin

 Access ARSCONTROL, Set ARSCONTROL:COMPANY_ID = l_hold_COMPANY_ID
 Access ARSCANCEL_ALIAS, Set ARSCANCEL_ALIAS:COMPANY_ID = l_hold_COMPANY_ID,
                             ARSCANCEL_ALIAS:POLICY_NO  = l_hold_POLICY_NO, Approximate

 While ARSCANCEL_ALIAS:COMPANY_ID = l_hold_company_id And
       ARSCANCEL_ALIAS:POLICY_NO  = l_hold_POLICY_NO
         Begin
         If G_POLICY_NO = 0 And
            ARSCANCEL_ALIAS:TRANS_DATE = TODAYSDATE And
            ARSCANCEL_ALIAS:DUE_DATE   = l_hold_DUE_DATE and
            arscancel_alias:check_reference = 0  Then
             {
               Do ADD_ARSCXWORK
             }
         Else
          {
           If G_POLICY_NO  <> 0 And
              G_POLICY_NO = l_hold_POLICY_NO And
              ARSCANCEL_ALIAS:TRANS_DATE =  TODAYSDATE And
              ARSCANCEL_ALIAS:DUE_DATE   =  l_hold_DUE_DATE and
              arscancel_alias:check_reference = 0  Then
               {
                 Do ADD_ARSCXWORK
               }
           else
           if g_policy_no <> 0 and
              g_policy_no = l_hold_policy_no and
              l_rerun_notices = "Y" and
              arscancel_alias:due_date = l_hold_due_date and
              arscancel_alias:check_reference = 0  then
               {
                 do add_arscxwork
               }
          }

        Next ARSCANCEL_ALIAS
        End

 Next ARSCANCELWRK2_ALIAS
 End -- end of loop for arscancelwrk2

End

Procedure get_late_fee
begin
/*
        to get the late_fee from arspayplan and add bill record in arsbilling
*/

--l_company_id      = ""
l_policy_hold     = 0
l_new_trans_code  = 70
l_late_fee_exists = 0

if arscancelwrk2:policy_no = 509000032 then 
{
   write ("%c%s%n",01001," arscancelwrk2:policy_no     = ", arscancelwrk2:policy_no)
   read (23,1,"get_late_fee  ",l_enter,1)
}

access arscancelwrk2_alias,
   set arscancelwrk2_alias:company_id = l_company_id, approximate

While ARSCANCELWRK2_ALIAS:COMPANY_ID <> ""
BEGIN

Access ARSPAYPLAN, Set ARSPAYPLAN:COMPANY_ID       = ARSCANCELWRK2_ALIAS:COMPANY_ID,
                       ARSPAYPLAN:LINE_OF_BUSINESS = ARSCANCELWRK2_ALIAS:LINE_OF_BUSINESS,
                       ARSPAYPLAN:PAYMENT_PLAN     = ARSCANCELWRK2_ALIAS:PAYMENT_PLAN


IF ARSPAYPLAN:LATE_FEE <> 0 then -- and
--    l_total_amount          > 0.00 THEN
BEGIN

/* to get the last sub code in arsbilling per policy_no */
        l_late_fee_exists = 0

        Access ARSBILLING_ALT, Set ARSBILLING_ALT:COMPANY_ID = ARSCANCELWRK2_ALIAS:COMPANY_ID,
                                   ARSBILLING_ALT:POLICY_NO  = ARSCANCELWRK2_ALIAS:POLICY_NO, APPROXIMATE

        While ARSBILLING_ALT:COMPANY_ID   = ARSCANCELWRK2_ALIAS:COMPANY_ID And
              ARSBILLING_ALT:POLICY_NO    = ARSCANCELWRK2_ALIAS:POLICY_NO
            Begin
               if arsbilling_alt:trans_code one of 70 and
                  (arsbilling_alt:installment_amount -
                  (arsbilling_alt:total_amount_paid +
                   arsbilling_alt:write_off_amount)) > 0.00 and
                   arsbilling_alt:billed_date = todaysdate and 
                   arsbilling_alt:status one of "B","O" then
                   begin
                       l_late_fee_exists = 1
                   end

               if arsbilling_alt:trans_code = l_new_trans_code then
               begin
                   L_SUB_CODE = ARSBILLING_ALT:SUB_CODE
               end
               Next ARSBILLING_ALT
            End

        L_SUB_CODE = L_SUB_CODE + 10
-- 07/17/2019
-- per Bob B (G and G)
-- they want to send multiple late fees if they do exist

        -- l_late_fee_exists = 0

        if l_late_fee_exists one of 0 then
        begin

        Access ARSBILLING, Set ARSBILLING:COMPANY_ID       = ARSCANCELWRK2_ALIAS:COMPANY_ID,
                               ARSBILLING:POLICY_NO        = ARSCANCELWRK2_ALIAS:POLICY_NO,
                               ARSBILLING:TRANS_DATE       = ARSCANCELWRK2_ALIAS:TRANS_DATE,
                               ARSBILLING:TRANS_EFF        = ARSCANCELWRK2_ALIAS:TRANS_EFF,
                               ARSBILLING:TRANS_EXP        = ARSCANCELWRK2_ALIAS:EXP_DATE,
                               ARSBILLING:TRANS_CODE       = l_new_trans_code,
                               ARSBILLING:LINE_OF_BUSINESS = ARSCANCELWRK2_ALIAS:LINE_OF_BUSINESS,
                               ARSBILLING:COMM_RATE        = ARSCANCELWRK2_ALIAS:COMM_RATE,
                               ARSBILLING:SUB_CODE         = L_SUB_CODE

        IF ARSBILLING:COMPANY_ID       <> ARSCANCELWRK2_ALIAS:COMPANY_ID or
           ARSBILLING:POLICY_NO        <> ARSCANCELWRK2_ALIAS:POLICY_NO or
           ARSBILLING:TRANS_DATE       <> ARSCANCELWRK2_ALIAS:TRANS_DATE or
           ARSBILLING:TRANS_EFF        <> ARSCANCELWRK2_ALIAS:TRANS_EFF or
           ARSBILLING:TRANS_EXP        <> ARSCANCELWRK2_ALIAS:EXP_DATE or
           ARSBILLING:TRANS_CODE       <> l_new_trans_code or
           ARSBILLING:LINE_OF_BUSINESS <> ARSCANCELWRK2_ALIAS:LINE_OF_BUSINESS or
           ARSBILLING:COMM_RATE        <> ARSCANCELWRK2_ALIAS:COMM_RATE or
           ARSBILLING:SUB_CODE         <> L_SUB_CODE THEN
              Begin
                ADD ARSBILLING
                BEGIN
                    ARSBILLING:COMPANY_ID       = ARSCANCELWRK2_ALIAS:COMPANY_ID
                    ARSBILLING:POLICY_NO        = ARSCANCELWRK2_ALIAS:POLICY_NO
                    ARSBILLING:TRANS_DATE       = ARSCANCELWRK2_ALIAS:TRANS_DATE
                    ARSBILLING:TRANS_EFF        = ARSCANCELWRK2_ALIAS:TRANS_EFF
                    ARSBILLING:TRANS_EXP        = ARSCANCELWRK2_ALIAS:EXP_DATE
                    ARSBILLING:TRANS_CODE       = l_new_trans_code
                    ARSBILLING:LINE_OF_BUSINESS = ARSCANCELWRK2_ALIAS:LINE_OF_BUSINESS
                    ARSBILLING:COMM_RATE        = ARSCANCELWRK2_ALIAS:COMM_RATE
                    ARSBILLING:SUB_CODE         = L_SUB_CODE
                    ARSBILLING:BILLING_CTR      = arscancelwrk2_alias:billing_ctr
                    ARSBILLING:RETURN_CHECK_CTR = arscancelwrk2_alias:return_check_ctr
                    ARSBILLING:LOB_SUBLINE      = ARSCANCELWRK2_ALIAS:LOB_SUBLINE
                    ARSBILLING:DUE_DATE         = ARSCANCELWRK2_ALIAS:DUE_DATE
                    ARSBILLING:BILL_PLAN        = ARSCANCELWRK2_ALIAS:BILL_PLAN
                    ARSBILLING:PAYMENT_PLAN     = ARSCANCELWRK2_ALIAS:PAYMENT_PLAN
                    ARSBILLING:STATUS           = "B"
                    ARSBILLING:STATUS_DATE      = todaysdate
                    ARSBILLING:BILLED_DATE      = todaysdate
                    ARSBILLING:INSTALLMENT_AMOUNT  = ARSPAYPLAN:LATE_FEE
                    ARSBILLING:TOTAL_AMOUNT_PAID   = 0
                    ARSBILLING:DISBURSEMENT_AMOUNT = 0
                    ARSBILLING:WRITE_OFF           = ARSCANCELWRK2_ALIAS:WRITE_OFF
                    ARSBILLING:WRITE_OFF_AMOUNT    = 0.00
                    ARSBILLING:WRITE_OFF_DATE      = ARSCANCELWRK2_ALIAS:WRITE_OFF_DATE
                    ARSBILLING:PRIOR_STATUS        = ARSCANCELWRK2_ALIAS:PRIOR_STATUS
                    ARSBILLING:PRIOR_STATUS_DATE   = ARSCANCELWRK2_ALIAS:PRIOR_STATUS_DATE
                    ARSBILLING:PRIOR_TRANS_CODE    = ARSCANCELWRK2_ALIAS:PRIOR_TRANS_CODE
                    ARSBILLING:REINSTATED          = ARSCANCELWRK2_ALIAS:REINSTATED
                    ARSBILLING:USER                = ARSCANCELWRK2_ALIAS:USER
                    ARSBILLING:POL_YEAR            = ARSCANCELWRK2_ALIAS:POL_YEAR
                    ARSBILLING:END_SEQUENCE        = ARSCANCELWRK2_ALIAS:END_SEQUENCE
                    ARSBILLING:USER_CONSOLE        = ARSCANCELWRK2_ALIAS:USER_CONSOLE
                    arsbilling:agent_no            = arscancelwrk2_alias:agent_no


              End -- end of add

                DO UPDATE_ARSCANCELWRK2

              END  -- end of access
                /*   with ARSBILLING Late fee records added - the ARSCANCELWRK2 file
                     must have the late fee records added.
                     */
    end -- end of checking to see if an outstanding late fee exists

    END -- end of arspayplan:late fee <>  ""

--    END  -- end of policy_no <> l_hold_policy

--    L_POLICY_HOLD = ARSCANCELWRK2_ALIAS:POLICY_NO

    NEXT ARSCANCELWRK2_ALIAS

    End -- end of ARSCANCELWRK2_ALIAS

end   -- end of get_late_fee

Procedure Update_arscancelwrk2
begin

access arscancelwrk2_alt2,
set arscancelwrk2_alt2:company_id = arsbilling:company_id,
    arscancelwrk2_alt2:policy_no  = arsbilling:policy_no,
    arscancelwrk2_alt2:due_date   = arsbilling:due_date

if  arscancelwrk2_alt2:company_id = arsbilling:company_id and
    arscancelwrk2_alt2:policy_no  = arsbilling:policy_no and
    arscancelwrk2_alt2:due_date   = arsbilling:due_date then
    begin
    change arscancelwrk2_alt2
    begin

           arscancelwrk2_alt2:amount_past_due = arscancelwrk2_alt2:amount_past_due +
                                                arsbilling:installment_amount
    end -- end of change

    end -- end of record exist so change it

end -- end of procedure

Procedure ADD_ARSCXWORK
Begin

/*
   problem was creating duplicate keys and not writing out using l_copy_ctr
   put in logic to establish actual sub code and increment by 10 to
   prevent the duplicate key issues

   New place holder = l_arscxwork_sub_code

*/

L_ARSCXWORK_SUB_CODE = 0

Access ARSCXWORK_ALT,
   Set ARSCXWORK_ALT:COMPANY_ID = ARSCANCEL_ALIAS:COMPANY_ID,
       ARSCXWORK_ALT:POLICY_NO  = ARSCANCEL_ALIAS:POLICY_NO,
       ARSCXWORK_ALT:DUE_DATE   = ARSCANCEL_ALIAS:DUE_DATE, Approximate

While ARSCXWORK_ALT:COMPANY_ID = ARSCANCEL_ALIAS:COMPANY_ID And
      ARSCXWORK_ALT:POLICY_NO = ARSCANCEL_ALIAS:POLICY_NO And
      ARSCXWORK_ALT:DUE_DATE  = ARSCANCEL_ALIAS:DUE_DATE
      Begin

         L_ARSCXWORK_SUB_CODE = ARSCXWORK_ALT:SUB_CODE
         Next ARSCXWORK_ALT
      End

--L_ARSCXWORK_SUB_CODE = L_ARSCXWORK_SUB_CODE + 10

Access ARSCXWORK, Set ARSCXWORK:COMPANY_ID = ARSCANCEL_ALIAS:COMPANY_ID,
                      ARSCXWORK:POLICY_NO  = ARSCANCEL_ALIAS:POLICY_NO,
                      ARSCXWORK:DUE_DATE   = ARSCANCEL_ALIAS:DUE_DATE,
                      ARSCXWORK:SUB_CODE   = L_ARSCXWORK_SUB_CODE

/*
write ("%c%s%s",2001,"ARSCXWORK:COMPANY_ID =  ",ARSCXWORK:COMPANY_ID)
write ("%c%s%s",3001,"ARSCANCEL_ALIAS:COMPANY_ID = ",ARSCANCEL_ALIAS:COMPANY_ID)
write ("%c%s%n",4001,"ARSCXWORK:POLICY_NO  = ",ARSCXWORK:POLICY_NO)
write ("%c%s%n",5001,"ARSCANCEL_ALIAS:POLICY_NO = ",ARSCANCEL_ALIAS:POLICY_NO)
write ("%c%s%n",6001,"ARSCXWORK:DUE_DATE   = ",ARSCXWORK:DUE_DATE)
write ("%c%s%n",7001,"ARSCANCEL_ALIAS:DUE_DATE = ",ARSCANCEL_ALIAS:DUE_DATE)
write ("%c%s%n",8001,"ARSCXWORK:SUB_CODE   = ",ARSCXWORK:SUB_CODE)
write ("%c%s%n",9001,"L_ARSCXWORK_SUB_CODE = ",L_ARSCXWORK_SUB_CODE)
Read (23,1,"at top of if Press Enter to Continue ",L_ENTER,1)
*/

    If ARSCXWORK:COMPANY_ID = ARSCANCEL_ALIAS:COMPANY_ID And
       ARSCXWORK:POLICY_NO  = ARSCANCEL_ALIAS:POLICY_NO And
       ARSCXWORK:DUE_DATE   = ARSCANCEL_ALIAS:DUE_DATE And
       ARSCXWORK:SUB_CODE   = L_ARSCXWORK_SUB_CODE Then
       Begin
       Change ARSCXWORK
           Begin
               ARSCXWORK:AMOUNT_DUE = ARSCXWORK:AMOUNT_DUE + ARSCANCEL_ALIAS:AMOUNT_PAST_DUE
           End
       End

    If ARSCXWORK:COMPANY_ID <> ARSCANCEL_ALIAS:COMPANY_ID Or
       ARSCXWORK:POLICY_NO  <> ARSCANCEL_ALIAS:POLICY_NO Or
       ARSCXWORK:DUE_DATE   <> ARSCANCEL_ALIAS:DUE_DATE Or
       ARSCXWORK:SUB_CODE   <> L_ARSCXWORK_SUB_CODE Then
       Begin
L_ARSCXWORK_SUB_CODE = L_ARSCXWORK_SUB_CODE + 10
       Add ARSCXWORK
       Begin
           ARSCXWORK:COMPANY_ID     = ARSCANCEL_ALIAS:COMPANY_ID
           ARSCXWORK:POLICY_NO      = ARSCANCEL_ALIAS:POLICY_NO
           ARSCXWORK:DUE_DATE       = ARSCANCEL_ALIAS:DUE_DATE
           ARSCXWORK:SUB_CODE       = L_ARSCXWORK_SUB_CODE
           ARSCXWORK:AMOUNT_DUE     = ARSCANCEL_ALIAS:AMOUNT_PAST_DUE
           ARSCXWORK:TRANS_EFF      = ARSCANCEL_ALIAS:TRANS_EFF
           ARSCXWORK:TRANS_EXP      = ARSCANCEL_ALIAS:EXP_DATE

           ARSCXWORK:TRANS_CODE     = ARSCANCEL_ALIAS:TRANS_CODE
           ARSCXWORK:AGENT_NO       = ARSCANCEL_ALIAS:AGENT_NO
           ARSCXWORK:LINE_OF_BUSINESS = ARSCANCEL_ALIAS:LINE_OF_BUSINESS
           ARSCXWORK:PAYMENT_PLAN   = ARSCANCEL_ALIAS:PAYMENT_PLAN
           arscxwork:cx_eff_date    = arscancel_alias:cx_eff_date
           ARSCXWORK:ITEM_NUMBER    = ARSCANCEL_ALIAS:ITEM_NUMBER
           ARSCXWORK:POL_YEAR       = ARSCANCEL_ALIAS:POL_YEAR
           ARSCXWORK:END_SEQUENCE   = ARSCANCEL_ALIAS:END_SEQUENCE
           ARSCXWORK:BILLING_CTR    = ARSCANCEL_ALIAS:BILLING_CTR

           Access SFPNAME,
              Set SFPNAME:POLICY_NO = ARSCXWORK:POLICY_NO,
                  SFPNAME:POL_YEAR  = ARSCXWORK:TRANS_EFF_YYYY, Generic

           If SFPNAME:POLICY_NO = ARSCXWORK:POLICY_NO And
              SFPNAME:POL_YEAR  = ARSCXWORK:TRANS_EFF_YYYY
              Then
              Begin
                 ARSCXWORK:PAYOR_NAME[1] = SFPNAME:NAME[1]
                 ARSCXWORK:PAYOR_NAME[2] = SFPNAME:NAME[2]
                 ARSCXWORK:PAYOR_NAME[3] = SFPNAME:NAME[3]
                 ARSCXWORK:PAYOR_ADDRESS[1] = SFPNAME:ADDRESS[1]
                 ARSCXWORK:PAYOR_ADDRESS[2] = SFPNAME:ADDRESS[2]
                 ARSCXWORK:PAYOR_ADDRESS[3] = SFPNAME:ADDRESS[3]
                 ARSCXWORK:PAYOR_CITY       = SFPNAME:CITY
                 ARSCXWORK:PAYOR_STATE      = SFPNAME:STR_STATE
                 ARSCXWORK:PAYOR_STR_ZIPCODE = SFPNAME:STR_ZIPCODE
              End  -- end of sfpname access

         End -- end of adding records

       End  -- end of checking for record exists add

End -- end of procedure

Procedure GET_CURRENT_SFPNAME
Begin

--L_POL_YEAR     = Year(ARSCXWORK:TRANS_EXP) - 1
--L_END_SEQUENCE = 0


Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = ARSCXWORK:POLICY_NO

Access SFPNAME,
   Set SFPNAME:POLICY_NO = SFPCURRENT:POLICY_NO,
       SFPNAME:POL_YEAR  = SFPCURRENT:POL_YEAR,
       SFPNAME:END_SEQUENCE  = SFPCURRENT:END_SEQUENCE

  L_POLICY_NO    = SFPNAME:POLICY_NO
  L_POL_YEAR     = SFPNAME:POL_YEAR
  L_END_SEQUENCE = SFPNAME:END_SEQUENCE

End  -- end of get_current_sfpname procedure

Procedure GET_CURRENT_SFPNAME1
Begin

Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = ARSCANCELWRK2:POLICY_NO

Access SFPNAME,
   Set SFPNAME:POLICY_NO = SFPCURRENT:POLICY_NO,
       SFPNAME:POL_YEAR  = SFPCURRENT:POL_YEAR,
       SFPNAME:END_SEQUENCE  = SFPCURRENT:END_SEQUENCE

--While SFPNAME:POLICY_NO = SFPCURRENT:POLICY_NO And
--      SFPNAME:POL_YEAR  = SFPCURRENT:POL_YEAR
--      Begin
          L_POLICY_NO    = SFPNAME:POLICY_NO
          L_POL_YEAR     = SFPNAME:POL_YEAR
          L_END_SEQUENCE = SFPNAME:END_SEQUENCE
--          Next SFPNAME
--      End

End  -- end of get_current_sfpname procedure

Procedure GET_NUMBER_OF_COPIES
Begin

For L_SFPNAME_LOOP_CTR = 1 To 200
Begin
     L_SFPNAME_POLICY_NO[L_SFPNAME_LOOP_CTR] = 0
     L_SFPNAME_POL_YEAR[L_SFPNAME_LOOP_CTR]  = 0
     L_SFPNAME_END_SEQUENCE[L_SFPNAME_LOOP_CTR] = 0
     L_SFPNAME_PREM_NO[L_SFPNAME_LOOP_CTR]   = 0
     L_SFPNAME_BUILD_NO[L_SFPNAME_LOOP_CTR]  = 0
     L_SFPNAME_SUB_CODE[L_SFPNAME_LOOP_CTR]  = 0
End

L_SFPNAME_LOOP_CTR = 0

L_POL_YEAR     = Year(ARSCXWORK:TRANS_EXP) - 1

Access SFPPOINT, Set SFPPOINT:POLICY_NO = L_POLICY_NO,
                     SFPPOINT:POL_YEAR  = L_POL_YEAR

If SFPPOINT:POLICY_NO = L_POLICY_NO And
   SFPPOINT:POL_YEAR  = L_POL_YEAR Then
   Begin
      L_END_SEQUENCE = SFPPOINT:END_SEQUENCE
   End
   Else
   Begin
      L_POL_YEAR     = 0000
      L_END_SEQUENCE = 0000
   End


If L_POL_YEAR = 0000 Then
Begin

    Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = L_POLICY_NO

    Access SFPNAME,
       Set SFPNAME:POLICY_NO    = SFPCURRENT:POLICY_NO,
           SFPNAME:POL_YEAR     = SFPCURRENT:POL_YEAR,
           SFPNAME:END_SEQUENCE = SFPCURRENT:END_SEQUENCE

    L_POL_YEAR = SFPNAME:POL_YEAR
    L_END_SEQUENCE = SFPNAME:END_SEQUENCE

End


If L_POL_YEAR = 0000 Then
Begin

Access SFPNAME,
   Set SFPNAME:POLICY_NO = L_POLICY_NO, Approximate

L_POL_YEAR = 0000

While SFPNAME:POLICY_NO = L_POLICY_NO
      Begin
--          If SFPNAME:EXP_DATE = ARSCXWORK:TRANS_EXP Then
          If SFPNAME:EXP_DATE = ARSCancelwRK2_alias:EXP_date Then
          Begin
             L_POL_YEAR     = SFPNAME:POL_YEAR
             L_END_SEQUENCE = SFPNAME:END_SEQUENCE
          End
      Next SFPNAME
      End

End

Access SFPSUPP, Set SFPSUPP:POLICY_NO    = L_POLICY_NO,
                    SFPSUPP:POL_YEAR     = L_POL_YEAR,
                    SFPSUPP:END_SEQUENCE = L_END_SEQUENCE, Generic


While SFPSUPP:POLICY_NO    = L_POLICY_NO And
      SFPSUPP:POL_YEAR     = L_POL_YEAR And
      SFPSUPP:END_SEQUENCE = L_END_SEQUENCE
      Begin

      if sfpsupp:mortgage_id not one of "" then
      {
         L_COPY_CTR = L_COPY_CTR + 1
         L_SFPNAME_LOOP_CTR = L_COPY_CTR  -- the first 3 positions are blank
         L_SFPNAME_POLICY_NO[L_SFPNAME_LOOP_CTR] = SFPSUPP:POLICY_NO
         L_SFPNAME_POL_YEAR[L_SFPNAME_LOOP_CTR]  = SFPSUPP:POL_YEAR
         L_SFPNAME_END_SEQUENCE[L_SFPNAME_LOOP_CTR] = SFPSUPP:END_SEQUENCE
         L_SFPNAME_PREM_NO[L_SFPNAME_LOOP_CTR]   = SFPSUPP:PREM_NO
         L_SFPNAME_BUILD_NO[L_SFPNAME_LOOP_CTR]  = SFPSUPP:BUILD_NO
         L_SFPNAME_SUB_CODE[L_SFPNAME_LOOP_CTR]  = SFPSUPP:SUB_CODE
      }
      else
      If SFPSUPP:name[1] <> "" Then
      {
         L_COPY_CTR = L_COPY_CTR + 1
         L_SFPNAME_LOOP_CTR = L_COPY_CTR  -- the first 3 positions are blank
         L_SFPNAME_POLICY_NO[L_SFPNAME_LOOP_CTR] = SFPSUPP:POLICY_NO
         L_SFPNAME_POL_YEAR[L_SFPNAME_LOOP_CTR]  = SFPSUPP:POL_YEAR
         L_SFPNAME_END_SEQUENCE[L_SFPNAME_LOOP_CTR] = SFPSUPP:END_SEQUENCE
         L_SFPNAME_PREM_NO[L_SFPNAME_LOOP_CTR]   = SFPSUPP:PREM_NO
         L_SFPNAME_BUILD_NO[L_SFPNAME_LOOP_CTR]  = SFPSUPP:BUILD_NO
         L_SFPNAME_SUB_CODE[L_SFPNAME_LOOP_CTR]  = SFPSUPP:SUB_CODE
      }
      Next SFPSUPP
      End

End  -- end of get_number_of_copies

Procedure GET_NUMBER_OF_COPIES1
Begin

For L_SFPNAME_LOOP_CTR = 1 To 200
Begin
     L_SFPNAME_POLICY_NO[L_SFPNAME_LOOP_CTR] = 0
     L_SFPNAME_POL_YEAR[L_SFPNAME_LOOP_CTR]  = 0
     L_SFPNAME_END_SEQUENCE[L_SFPNAME_LOOP_CTR] = 0
     L_SFPNAME_PREM_NO[L_SFPNAME_LOOP_CTR]   = 0
     L_SFPNAME_BUILD_NO[L_SFPNAME_LOOP_CTR]  = 0
     L_SFPNAME_SUB_CODE[L_SFPNAME_LOOP_CTR]  = 0
End

L_SFPNAME_LOOP_CTR = 0

L_POL_YEAR     = Year(ARSCXWORK:TRANS_EXP) - 1

Access SFPPOINT, Set SFPPOINT:POLICY_NO = L_POLICY_NO,
                     SFPPOINT:POL_YEAR  = L_POL_YEAR

If SFPPOINT:POLICY_NO = L_POLICY_NO And
   SFPPOINT:POL_YEAR  = L_POL_YEAR Then
   Begin
      L_END_SEQUENCE = SFPPOINT:END_SEQUENCE
   End
   Else
   Begin
      L_POL_YEAR     = 0000
      L_END_SEQUENCE = 0000
   End


If L_POL_YEAR = 0000 Then
Begin

    Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = L_POLICY_NO

    Access SFPNAME,
       Set SFPNAME:POLICY_NO    = SFPCURRENT:POLICY_NO,
           SFPNAME:POL_YEAR     = SFPCURRENT:POL_YEAR,
           SFPNAME:END_SEQUENCE = SFPCURRENT:END_SEQUENCE

    L_POL_YEAR = SFPNAME:POL_YEAR
    L_END_SEQUENCE = SFPNAME:END_SEQUENCE

End


If L_POL_YEAR = 0000 Then
Begin

Access SFPNAME,
   Set SFPNAME:POLICY_NO = L_POLICY_NO, Approximate

L_POL_YEAR = 0000

While SFPNAME:POLICY_NO = L_POLICY_NO
      Begin
          If SFPNAME:EXP_DATE = ARSCXWORK:TRANS_EXP Then
          Begin
             L_POL_YEAR     = SFPNAME:POL_YEAR
             L_END_SEQUENCE = SFPNAME:END_SEQUENCE
          End
      Next SFPNAME
      End

End

Access SFPSUPP, Set SFPSUPP:POLICY_NO    = L_POLICY_NO,
                    SFPSUPP:POL_YEAR     = L_POL_YEAR,
                    SFPSUPP:END_SEQUENCE = L_END_SEQUENCE, Generic

--L_END_SEQUENCE = SFPCURRENT:END_SEQUENCE

While SFPSUPP:POLICY_NO    = L_POLICY_NO And
      SFPSUPP:POL_YEAR     = L_POL_YEAR And
      SFPSUPP:END_SEQUENCE = L_END_SEQUENCE
      Begin

      if sfpsupp:mortgage_id not one of "" then
      {
         L_COPY_CTR = L_COPY_CTR + 1
         L_SFPNAME_LOOP_CTR = L_COPY_CTR  -- the first 3 positions are blank
         L_SFPNAME_POLICY_NO[L_SFPNAME_LOOP_CTR] = SFPSUPP:POLICY_NO
         L_SFPNAME_POL_YEAR[L_SFPNAME_LOOP_CTR]  = SFPSUPP:POL_YEAR
         L_SFPNAME_END_SEQUENCE[L_SFPNAME_LOOP_CTR] = SFPSUPP:END_SEQUENCE
         L_SFPNAME_PREM_NO[L_SFPNAME_LOOP_CTR]   = SFPSUPP:PREM_NO
         L_SFPNAME_BUILD_NO[L_SFPNAME_LOOP_CTR]  = SFPSUPP:BUILD_NO
         L_SFPNAME_SUB_CODE[L_SFPNAME_LOOP_CTR]  = SFPSUPP:SUB_CODE

      }
      else
      If SFPSUPP:name[1] <> "" Then
      {
         L_COPY_CTR = L_COPY_CTR + 1
         L_SFPNAME_LOOP_CTR = L_COPY_CTR  -- the first 3 positions are blank
         L_SFPNAME_POLICY_NO[L_SFPNAME_LOOP_CTR] = SFPSUPP:POLICY_NO
         L_SFPNAME_POL_YEAR[L_SFPNAME_LOOP_CTR]  = SFPSUPP:POL_YEAR
         L_SFPNAME_END_SEQUENCE[L_SFPNAME_LOOP_CTR] = SFPSUPP:END_SEQUENCE
         L_SFPNAME_PREM_NO[L_SFPNAME_LOOP_CTR]   = SFPSUPP:PREM_NO
         L_SFPNAME_BUILD_NO[L_SFPNAME_LOOP_CTR]  = SFPSUPP:BUILD_NO
         L_SFPNAME_SUB_CODE[L_SFPNAME_LOOP_CTR]  = SFPSUPP:SUB_CODE
      }
      Next SFPSUPP
      End

End  -- end of get_number_of_copies1

Procedure UPDATE_MAIL_BOOK
Begin

L_SUB     = 0
L_COMPANY = ""

Access ARSCANCELWRK2_ALIAS, Set ARSCANCELWRK2_ALIAS:COMPANY_ID = L_COMPANY, Approximate

While ARSCANCELWRK2_ALIAS:ERRORNUMBER = 0
 Begin

  Access SFSMAIL, Set SFSMAIL:POLICY_NO = ARSCANCELWRK2_ALIAS:POLICY_NO, Approximate

  While SFSMAIL:POLICY_NO = ARSCANCELWRK2_ALIAS:POLICY_NO
   {
    L_SUB = SFSMAIL:SUB_CODE
    Next SFSMAIL
   }

  Access SFPCURRENT, Set SFPCURRENT:POLICY_NO = ARSCANCELWRK2_ALIAS:POLICY_NO

  Access SFPNAME,
     Set SFPNAME:POLICY_NO    = SFPCURRENT:POLICY_NO,
         SFPNAME:POL_YEAR     = SFPCURRENT:POL_YEAR,
         SFPNAME:END_SEQUENCE = SFPCURRENT:END_SEQUENCE, exact

  L_POLICY_NO = SFPCURRENT:POLICY_NO
  L_POL_YEAR  = SFPCURRENT:POL_YEAR
  L_COPY_CTR  = 3 -- force to 3 on purpose

  Do GET_NUMBER_OF_COPIES

  For L_MAIL_BOOK_CTR = 1 To L_COPY_CTR
  Begin

  L_SUB = L_SUB + 10

  Access SFSMAIL, Set SFSMAIL:POLICY_NO = ARSCANCELWRK2_ALIAS:POLICY_NO,
                      SFSMAIL:SUB_CODE  = L_SUB
  If L_MAIL_BOOK_CTR = 1 Then -- insureds copy
  Begin
    If SFSMAIL:POLICY_NO <> SFPNAME:POLICY_NO Then
    Begin
      Add SFSMAIL
      Begin
          SFSMAIL:POLICY_NO    = SFPNAME:POLICY_NO
          SFSMAIL:SUB_CODE     = L_SUB
          SFSMAIL:TRANS_DATE   = TODAYSDATE
          SFSMAIL:NAME[1]      = SFPNAME:NAME[1]
          SFSMAIL:NAME[2]      = SFPNAME:NAME[2]
          SFSMAIL:NAME[3]      = SFPNAME:NAME[3]
          SFSMAIL:ADDRESS[1]   = SFPNAME:ADDRESS[1]
          SFSMAIL:ADDRESS[2]   = SFPNAME:ADDRESS[2]
          SFSMAIL:ADDRESS[3]   = SFPNAME:ADDRESS[3]
          SFSMAIL:CITY         = SFPNAME:CITY
          SFSMAIL:STR_STATE    = SFPNAME:STR_STATE
          SFSMAIL:STR_ZIPCODE  = SFPNAME:STR_ZIPCODE
          SFSMAIL:REASON       = 1
          If L_COPY_CTR > 3 Then
          { SFSMAIL:MTG        = "Y" }
          SFSMAIL:EFF_DATE     = TODAYSDATE
          SFSMAIL:TERMINATION_DATE  = ARSCXWORK:CX_EFF_DATE
          SFSMAIL:AGENT_NO     = SFPNAME:AGENT_NO
      End -- end of add

    End -- end of insureds copy

  End -- mail book ctr = 1

  /* beginning of the mortgagee updating */
   If L_MAIL_BOOK_CTR >= 4 Then
    {
      L_TEMP_POLICY_NO   = L_SFPNAME_POLICY_NO[L_MAIL_BOOK_CTR]
      L_TEMP_POL_YEAR    = L_SFPNAME_POL_YEAR[L_MAIL_BOOK_CTR]
      L_TEMP_END_SEQUENCE = L_SFPNAME_END_SEQUENCE[L_MAIL_BOOK_CTR]
      L_TEMP_PREM_NO      = L_SFPNAME_PREM_NO[L_MAIL_BOOK_CTR]
      L_TEMP_BUILD_NO     = L_SFPNAME_BUILD_NO[L_MAIL_BOOK_CTR]
      L_TEMP_SUB_CODE     = L_SFPNAME_SUB_CODE[L_MAIL_BOOK_CTR]

      Access SFPSUPP, Set SFPSUPP:POLICY_NO    = L_TEMP_POLICY_NO,
                          SFPSUPP:POL_YEAR     = L_TEMP_POL_YEAR,
                          SFPSUPP:END_SEQUENCE = L_TEMP_END_SEQUENCE,
                          SFPSUPP:PREM_NO      = L_TEMP_PREM_NO,
                          SFPSUPP:BUILD_NO     = L_TEMP_BUILD_NO,
                          SFPSUPP:SUB_CODE     = L_TEMP_SUB_CODE

      If SFPSUPP:POLICY_NO    = L_TEMP_POLICY_NO And
         SFPSUPP:POL_YEAR     = L_TEMP_POL_YEAR And
         SFPSUPP:END_SEQUENCE = L_TEMP_END_SEQUENCE And
         SFPSUPP:PREM_NO      = L_TEMP_PREM_NO And
         SFPSUPP:BUILD_NO     = L_TEMP_BUILD_NO And
         SFPSUPP:SUB_CODE     = L_TEMP_SUB_CODE Then
       {

        L_COMPANY = SFPNAME:COMPANY_ID

        Access SFSMORT, Set SFSMORT:COMPANY_ID  = L_COMPANY,
                            SFSMORT:MORTGAGE_ID = SFPSUPP:MORTGAGE_ID,Generic

        If SFPSUPP:MORTGAGE_ID <> "" Then
        {
          Add SFSMAIL
          {
              SFSMAIL:POLICY_NO    = SFPNAME:POLICY_NO
              SFSMAIL:SUB_CODE     = L_SUB
              SFSMAIL:TRANS_DATE   = TODAYSDATE
              SFSMAIL:NAME[1]      = SFSMORT:NAME[1]
              SFSMAIL:NAME[2]      = SFSMORT:NAME[2]
              SFSMAIL:NAME[3]      = SFSMORT:NAME[3]
              SFSMAIL:ADDRESS[1]   = SFSMORT:ADDRESS[1]
              SFSMAIL:ADDRESS[2]   = SFSMORT:ADDRESS[2]
              SFSMAIL:ADDRESS[3]   = SFSMORT:ADDRESS[3]
              SFSMAIL:CITY         = SFSMORT:CITY
              SFSMAIL:STR_STATE    = SFSMORT:STR_STATE
              SFSMAIL:STR_ZIPCODE  = SFSMORT:STR_ZIPCODE
              SFSMAIL:REASON       = 1
              If L_COPY_CTR > 3 Then
              { SFSMAIL:MTG        = "Y" }
              SFSMAIL:EFF_DATE     = TODAYSDATE
              SFSMAIL:TERMINATION_DATE  = ARSCXWORK:CX_EFF_DATE
              SFSMAIL:AGENT_NO     = SFPNAME:AGENT_NO
          }  -- end of add for sfsmort
        }
        else
      --  adding from sfpsupp
        If SFPSUPP:MORTGAGE_ID = "" Then
        {
          Add SFSMAIL
          {
              SFSMAIL:POLICY_NO    = SFPNAME:POLICY_NO
              SFSMAIL:SUB_CODE     = L_SUB
              SFSMAIL:TRANS_DATE   = TODAYSDATE
              SFSMAIL:NAME[1]      = SFPSUPP:NAME[1]
              SFSMAIL:NAME[2]      = SFPSUPP:NAME[2]
              SFSMAIL:NAME[3]      = SFPSUPP:NAME[3]
              SFSMAIL:ADDRESS[1]   = SFPSUPP:ADDRESS[1]
              SFSMAIL:ADDRESS[2]   = SFPSUPP:ADDRESS[2]
              SFSMAIL:ADDRESS[3]   = SFPSUPP:ADDRESS[3]
              SFSMAIL:CITY         = SFPSUPP:CITY
              SFSMAIL:STR_STATE    = SFPSUPP:STR_STATE
              SFSMAIL:STR_ZIPCODE  = SFPSUPP:STR_ZIPCODE
                SFSMAIL:REASON       = 1
              If L_COPY_CTR > 3 Then
              { SFSMAIL:MTG        = "Y" }
              SFSMAIL:EFF_DATE     = TODAYSDATE
              SFSMAIL:TERMINATION_DATE  = ARSCXWORK:CX_EFF_DATE
              SFSMAIL:AGENT_NO     = SFPNAME:AGENT_NO
           } -- end of add for sfpsupp
        } -- end of checking for sfpsupp:mortgage_id = ""

       } -- checking for mortgagee reference existing

    }  -- checking for mail book ctr => 4

   End  -- end of checking for record exists

 Next ARSCANCELWRK2_ALIAS
 End -- end of arscancelwrk_alais

End -- end of update_mail_book

    -- new routines added for cancellation long form
    -- June 20, 2006 -- dlp

procedure check_for_correct_amounts
begin
-- procedure will check to ensure that there are no (-) amounts
-- being produced, that the notice is > then the notice waive amount
-- unless it is the last installment.  If it is the last installment
-- then this will check to see if the amount is > than the waive amount

--l_company_id = ""

access arscxwork_alias,
   set arscxwork_alias:company_id = "", approximate

while arscxwork_alias:errornumber = 0
begin

-- checking for (-) balance

    if arscxwork_alias:amount_due < 0 then
    begin
        access arscxwork_alt2,
        set arscxwork_alt2:company_id = arscxwork_alias:company_id,
            arscxwork_alt2:policy_no  = arscxwork_alias:policy_no,
            arscxwork_alt2:due_date   = arscxwork_alias:due_date,
            arscxwork_alt2:sub_code   = arscxwork_alias:sub_code

        if arscxwork_alt2:company_id  = arscxwork_alias:company_id and
           arscxwork_alt2:policy_no   = arscxwork_alias:policy_no and
           arscxwork_alt2:due_date    = arscxwork_alias:due_date and
           arscxwork_alt2:sub_code    = arscxwork_alias:sub_code then
           begin
              delete arscxwork_alt2
           end
    end -- end of (-) balance check

-- checking for waive amount - mid term (where billing ctr <> # of payments

access arspayplan,
set arspayplan:company_id       = arscxwork_alias:company_id,
    arspayplan:line_of_business = arscxwork_alias:line_of_business,
    arspayplan:payment_plan     = arscxwork_alias:payment_plan

if arspayplan:number_of_payments <> arscxwork_alias:billing_ctr then
begin
-- this is an interim bucket - not the last one

access arscontrol, set arscontrol:company_id = arscxwork_alias:company_id

if arscxwork_alias:amount_due <= arscontrol:waive_amount_debit then
begin
        access arscxwork_alt2,
        set arscxwork_alt2:company_id = arscxwork_alias:company_id,
            arscxwork_alt2:policy_no  = arscxwork_alias:policy_no,
            arscxwork_alt2:due_date   = arscxwork_alias:due_date,
            arscxwork_alt2:sub_code   = arscxwork_alias:sub_code

        if arscxwork_alt2:company_id  = arscxwork_alias:company_id and
           arscxwork_alt2:policy_no   = arscxwork_alias:policy_no and
           arscxwork_alt2:due_date    = arscxwork_alias:due_date and
           arscxwork_alt2:sub_code    = arscxwork_alias:sub_code then
           begin
              delete arscxwork_alt2
           end
end -- end of interim notice waive amount check

end -- end of payment # checking

-- checking for waive amount - last bucket late (where billing ctr = # of payments

access arspayplan,
set arspayplan:company_id       = arscxwork_alias:company_id,
    arspayplan:line_of_business = arscxwork_alias:line_of_business,
    arspayplan:payment_plan     = arscxwork_alias:payment_plan

if arspayplan:number_of_payments = arscxwork_alias:billing_ctr then
begin
-- this is an interim bucket - not the last one

access arscontrol, set arscontrol:company_id = arscxwork_alias:company_id

if arscxwork_alias:amount_due < arscontrol:cancel_waive_amount then
begin
        access arscxwork_alt2,
        set arscxwork_alt2:company_id = arscxwork_alias:company_id,
            arscxwork_alt2:policy_no  = arscxwork_alias:policy_no,
            arscxwork_alt2:due_date   = arscxwork_alias:due_date,
            arscxwork_alt2:sub_code   = arscxwork_alias:sub_code

        if arscxwork_alt2:company_id  = arscxwork_alias:company_id and
           arscxwork_alt2:policy_no   = arscxwork_alias:policy_no and
           arscxwork_alt2:due_date    = arscxwork_alias:due_date and
           arscxwork_alt2:sub_code    = arscxwork_alias:sub_code then
           begin
              delete arscxwork_alt2
           end
end -- end of last bucket waive amount check

end -- end of last bucket check

next arscxwork_alias

end

end -- end of procedure

procedure check_for_lapse
begin

--l_company_id       = ""
l_hold_company_id  = ""
l_hold_policy_no   = 0
l_hold_trans_code  = 0
l_hold_billing_ctr = 0


access arscxwork_alias,
   set arscxwork_alias:company_id = "", approximate

while arscxwork_alias:company_id <> ""
begin

-- if l_hold_company_id = "" then
-- begin
--    l_hold_company_id  = arscxwork_alias:company_id
--    l_hold_policy_no   = arscxwork_alias:policy_no
--    l_hold_trans_code  = arscxwork_alias:trans_code
--    l_hold_billing_ctr = arscxwork_alias:billing_ctr
-- end

access sfpmaster, set sfpmaster:policy_no = arscxwork_alias:policy_no,
                      sfpmaster:pol_year  = arscxwork_alias:pol_year,
                      sfpmaster:end_sequence = 0, generic
       if sfpmaster:trans_code <> 14 or
          (sfpmaster:trans_code  =  14  and
           arscxwork_alias:billing_ctr >   1) then
       begin

           do update_sfscancel
           access arscxwork_alt, set arscxwork_alt:company_id = arscxwork_alias:company_id,
                                     arscxwork_alt:policy_no  = arscxwork_alias:policy_no,
                                     arscxwork_alt:due_date   = arscxwork_alias:due_date, approximate

           while arscxwork_alt:company_id = arscxwork_alias:company_id and
                 arscxwork_alt:policy_no  = arscxwork_alias:policy_no and
                 arscxwork_alt:due_date   = arscxwork_alias:due_date
                 begin
                     delete arscxwork_alt
                     next arscxwork_alt
                 end
       end

--    l_hold_policy_no   = arscxwork_alias:policy_no
--    l_hold_trans_code  = arscxwork_alias:trans_code
--    l_hold_billing_ctr = arscxwork_alias:billing_ctr

-- end -- end of control break checking

        next arscxwork_alias

        end

end -- end of procedure

procedure update_sfscancel
begin

-- first step - set the subcode
l_cx_sub_code = 0

access sfscancel, set sfscancel:company_id = arscxwork_alias:company_id,
                      sfscancel:policy_no  = arscxwork_alias:policy_no, approximate

while sfscancel:company_id = arscxwork_alias:company_id and
      sfscancel:policy_no  = arscxwork_alias:policy_no
      begin
          l_cx_sub_code = sfscancel:sub_code
          next sfscancel
      end

l_cx_sub_code = l_cx_sub_code + 10

-- set up record to be written
access sfscancel, set sfscancel:company_id  = arscxwork_alias:company_id,
                      sfscancel:policy_no   = arscxwork_alias:policy_no,
                      sfscancel:sub_code    = l_cx_sub_code

if sfscancel:company_id <> arscxwork_alias:company_id or
   sfscancel:policy_no  <> arscxwork_alias:policy_no or
   sfscancel:sub_code   <> l_cx_sub_code then
   begin
   add sfscancel
   begin
       sfscancel:company_id         = arscxwork_alias:company_id
       sfscancel:policy_no          = arscxwork_alias:policy_no
       sfscancel:sub_code           = l_cx_sub_code
       sfscancel:cx_eff_date        = arscxwork_alias:cx_eff_date
       sfscancel:mailing_date       = todaysdate
--       sfscancel:status_eff_date    = arscxwork_alias:trans_eff
       sfscancel:status_eff_date    = 00.00.0000
       sfscancel:status             = "PENDING"
       sfscancel:use_standard_time  = "Y"
       sfscancel:cancellation_nonrenewal = "C"
       sfscancel:cancellation_code  = 100
       access sfscxreason, set sfscxreason:company_id = arscxwork_alias:company_id,
                               sfscxreason:cancellation_code = 100
       sfscancel:reason[1]             = sfscxreason:reason
       -- need to get the underwriter for this policy
       do get_underwriter
       sfscancel:authorized_representative = l_underwriter_name
       sfscancel:trans_date         = todaysdate
       sfscancel:reinstatement_letter = "X"
       sfscancel:underwriter        = l_underwriter_code
       sfscancel:consumer_id        = 0
       sfscancel:coverage_only      = 0
       sfscancel:past_due_amount    = arscxwork_alias:amount_due
       sfscancel:past_due_date      = arscxwork_alias:due_date
       sfscancel:line_of_business   = arscxwork_alias:line_of_business
       sfscancel:policy_eff_date    = arscxwork_alias:trans_eff
       end

    -- create new sfscxwork file
    proc ("sfscxwork.mk")/noconsole

    -- add records to sfscxwork
    do add_sfscxwork

    end
end -- end of procedure

procedure add_sfscxwork
begin

access sfscxwork, set sfscxwork:company_id = sfscancel:company_id,
                      sfscxwork:policy_no  = sfscancel:policy_no,
                      sfscxwork:sub_code   = sfscancel:sub_code

if sfscxwork:errornumber <> 0 then -- 0 would be record exists
begin
   add sfscxwork
   begin
      sfscxwork:company_id     = sfscancel:company_id
      sfscxwork:policy_no      = sfscancel:policy_no
      sfscxwork:sub_code       = sfscancel:sub_code
   end
end

end -- end of procedure

procedure get_underwriter
begin

l_underwriter_code = 0

access sfsline, set sfsline:company_id       = arscxwork_alias:company_id,
                    sfsline:line_of_business = arscxwork_alias:line_of_business,
                    sfsline:lob_subline      = "0000"

access sfsagent, set sfsagent:company_id = arscxwork_alias:company_id,
                     sfsagent:agent_no   = arscxwork_alias:agent_no

if sfsline:line_type one of "P" then
begin
    l_underwriter_code = sfsagent:personal_underwriter
    access sfsperun, set sfsperun:company_id           = arscxwork_alias:company_id,
                         sfsperun:personal_underwriter = l_underwriter_code

    l_underwriter_name  = sfsperun:name
end
else
begin
    l_underwriter_code = sfsagent:commercial_underwriter
    access sfscomun, set sfscomun:company_id             = arscxwork_alias:company_id,
                         sfscomun:commercial_underwriter = l_underwriter_code

    l_underwriter_name  = sfscomun:name
end

end -- end of procedure

PROCEDURE CHECK_FOR_VALID_AMOUNT
BEGIN

L_VALID_AMOUNT   = "N"
L_TOTAL_AMOUNT   = 0.00

ACCESS ARSBILLING_ALT, SET ARSBILLING_ALT:COMPANY_ID = ARSBILLING:COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO  = ARSBILLING:POLICY_NO, APPROXIMATE

WHILE ARSBILLING_ALT:COMPANY_ID = ARSBILLING:COMPANY_ID AND
      ARSBILLING_ALT:POLICY_NO  = ARSBILLING:POLICY_NO
      BEGIN
      IF ARSBILLING_ALT:STATUS ONE OF "B" AND
         arsbilling_alt:due_date >= g_starting_date and
         arsbilling_alt:due_date <= g_ending_date and
         ARSBILLING_ALT:TRANS_CODE ONE OF 10,11,12,13,14,15,16 THEN
         BEGIN
             L_TOTAL_AMOUNT = L_TOTAL_AMOUNT + ARSBILLING_ALT:INSTALLMENT_AMOUNT -
             (ARSBILLING_ALT:TOTAL_AMOUNT_PAID + ARSBILLING_ALT:WRITE_OFF_AMOUNT)
         END
         NEXT ARSBILLING_ALT
         END

ACCESS ARSCONTROL, SET ARSCONTROL:COMPANY_ID = ARSBILLING:COMPANY_ID

IF L_TOTAL_AMOUNT > ARSCONTROL:WAIVE_AMOUNT_DEBIT AND
   L_TOTAL_AMOUNT <> 0.00 THEN
   BEGIN
       L_VALID_AMOUNT = "Y"
   END
   else
   begin
      do set_past_due_flag
   end

END -- END OF PROCEDURE

PROCEDURE SET_PAST_DUE_FLAG
BEGIN

ACCESS ARSBILLING_ALT, SET ARSBILLING_ALT:COMPANY_ID = ARSBILLING:COMPANY_ID,
                           ARSBILLING_ALT:POLICY_NO  = ARSBILLING:POLICY_NO, APPROXIMATE

WHILE ARSBILLING_ALT:COMPANY_ID = ARSBILLING:COMPANY_ID AND
      ARSBILLING_ALT:POLICY_NO  = ARSBILLING:POLICY_NO
      BEGIN
      IF ARSBILLING_ALT:STATUS ONE OF "B" AND
         arsbilling_alt:due_date >= g_starting_date and
         arsbilling_alt:due_date <= g_ending_date THEN
         BEGIN
         ACCESS ARSBILLING_ALT2,
         SET ARSBILLING_ALT2:COMPANY_ID       = ARSBILLING_ALT:COMPANY_ID,
             ARSBILLING_ALT2:POLICY_NO        = ARSBILLING_ALT:POLICY_NO,
             arsbilling_alt2:trans_date       = arsbilling_alt:trans_date,
             arsbilling_alt2:trans_eff        = arsbilling_alt:trans_eff,
             arsbilling_alt2:trans_exp        = arsbilling_alt:trans_exp,
             arsbilling_alt2:trans_code       = arsbilling_alt:trans_code,
             arsbilling_alt2:line_of_business = arsbilling_alt:line_of_business,
             arsbilling_alt2:comm_rate        = arsbilling_alt:comm_rate,
             arsbilling_alt2:sub_code         = arsbilling_alt:sub_code,
             arsbilling_alt2:billing_ctr      = arsbilling_alt:billing_ctr,
             arsbilling_alt2:return_check_ctr = arsbilling_alt:return_check_ctr

         if  ARSBILLING_ALT2:COMPANY_ID       = ARSBILLING_ALT:COMPANY_ID and
             ARSBILLING_ALT2:POLICY_NO        = ARSBILLING_ALT:POLICY_NO and
             arsbilling_alt2:trans_date       = arsbilling_alt:trans_date and
             arsbilling_alt2:trans_eff        = arsbilling_alt:trans_eff and
             arsbilling_alt2:trans_exp        = arsbilling_alt:trans_exp and
             arsbilling_alt2:trans_code       = arsbilling_alt:trans_code and
             arsbilling_alt2:line_of_business = arsbilling_alt:line_of_business and
             arsbilling_alt2:comm_rate        = arsbilling_alt:comm_rate and
             arsbilling_alt2:sub_code         = arsbilling_alt:sub_code and
             arsbilling_alt2:billing_ctr      = arsbilling_alt:billing_ctr and
             arsbilling_alt2:return_check_ctr = arsbilling_alt:return_check_ctr then
             begin
             change arsbilling_alt2
             begin
                 arsbilling_alt2:printed      = 0
             end
             end
             end
             next arsbilling_alt
             end

end -- end of procedure

procedure add_image_header_version5

BEGIN
  L_DD = Day(TODAYSDATE)
  L_MM = Month(TODAYSDATE)
  L_YY = Year(TODAYSDATE)

  Access SFSLINE,
     Set SFSLINE:COMPANY_ID       = SFPNAME:COMPANY_ID,
         SFSLINE:LINE_OF_BUSINESS = SFPNAME:LINE_OF_BUSINESS,
         SFSLINE:LOB_SUBLINE      = L_LOB_SUBLINE

  Access SFSLINE2,
     Set SFSLINE2:COMPANY_ID       = SFPNAME:COMPANY_ID,
         SFSLINE2:LINE_OF_BUSINESS = SFPNAME:LINE_OF_BUSINESS,
         SFSLINE2:LOB_SUBLINE      = L_LOB_SUBLINE

  l_policy_no = sfpname:policy_no

  If scipsimage_version5:ZEROSUPPRESS_NUMBER = 1 Then
    {
      L_policy = Str(L_policy_No)
    }
  Else
    {
      L_policy = Str(L_policy_NO,"999999999")
    }


  If scipsimage_version5:ALPHA_CHARACTER = 1 Then
    Begin
      If scipsimage_version5:SPACE_BETWEEN_ALPHA_NUMBER = 0 Then
        {
          if trun(sfsline2:ADDITIONAL_ALPHA_PREFIX) <> "" then
            {

              L_policy_str = Trun(SFSLINE2:ADDITIONAL_ALPHA_PREFIX) + l_policy
            }
          else
            {
              L_policy_str = Trun(SFSLINE:ALPHA) + L_policy
            }


        }
      Else
        {
          if trun(sfsline2:ADDITIONAL_ALPHA_PREFIX) <> "" then
            {
              L_policy_str = Trun(SFSLINE2:ADDITIONAL_ALPHA_PREFIX + L_policy)
            }
          else
            {
              L_policy_str = Trun(SFSLINE:ALPHA + " " + L_policy)
            }
        }
    End
  Else
    {
      L_policy_STR = Trun(L_policy)
    }

  L_FILE_NUMBER = Trun(scipsimage_version5:FILE_NUMBER[1]) + Trun(L_policy_STR) +
                  Trun(scipsimage_version5:FILE_NUMBER[2])

  I_NAME = sfpname:name[1]
  Include "sfsrevname7.pro"
  If scipsimage_version5:REVERSE_NAME = 1 Then
    {
      L_FILE_NAME = Trun(scipsimage_version5:FILE_NAME[1]) + Trun(I_REV_NAME) +
                    Trun(scipsimage_version5:FILE_NAME[2])
    }
  else
    {
      L_FILE_NAME = Trun(scipsimage_version5:FILE_NAME[1]) + Trun(sfpname:name[1]) +
                    Trun(scipsimage_version5:FILE_NAME[2])
    }

  if (sfsline:personal_commercial = "P") then  --if the line is Personal Lines then I need a different Drawer
    {
      L_DRAWER  = Trun(scipsimage_version5:DRAWER[1]) +
                  Trun(scipsimage_version5:DRAWER_NAME[1]) +
                  Trun(scipsimage_version5:DRAWER[2])
    }
  else  --COMMERCIAL LINES HERE
    {
      L_DRAWER  = Trun(scipsimage_version5:DRAWER[1]) +
                  Trun(scipsimage_version5:DRAWER_NAME[2]) +
                  Trun(scipsimage_version5:DRAWER[2])
    }

  L_FOLDER_TYPE = Trun(scipsimage_version5:FOLDER_TYPE[1]) +
                  Trun(scipsimage_version5:FOLDER_TYPEs[10]) +
                  Trun(scipsimage_version5:FOLDER_TYPE[2])


  l_file_type =  Trun(scipsimage_version5:File_type[1]) +
                 Trun(scipsimage_version5:file_types[10])+
                 Trun(scipsimage_version5:file_type[2])

  L_DOC_TYPE    = Trun(scipsimage_version5:DOC_TYPE[1]) +
                  Trun(scipsimage_version5:DOC_TYPEs[10]) +
                  Trun(scipsimage_version5:DOC_TYPE[2])

--  L_DOC_DATE    = Trun(scipsimage_version5:DOC_DATE[1]) +
  --                Str(L_YY,4) + Str(L_MM,2) + Str(L_DD,2) +
    --              Trun(scipsimage_version5:DOC_DATE[2])

  L_doc_date = Trun(scipsimage_version5:DOC_DATE[1]) + Str(L_MM,2) + "-" + Str(L_DD,2) + "-" +
             Str(L_YY,4) + Trun(scipsimage_version5:DOC_DATE[2])

  L_py_policy_year = Trun(scipsimage_version5:py_year[1]) + trun(str(sfpname:pol_year)) +
                     Trun(scipsimage_version5:py_year[2])

  Deletefile(l_header_name)   --name for the header information to be added for imaging

  If scipsimage_version5:ZEROSUPPRESS_NUMBER = 1 Then
    {
      Writefile (l_header_name,"%s%s%s<nl>",Trun(scipsimage_version5:FILE_NUMBER[1]),
                               trun(L_policy_str),Trun(scipsimage_version5:FILE_NUMBER[2]))
    }

  Writefile (l_header_name,"%s<nl>",trun(L_FILE_NAME))
  Writefile (l_header_name,"%s<nl>",trun(L_DRAWER))
  Writefile (l_header_name,"%s<nl>",trun(L_FOLDER_TYPE))
  Writefile (l_header_name,"%s<nl>",trun(L_DOC_TYPE))
  Writefile (l_header_name,"%s<nl>",trun(L_DOC_DATE))
  Writefile (l_header_name,"%s<nl>",trun(L_file_type))
  Writefile (l_header_name,"%s<nl>",trun(L_py_policy_year))
  Writefile (l_header_name,"%s<nl>",scipsimage_version5:START_CAPTURE)
  Writefile (l_header_name,"%s<ff>",scipsimage_version5:END_CAPTURE)
  Closefile (l_header_name)

  Proc("cli joinit %s %s",l_non_pay_name[1],l_header_name)  --this is because the sfpindex will need to go at the beginning

  do get_unique_pcl_file
  Proc("cli mv %s %s",l_header_name,L_invoice_PDF_1)/noconsole  --moving it to a unique file
  --make sure we have a unique file name.

  L_UNIX_PATH   = scipsimage_version5:DIRECTORY_PATH/raw
  Proc("cli mv %s %s",L_invoice_PDF_1,L_UNIX_PATH)/noconsole
  Deletefile (L_header_name)
  Deletefile (L_non_pay_name[1])
END


procedure add_image_header

begin
  Access scipsimage,
     Set scipsimage:COMPANY_ID = sfpname:company_id, Generic

  L_DD = Day(TODAYSDATE)
  L_MM = Month(TODAYSDATE)
  L_YY = Year(TODAYSDATE)

  If scipsimage:ZEROSUPPRESS_NUMBER = 1 Then
    {
      L_policy = Str(L_policy_NO,"ZZZZZZZZZ")
    }
  Else
    {
      L_policy = Str(L_policy_NO,"999999999")
    }
  If scipsimage:ALPHA_CHARACTER = 1 Then
    Begin
      If scipsimage:SPACE_BETWEEN_ALPHA_NUMBER = 0 Then
        {
          L_policy_str = Trun(SFSLINE:ALPHA + L_policy)
        }
      Else
        {
          L_policy_str = Trun(SFSLINE:ALPHA + " " + L_policy)
        }
    End
  Else
    {
      L_policy_STR = Trun(L_policy)
    }

  L_FILE_NUMBER = Trun(scipsimage:FILE_NUMBER[1]) + Trun(L_policy_STR) +
                  Trun(scipsimage:FILE_NUMBER[2])

  I_NAME = sfpname:name[1]
  Include "sfsrevname.pro"
  If scipsimage:REVERSE_NAME = 1 Then
    {
      L_FILE_NAME = Trun(scipsimage:FILE_NAME[1]) + Trun(I_REV_NAME) +
                    Trun(scipsimage:FILE_NAME[2])
    }

  Access SFSLINE,
     Set SFSLINE:COMPANY_ID       = SFPNAME:COMPANY_ID,
         SFSLINE:LINE_OF_BUSINESS = SFPNAME:LINE_OF_BUSINESS,
         SFSLINE:LOB_SUBLINE      = L_LOB_SUBLINE

  if (sfsline:personal_commercial = "P") then  --if the line is Personal Lines then I need a different Drawer
    {
      L_DRAWER  = Trun(scipsimage:DRAWER[1]) +
                  Trun(scipsimage:DRAWER_NAME_2[1]) +
                  Trun(scipsimage:DRAWER[2])
    }
  else  --COMMERCIAL LINES HERE
    {
      L_DRAWER  = Trun(scipsimage:DRAWER[1]) +
                  Trun(scipsimage:DRAWER_NAME) +
                  Trun(scipsimage:DRAWER[2])
    }

  L_FOLDER_TYPE = Trun(scipsimage:FOLDER_TYPE[1]) +
                  Trun(scipsimage:FOLDER_TYPE2[1]) +
                  Trun(scipsimage:FOLDER_TYPE[2])
  L_DOC_TYPE    = Trun(scipsimage:DOC_TYPE[1]) +
                  Trun(scipsimage:DOC_TYPE2[1]) +
                  Trun(scipsimage:DOC_TYPE[2])
  L_DOC_DATE    = Trun(scipsimage:DOC_DATE[1]) +
                  Str(L_YY,4) + Str(L_MM,2) + Str(L_DD,2) +
                  Trun(scipsimage:DOC_DATE[2])

  Deletefile(l_header_name)   --name for the header information to be added for imaging

  If scipsimage:ZEROSUPPRESS_NUMBER = 1 Then
    {
      Writefile (l_header_name,"%s%n%s<nl>",Trun(scipsimage:FILE_NUMBER[1]),
                               L_policy_no,Trun(scipsimage:FILE_NUMBER[2]))
    }

  Writefile (l_header_name,"%s<nl>",L_FILE_NAME)
  Writefile (l_header_name,"%s<nl>",L_DRAWER)
  Writefile (l_header_name,"%s<nl>",L_FOLDER_TYPE)
  Writefile (l_header_name,"%s<nl>",L_DOC_TYPE)
  Writefile (l_header_name,"%s<nl>",L_DOC_DATE)
  Writefile (l_header_name,"%s<nl>",scipsimage:START_CAPTURE)
  Writefile (l_header_name,"%s<ff>",scipsimage:END_CAPTURE)
  Closefile (l_header_name)

  Proc("cli joinit %s %s",l_non_pay_name[1],l_header_name)  --this is because the sfpindex will need to go at the beginning

  do get_unique_pcl_file
  Proc("cli mv %s %s",l_header_name,L_invoice_PDF_1)/noconsole  --moving it to a unique file
  --make sure we have a unique file name.

  L_UNIX_PATH   = scipsimage:DIRECTORY_PATH/raw
  Proc("cli mv %s %s",L_invoice_PDF_1,L_UNIX_PATH)/noconsole
  Deletefile (L_header_name)
  Deletefile (L_non_pay_name[1])
end

Procedure get_unique_pcl_file

BEGIN
  I_CSEXEC_APPLICATION = "PRINT                    "/raw
  Include "sfscsexec.pro"
  L_invoice_PDF_1 = lowercase(programid)+"_"+Str(I_CSEXEC_NUMBER)+".pcl"
END

procedure get_full_amount_due
begin
l_pay_full_amount = 0
Access ARSBILLING_ALt1, Set ARSBILLING_ALt1:COMPANY_ID       = ARSCxwork:COMPANY_ID,
                            ARSBILLING_ALt1:POLICY_NO        = ARSCxwork:POLICY_NO, Approximate

While ARSBILLING_ALt1:COMPANY_ID = ARSCxwork:COMPANY_ID And
      ARSBILLING_ALt1:POLICY_NO  = ARSCxwork:POLICY_NO
      {
       if arsbilling_alt1:pol_year   = arscxwork:pol_year then
        {
         If ARSBILLING_ALT1:STATUS One Of "B", "O" Then
          {
           if arsbilling_alt1:trans_code one of 18,68 then
             {
              if arsbilling_alt1:status = "B" and
                 arsbilling_alt1:billing_ctr not one of 1 then
                  {
                   l_pay_full_amount = l_pay_full_amount +
                               (arsbilling_alt1:installment_amount -
                               (arsbilling_alt1:total_amount_paid +
                                arsbilling_alt1:write_off_amount))

                  }
             }
           else  -- trans code not one of 18,68
             {
              l_pay_full_amount = l_pay_full_amount +
                             (arsbilling_alt1:installment_amount -
                             (arsbilling_alt1:total_amount_paid +
                              arsbilling_alt1:write_off_amount))
             }

          }
        }
      next arsbilling_alt1
      }


end

procedure print_full_amount_due
begin

Writefile(l_non_pay_name[1],"%s<NL>",L_LETTER_GOTHIC_12)

L_V_POSITION = L_V_POSITION + 120

Writefile(l_non_pay_name[1],"%s","<033>&a1620h" + Trun(Str(L_V_POSITION) + "V"))
Writefile(l_non_pay_name[1],"%s<NL>",trun(l_cancel_lit))
Writefile(l_non_pay_name[1],"%s","<033>&a4590h" + Trun(Str(L_V_POSITION) + "V"))
Writefile(l_non_pay_name[1],"%s<NL>",Trun(Str(l_pay_full_amount,"($ZZ,ZZZ,ZZZ.99)")))

L_LINES_PRINTED = L_LINES_PRINTED + 1

If L_LINES_PRINTED >= 29 Then
begin
   Do EJECT_PAGE
   Do PRINT_FORM
   L_LINES_PRINTED = 0
   L_PAGES_CTR = L_PAGES_CTR + 1
   L_V_POSITION = 1800
end

end
End  -- end of program

/* end of file */
